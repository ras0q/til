/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/channels/{channelId}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネルメッセージのリストを取得
     * @description 指定したチャンネルのメッセージのリストを取得します。
     */
    get: operations["getMessages"];
    put?: never;
    /**
     * チャンネルにメッセージを投稿
     * @description 指定したチャンネルにメッセージを投稿します。
     *     embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     *     アーカイブされているチャンネルに投稿することはできません。
     */
    post: operations["postMessage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * メッセージを検索
     * @description メッセージを検索します。
     */
    get: operations["searchMessages"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{messageId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    /**
     * メッセージを取得
     * @description 指定したメッセージを取得します。
     */
    get: operations["getMessage"];
    /**
     * メッセージを編集
     * @description 指定したメッセージを編集します。
     *     自身が投稿したメッセージのみ編集することができます。
     *     アーカイブされているチャンネルのメッセージを編集することは出来ません。
     */
    put: operations["editMessage"];
    post?: never;
    /**
     * メッセージを削除
     * @description 指定したメッセージを削除します。
     *     自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。
     *     アーカイブされているチャンネルのメッセージを編集することは出来ません。
     */
    delete: operations["deleteMessage"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{messageId}/pin": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ピン留めを取得
     * @description 指定したメッセージのピン留め情報を取得します。
     */
    get: operations["getPin"];
    put?: never;
    /**
     * ピン留めする
     * @description 指定したメッセージをピン留めします。
     *     アーカイブされているチャンネルのメッセージ・存在しないメッセージ・チャンネル当たりの上限数を超えたメッセージのピン留めはできません。
     */
    post: operations["createPin"];
    /**
     * ピン留めを外す
     * @description 指定したメッセージのピン留めを外します。
     */
    delete: operations["removePin"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/stats": {
    parameters: {
      query?: {
        /** @description 削除されたメッセージを除外するかどうか(デフォルト false) */
        "exclude-deleted-messages"?:
          components["parameters"]["excludeDeletedMessagesInQuery"];
      };
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネル統計情報を取得
     * @description 指定したチャンネルの統計情報を取得します。
     */
    get: operations["getChannelStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/topic": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネルトピックを取得
     * @description 指定したチャンネルのトピックを取得します。
     */
    get: operations["getChannelTopic"];
    /**
     * チャンネルトピックを編集
     * @description 指定したチャンネルのトピックを編集します。
     *     アーカイブされているチャンネルのトピックは編集できません。
     */
    put: operations["editChannelTopic"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/viewers": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネル閲覧者リストを取得
     * @description 指定したチャンネルの閲覧者のリストを取得します。
     */
    get: operations["getChannelViewers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * ファイルメタのリストを取得
     * @description 指定したクエリでファイルメタのリストを取得します。
     *     クエリパラメータ`channelId`, `mine`の少なくともいずれかが必須です。
     */
    get: operations["getFiles"];
    put?: never;
    /**
     * ファイルをアップロード
     * @description 指定したチャンネルにファイルをアップロードします。
     *     アーカイブされているチャンネルにはアップロード出来ません。
     */
    post: operations["postFile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{fileId}/meta": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ファイルメタを取得
     * @description 指定したファイルのメタ情報を取得します。
     *     指定したファイルへのアクセス権限が必要です。
     */
    get: operations["getFileMeta"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{fileId}/thumbnail": {
    parameters: {
      query?: {
        /** @description 取得するサムネイルのタイプ */
        type?: components["schemas"]["ThumbnailType"];
      };
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    /**
     * サムネイル画像を取得
     * @description 指定したファイルのサムネイル画像を取得します。
     *     指定したファイルへのアクセス権限が必要です。
     */
    get: operations["getThumbnailImage"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/files/{fileId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ファイルをダウンロード
     * @description 指定したファイル本体を取得します。
     *     指定したファイルへのアクセス権限が必要です。
     */
    get: operations["getFile"];
    put?: never;
    post?: never;
    /**
     * ファイルを削除
     * @description 指定したファイルを削除します。
     *     指定したファイルの削除権限が必要です。
     */
    delete: operations["deleteFile"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/pins": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネルピンのリストを取得
     * @description 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     */
    get: operations["getChannelPins"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{messageId}/stamps": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    /**
     * メッセージのスタンプリストを取得
     * @description 指定したメッセージに押されているスタンプのリストを取得します。
     */
    get: operations["getMessageStamps"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{messageId}/stamps/{stampId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * スタンプを押す
     * @description 指定したメッセージに指定したスタンプを押します。
     */
    post: operations["addMessageStamp"];
    /**
     * スタンプを消す
     * @description 指定したメッセージから指定した自身が押したスタンプを削除します。
     */
    delete: operations["removeMessageStamp"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stamps/{stampId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    /**
     * スタンプ情報を取得
     * @description 指定したスタンプの情報を取得します。
     */
    get: operations["getStamp"];
    put?: never;
    post?: never;
    /**
     * スタンプを削除
     * @description 指定したスタンプを削除します。
     *     対象のスタンプの削除権限が必要です。
     */
    delete: operations["deleteStamp"];
    options?: never;
    head?: never;
    /**
     * スタンプ情報を変更
     * @description 指定したスタンプの情報を変更します。
     */
    patch: operations["editStamp"];
    trace?: never;
  };
  "/stamps": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * スタンプリストを取得
     * @description スタンプのリストを取得します。
     */
    get: operations["getStamps"];
    put?: never;
    /**
     * スタンプを作成
     * @description スタンプを新規作成します。
     */
    post: operations["createStamp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/stamp-history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * スタンプ履歴を取得
     * @description 自分のスタンプ履歴を最大100件まで取得します。
     *     結果は降順で返されます。
     *
     *     このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     */
    get: operations["getMyStampHistory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/qr-code": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * QRコードを取得
     * @description 自身のQRコードを取得します。
     *     返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     */
    get: operations["getMyQRCode"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stamps/{stampId}/stats": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    /**
     * スタンプ統計情報を取得
     * @description 指定したスタンプの統計情報を取得します。
     */
    get: operations["getStampStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ユーザー詳細情報を取得
     * @description 指定したユーザーの詳細情報を取得します。
     */
    get: operations["getUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * ユーザー情報を変更
     * @description 指定したユーザーの情報を変更します。
     *     管理者権限が必要です。
     */
    patch: operations["editUser"];
    trace?: never;
  };
  "/groups/{groupId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ユーザーグループを取得
     * @description 指定したユーザーグループの情報を取得します。
     */
    get: operations["getUserGroup"];
    put?: never;
    post?: never;
    /**
     * ユーザーグループを削除
     * @description 指定したユーザーグループを削除します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    delete: operations["deleteUserGroup"];
    options?: never;
    head?: never;
    /**
     * ユーザーグループを編集
     * @description 指定したユーザーグループの情報を編集します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    patch: operations["editUserGroup"];
    trace?: never;
  };
  "/groups/{groupId}/icon": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    /**
     * ユーザーグループのアイコンを変更
     * @description ユーザーグループのアイコンを変更します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    put: operations["changeUserGroupIcon"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/groups/{groupId}/members": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    /**
     * グループメンバーを取得
     * @description 指定したグループのメンバーのリストを取得します。
     */
    get: operations["getUserGroupMembers"];
    put?: never;
    /**
     * グループメンバーを追加
     * @description 指定したグループにメンバーを追加します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    post: operations["addUserGroupMember"];
    /**
     * グループメンバーを一括削除
     * @description 指定したグループから全てのメンバーを削除します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    delete: operations["removeUserGroupMembers"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/groups/{groupId}/members/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * グループメンバーを削除
     * @description 指定したユーザーグループから指定したユーザーを削除します。
     *     既にグループから削除されているメンバーを指定した場合は204を返します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    delete: operations["removeUserGroupMember"];
    options?: never;
    head?: never;
    /**
     * グループメンバーを編集
     * @description 指定したユーザーグループ内の指定したユーザーの属性を編集します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    patch: operations["editUserGroupMember"];
    trace?: never;
  };
  "/groups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * ユーザーグループのリストを取得
     * @description ユーザーグループのリストを取得します。
     */
    get: operations["getUserGroups"];
    put?: never;
    /**
     * ユーザーグループを作成
     * @description ユーザーグループを作成します。
     *     作成者は自動的にグループ管理者になります。
     */
    post: operations["createUserGroup"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自分のユーザー詳細を取得
     * @description 自身のユーザー詳細情報を取得します。
     */
    get: operations["getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 自分のユーザー情報を変更
     * @description 自身のユーザー情報を変更します。
     */
    patch: operations["editMe"];
    trace?: never;
  };
  "/users/me/oidc": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自分のユーザー詳細を取得 (OIDC UserInfo)
     * @description OIDCトークンを用いてユーザー詳細を取得します。
     *     OIDC UserInfo Endpointです。
     */
    get: operations["getOIDCUserInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ダイレクトメッセージのリストを取得
     * @description 指定したユーザーとのダイレクトメッセージのリストを取得します。
     */
    get: operations["getDirectMessages"];
    put?: never;
    /**
     * ダイレクトメッセージを送信
     * @description 指定したユーザーにダイレクトメッセージを送信します。
     */
    post: operations["postDirectMessage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/stats": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ユーザー統計情報を取得
     * @description 指定したユーザーの統計情報を取得します。
     */
    get: operations["getUserStats"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/subscribers": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネルの通知購読者のリストを取得
     * @description 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     */
    get: operations["getChannelSubscribers"];
    /**
     * チャンネルの通知購読者を設定
     * @description 指定したチャンネルの通知購読者を設定します。
     *     リクエストに含めなかったユーザーの通知購読状態はオフになります。
     *     また、存在しないユーザーを指定した場合は無視されます。
     */
    put: operations["setChannelSubscribers"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * チャンネルの通知購読者を編集
     * @description 指定したチャンネルの通知購読者を編集します。
     *     リクエストに含めなかったユーザーの通知購読状態は変更しません。
     *     また、存在しないユーザーを指定した場合は無視されます。
     */
    patch: operations["editChannelSubscribers"];
    trace?: never;
  };
  "/users/me/subscriptions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自分のチャンネル購読状態を取得
     * @description 自身のチャンネル購読状態を取得します。
     */
    get: operations["getMyChannelSubscriptions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/subscriptions/{channelId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    /**
     * チャンネル購読レベルを設定
     * @description 自身の指定したチャンネルの購読レベルを設定します。
     */
    put: operations["setChannelSubscribeLevel"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Webhook情報のリストを取得します
     * @description Webhookのリストを取得します。
     *     allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     */
    get: operations["getWebhooks"];
    put?: never;
    /**
     * Webhookを新規作成
     * @description Webhookを新規作成します。
     *     `secret`が空文字の場合、insecureウェブフックが作成されます。
     */
    post: operations["createWebhook"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/{webhookId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    /**
     * Webhook情報を取得
     * @description 指定したWebhookの詳細を取得します。
     */
    get: operations["getWebhook"];
    put?: never;
    /**
     * Webhookを送信
     * @description Webhookにメッセージを投稿します。
     *     secureなウェブフックに対しては`X-TRAQ-Signature`ヘッダーが必須です。
     *     アーカイブされているチャンネルには投稿できません。
     */
    post: operations["postWebhook"];
    /**
     * Webhookを削除
     * @description 指定したWebhookを削除します。
     *     Webhookによって投稿されたメッセージは削除されません。
     */
    delete: operations["deleteWebhook"];
    options?: never;
    head?: never;
    /**
     * Webhook情報を変更
     * @description 指定したWebhookの情報を変更します。
     */
    patch: operations["editWebhook"];
    trace?: never;
  };
  "/webhooks/{webhookId}/icon": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    /**
     * Webhookのアイコンを取得
     * @description 指定したWebhookのアイコン画像を取得します
     */
    get: operations["getWebhookIcon"];
    /**
     * Webhookのアイコンを変更
     * @description 指定したWebhookのアイコン画像を変更します。
     */
    put: operations["changeWebhookIcon"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/icon": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ユーザーのアイコン画像を取得
     * @description 指定したユーザーのアイコン画像を取得します。
     */
    get: operations["getUserIcon"];
    /**
     * ユーザーのアイコン画像を変更します
     * @description 指定したユーザーのアイコン画像を変更します。
     *     管理者権限が必要です。
     */
    put: operations["changeUserIcon"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/icon": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自分のアイコン画像を取得
     * @description 自分のアイコン画像を取得します。
     */
    get: operations["getMyIcon"];
    /**
     * 自分のアイコン画像を変更
     * @description 自分のアイコン画像を変更します。
     */
    put: operations["changeMyIcon"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 自分のパスワードを変更
     * @description 自身のパスワードを変更します。
     */
    put: operations["changeMyPassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/password": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    /**
     * ユーザーのパスワードを変更
     * @description 指定したユーザーのパスワードを変更します。
     *     管理者権限が必要です。
     */
    put: operations["changeUserPassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/fcm-device": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * FCMデバイスを登録
     * @description 自身のFCMデバイスを登録します。
     */
    post: operations["registerFCMDevice"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/view-states": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自身のチャンネル閲覧状態一覧を取得
     * @description 自身のチャンネル閲覧状態一覧を取得します。
     */
    get: operations["getMyViewStates"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * ユーザーのリストを取得
     * @description ユーザーのリストを取得します。
     *     `include-suspended`を指定しない場合、レスポンスにはユーザーアカウント状態が"1: 有効"であるユーザーのみが含まれます。
     *     `include-suspended`と`name`を同時に指定することはできません。
     */
    get: operations["getUsers"];
    put?: never;
    /**
     * ユーザーを登録
     * @description ユーザーを登録します。
     *     管理者権限が必要です。
     */
    post: operations["createUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * チャンネルリストを取得
     * @description チャンネルのリストを取得します。
     */
    get: operations["getChannels"];
    put?: never;
    /**
     * チャンネルを作成
     * @description チャンネルを作成します。
     *     階層が6以上になるチャンネルは作成できません。
     */
    post: operations["createChannel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/tags": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    /**
     * ユーザーのタグリストを取得
     * @description 指定したユーザーのタグリストを取得します。
     */
    get: operations["getUserTags"];
    put?: never;
    /**
     * ユーザーにタグを追加
     * @description 指定したユーザーに指定したタグを追加します。
     *     Webhookユーザーにタグを追加することは出来ません。
     */
    post: operations["addUserTag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/tags/{tagId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * ユーザーからタグを削除します
     * @description 既に存在しないタグを削除しようとした場合は204を返します。
     */
    delete: operations["removeUserTag"];
    options?: never;
    head?: never;
    /**
     * ユーザーのタグを編集
     * @description 指定したユーザーの指定したタグの状態を変更します。
     *     他人の状態は変更できません。
     */
    patch: operations["editUserTag"];
    trace?: never;
  };
  "/tags/{tagId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    /**
     * タグ情報を取得
     * @description 指定したタグの情報を取得します。
     */
    get: operations["getTag"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自分のタグリストを取得
     * @description 自分に付けられているタグの配列を取得します。
     */
    get: operations["getMyUserTags"];
    put?: never;
    /**
     * 自分にタグを追加
     * @description 自分に新しくタグを追加します。
     */
    post: operations["addMyUserTag"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/tags/{tagId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 自分からタグを削除します
     * @description 既に存在しないタグを削除しようとした場合は204を返します。
     */
    delete: operations["removeMyUserTag"];
    options?: never;
    head?: never;
    /**
     * 自分のタグを編集
     * @description 自分の指定したタグの状態を変更します。
     */
    patch: operations["editMyUserTag"];
    trace?: never;
  };
  "/users/me/stars": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * スターチャンネルリストを取得
     * @description 自分がスターしているチャンネルのUUIDの配列を取得します。
     */
    get: operations["getMyStars"];
    put?: never;
    /**
     * チャンネルをスターに追加
     * @description 指定したチャンネルをスターチャンネルに追加します。
     *     スター済みのチャンネルIDを指定した場合、204を返します。
     *     不正なチャンネルIDを指定した場合、400を返します。
     */
    post: operations["addMyStar"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/stars/{channelId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * チャンネルをスターから削除します
     * @description 既にスターから削除されているチャンネルを指定した場合は204を返します。
     */
    delete: operations["removeMyStar"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/unread": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 未読チャンネルを取得
     * @description 自分が現在未読のチャンネルの未読情報を取得します。
     */
    get: operations["getMyUnreadChannels"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * バージョンを取得
     * @description サーバーバージョン及びサーバーフラグ情報を取得します。
     */
    get: operations["getServerVersion"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * ログイン
     * @description ログインします。
     */
    post: operations["login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * ログアウト
     * @description ログアウトします。
     */
    post: operations["logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/sessions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 自分のログインセッションリストを取得
     * @description 自分のログインセッションのリストを取得します。
     */
    get: operations["getMySessions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/sessions/{sessionId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description セッションUUID */
        sessionId: components["parameters"]["sessionIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * セッションを無効化
     * @description 指定した自分のセッションを無効化(ログアウト)します。
     *     既に存在しない・無効化されているセッションを指定した場合も`204`を返します。
     */
    delete: operations["revokeMySession"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/activity/timeline": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * アクテビティタイムラインを取得
     * @description パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。
     *     `all`が`true`でない場合、購読チャンネルのみのタイムラインを取得します
     */
    get: operations["getActivityTimeline"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ws": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * WebSocket通知ストリームに接続します
     * @description # WebSocketプロトコル
     *     ## 送信
     *     `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。
     *     ### `viewstate`コマンド
     *     このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。
     *     現時点では1つのセッションに対して1つのチャンネルしか設定できない。
     *
     *     `viewstate:{チャンネルID}:{閲覧状態}`
     *     + チャンネルID: 対象のチャンネルID
     *     + 閲覧状態: `none`, `monitoring`, `editing`
     *
     *     最初の`viewstate`コマンドを送る前、または`viewstate:null`, `viewstate:`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。
     *
     *     ### `rtcstate`コマンド
     *     自分のWebRTC状態を変更する。
     *     他のコネクションが既に状態を保持している場合、変更することができません。
     *
     *     `rtcstate:{チャンネルID}:({状態}:{セッションID})*`
     *
     *     コネクションが切断された場合、自分のWebRTC状態はリセットされます。
     *
     *     ### `timeline_streaming`コマンド
     *     全てのパブリックチャンネルの`MESSAGE_CREATED`イベントを受け取るかどうかを設定する。
     *     初期状態は`off`です。
     *
     *     `timeline_streaming:(on|off|true|false)`
     *
     *     ## 受信
     *     TextMessageとして各種イベントが`type`と`body`を持つJSONとして非同期に送られます。
     *
     *     例:
     *     ```json
     *     {"type":"USER_ONLINE","body":{"id":"7dd8e07f-7f5d-4331-9176-b56a4299768b"}}
     *     ```
     *
     *     ## イベント一覧
     *
     *     ### `USER_JOINED`
     *     ユーザーが新規登録された。
     *
     *     対象: 全員
     *
     *     + `id`: 登録されたユーザーのId
     *
     *     ### `USER_UPDATED`
     *     ユーザーの情報が更新された。
     *
     *     対象: 全員
     *
     *     + `id`: 情報が更新されたユーザーのId
     *
     *     ### `USER_TAGS_UPDATED`
     *     ユーザーのタグが更新された。
     *
     *     対象: 全員
     *
     *     + `id`: タグが更新されたユーザーのId
     *     + `tag_id`: 更新されたタグのId
     *
     *     ### `USER_ICON_UPDATED`
     *     ユーザーのアイコンが更新された。
     *
     *     対象: 全員
     *
     *     + `id`: アイコンが更新されたユーザーのId
     *
     *     ### `USER_WEBRTC_STATE_CHANGED`
     *     ユーザーのWebRTCの状態が変化した
     *
     *     対象: 全員
     *
     *     + `user_id`: 変更があったユーザーのId
     *     + `channel_id`: ユーザーの変更後の接続チャンネルのId
     *     + `sessions`: ユーザーの変更後の状態(配列)
     *       + `state`: 状態
     *       + `sessionId`: セッションID
     *
     *     ### `USER_VIEWSTATE_CHANGED`
     *     ユーザーのチャンネルの閲覧状態が変化した
     *
     *     対象: 変化したWSセッションを含めた、該当ユーザーのWSセッション全て
     *
     *     + `view_states`: 変化したWSセッションを含めた、該当ユーザーの変更後の状態(配列)
     *       + `key`: WSセッションの識別子
     *       + `channel_id`: 閲覧しているチャンネルId
     *       + `state`: 閲覧状態
     *
     *     ### `USER_ONLINE`
     *     ユーザーがオンラインになった。
     *
     *     対象: 全員
     *
     *     + `id`: オンラインになったユーザーのId
     *
     *     ### `USER_OFFLINE`
     *     ユーザーがオフラインになった。
     *
     *     対象: 全員
     *
     *     + `id`: オフラインになったユーザーのId
     *
     *     ### `USER_GROUP_CREATED`
     *     ユーザーグループが作成された
     *
     *     対象: 全員
     *
     *     + `id`: 作成されたユーザーグループのId
     *
     *     ### `USER_GROUP_UPDATED`
     *     ユーザーグループが更新された
     *
     *     対象: 全員
     *
     *     + `id`: 作成されたユーザーグループのId
     *
     *     ### `USER_GROUP_DELETED`
     *     ユーザーグループが削除された
     *
     *     対象: 全員
     *
     *     + `id`: 削除されたユーザーグループのId
     *
     *     ### `CHANNEL_CREATED`
     *     チャンネルが新規作成された。
     *
     *     対象: 該当チャンネルを閲覧可能な全員
     *
     *     + `id`: 作成されたチャンネルのId
     *     + `dm_user_id`: (DMの場合のみ) DM相手のユーザーId
     *
     *     ### `CHANNEL_UPDATED`
     *     チャンネルの情報が変更された。
     *
     *     対象: 該当チャンネルを閲覧可能な全員
     *
     *     + `id`: 変更があったチャンネルのId
     *     + `dm_user_id`: (DMの場合のみ) DM相手のユーザーId
     *
     *     ### `CHANNEL_DELETED`
     *     チャンネルが削除された。
     *
     *     対象: 該当チャンネルを閲覧可能な全員
     *
     *     + `id`: 削除されたチャンネルのId
     *     + `dm_user_id`: (DMの場合のみ) DM相手のユーザーId
     *
     *     ### `CHANNEL_STARED`
     *     自分がチャンネルをスターした。
     *
     *     対象: 自分
     *
     *     + `id`: スターしたチャンネルのId
     *
     *     ### `CHANNEL_UNSTARED`
     *     自分がチャンネルのスターを解除した。
     *
     *     対象: 自分
     *
     *     + `id`: スターしたチャンネルのId
     *
     *     ### `CHANNEL_VIEWERS_CHANGED`
     *     チャンネルの閲覧者が変化した。
     *
     *     対象: 該当チャンネルを閲覧しているユーザー
     *
     *     + `id`: 変化したチャンネルのId
     *     + `viewers`: 変化後の閲覧者(配列)
     *       + `userId`: ユーザーId
     *       + `state`: 閲覧状態
     *       + `updatedAt`: 閲覧状態の更新日時
     *
     *     ### `CHANNEL_SUBSCRIBERS_CHANGED`
     *     チャンネルの購読者が変化した。
     *
     *     対象: 該当チャンネルを閲覧しているユーザー
     *
     *     + `id`: 変化したチャンネルのId
     *
     *     ### `MESSAGE_CREATED`
     *     メッセージが投稿された。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー・投稿チャンネルに通知をつけているユーザー・メンションを受けたユーザー
     *
     *     + `id`: 投稿されたメッセージのId
     *     + `is_citing`: 投稿されたメッセージがWebSocketを接続しているユーザーの投稿を引用しているかどうか
     *
     *     ### `MESSAGE_UPDATED`
     *     メッセージが更新された。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー
     *
     *     + `id`: 更新されたメッセージのId
     *
     *     ### `MESSAGE_DELETED`
     *     メッセージが削除された。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー
     *
     *     + `id`: 削除されたメッセージのId
     *
     *     ### `MESSAGE_STAMPED`
     *     メッセージにスタンプが押された。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー
     *
     *     + `message_id`: メッセージId
     *     + `user_id`: スタンプを押したユーザーのId
     *     + `stamp_id`: スタンプのId
     *     + `count`: そのユーザーが押した数
     *     + `created_at`: そのユーザーがそのスタンプをそのメッセージに最初に押した日時
     *
     *     ### `MESSAGE_UNSTAMPED`
     *     メッセージからスタンプが外された。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー
     *
     *     + `message_id`: メッセージId
     *     + `user_id`: スタンプを押したユーザーのId
     *     + `stamp_id`: スタンプのId
     *
     *     ### `MESSAGE_PINNED`
     *     メッセージがピン留めされた。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー
     *
     *     + `message_id`: ピンされたメッセージのID
     *     + `channel_id`: ピンされたメッセージのチャンネルID
     *
     *     ### `MESSAGE_UNPINNED`
     *     ピン留めされたメッセージのピンが外された。
     *
     *     対象: 投稿チャンネルを閲覧しているユーザー
     *
     *     + `message_id`: ピンが外されたメッセージのID
     *     + `channel_id`: ピンが外されたメッセージのチャンネルID
     *
     *     ### `MESSAGE_READ`
     *     自分があるチャンネルのメッセージを読んだ。
     *
     *     対象: 自分
     *
     *     + `id`: 読んだチャンネルId
     *
     *     ### `STAMP_CREATED`
     *     スタンプが新しく追加された。
     *
     *     対象: 全員
     *
     *     + `id`: 作成されたスタンプのId
     *
     *     ### `STAMP_UPDATED`
     *     スタンプが修正された。
     *
     *     対象: 全員
     *
     *     + `id`: 修正されたスタンプのId
     *
     *     ### `STAMP_DELETED`
     *     スタンプが削除された。
     *
     *     対象: 全員
     *
     *     + `id`: 削除されたスタンプのId
     *
     *     ### `STAMP_PALETTE_CREATED`
     *     スタンプパレットが新しく追加された。
     *
     *     対象: 自分
     *
     *     + `id`: 作成されたスタンプパレットのId
     *
     *     ### `STAMP_PALETTE_UPDATED`
     *     スタンプパレットが修正された。
     *
     *     対象: 自分
     *
     *     + `id`: 修正されたスタンプパレットのId
     *
     *     ### `STAMP_PALETTE_DELETED`
     *     スタンプパレットが削除された。
     *
     *     対象: 自分
     *
     *     + `id`: 削除されたスタンプパレットのId
     *
     *     ### `CLIP_FOLDER_CREATED`
     *     クリップフォルダーが作成された。
     *
     *     対象：自分
     *
     *     + `id`: 作成されたクリップフォルダーのId
     *
     *     ### `CLIP_FOLDER_UPDATED`
     *     クリップフォルダーが修正された。
     *
     *     対象: 自分
     *
     *     + `id`: 更新されたクリップフォルダーのId
     *
     *     ### `CLIP_FOLDER_DELETED`
     *     クリップフォルダーが削除された。
     *
     *     対象: 自分
     *
     *     + `id`: 削除されたクリップフォルダーのId
     *
     *     ### `CLIP_FOLDER_MESSAGE_DELETED`
     *     クリップフォルダーからメッセージが除外された。
     *
     *     対象: 自分
     *
     *     + `folder_id`: メッセージが除外されたクリップフォルダーのId
     *     + `message_id`: クリップフォルダーから除外されたメッセージのId
     *
     *     ### `CLIP_FOLDER_MESSAGE_ADDED`
     *     クリップフォルダーにメッセージが追加された。
     *
     *     対象: 自分
     *
     *     + `folder_id`: メッセージが追加されたクリップフォルダーのId
     *     + `message_id`: クリップフォルダーに追加されたメッセージのId
     *
     *     ### `QALL_ROOM_STATE_CHANGED`
     *     ルーム状態が変更された。
     *
     *     対象: 全員
     *
     *     + `room_id`: 変更されたルームのId
     *     + `state`: 変更後のルーム状態
     *       + `roomId`: ルームのID
     *       + `participants`: ルーム内の参加者(配列)
     *         + `identity`: ユーザーID_RandomUUID
     *         + `name`: 表示名
     *         + `joinedAt`: 参加した時刻
     *         + `attributes`: ユーザーに関連付けられたカスタム属性
     *         + `canPublish`: 発言権限
     *       + `isWebinar`: ウェビナールームかどうか
     *       + `metadata`: ルームに関連付けられたカスタム属性
     *
     *     ### `QALL_SOUNDBOARD_ITEM_CREATED`
     *     サウンドボードアイテムが作成された。
     *
     *     対象: 全員
     *
     *     + `sound_id`: 作成されたサウンドのId
     *     + `name`: サウンド名
     *     + `creator_id`: 作成者のId
     *
     *     ### `QALL_SOUNDBOARD_ITEM_DELETED`
     *     サウンドボードアイテムが削除された。
     *
     *     対象: 全員
     *
     *     + `sound_id`: 削除されたサウンドのId
     */
    get: operations["ws"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 有効トークンのリストを取得
     * @description 有効な自分に発行されたOAuth2トークンのリストを取得します。
     */
    get: operations["getMyTokens"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/tokens/{tokenId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OAuth2トークンUUID */
        tokenId: components["parameters"]["tokenIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * トークンの認可を取り消す
     * @description 自分の指定したトークンの認可を取り消します。
     */
    delete: operations["revokeMyToken"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/public/icon/{username}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザー名 */
        username: string;
      };
      cookie?: never;
    };
    /**
     * ユーザーのアイコン画像を取得
     * @description ユーザーのアイコン画像を取得します。
     */
    get: operations["getPublicUserIcon"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clients/{clientId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OAuth2クライアントUUID */
        clientId: components["parameters"]["clientIdInPath"];
      };
      cookie?: never;
    };
    /**
     * OAuth2クライアント情報を取得
     * @description 指定したOAuth2クライアントの情報を取得します。
     *     詳細情報の取得には対象のクライアントの管理権限が必要です。
     */
    get: operations["getClient"];
    put?: never;
    post?: never;
    /**
     * OAuth2クライアントを削除
     * @description 指定したOAuth2クライアントを削除します。
     *     対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     */
    delete: operations["deleteClient"];
    options?: never;
    head?: never;
    /**
     * OAuth2クライアント情報を変更
     * @description 指定したOAuth2クライアントの情報を変更します。
     *     対象のクライアントの管理権限が必要です。
     *     クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     */
    patch: operations["editClient"];
    trace?: never;
  };
  "/clients/{clientId}/tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * OAuthクライアントのトークンを削除
     * @description 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
     */
    delete: operations["revokeClientTokens"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * OAuth2クライアントのリストを取得
     * @description 自身が開発者のOAuth2クライアントのリストを取得します。
     *     `all`が`true`の場合、全開発者の全クライアントのリストを返します。
     */
    get: operations["getClients"];
    put?: never;
    /**
     * OAuth2クライアントを作成
     * @description OAuth2クライアントを作成します。
     */
    post: operations["createClient"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * BOTリストを取得
     * @description BOT情報のリストを取得します。
     *     allを指定しない場合、自分が開発者のBOTのみを返します。
     */
    get: operations["getBots"];
    put?: never;
    /**
     * BOTを作成
     * @description BOTを作成します。
     *     作成後に購読イベントの設定を行う必要があります。
     *     さらにHTTP Modeの場合はアクティベーションを行う必要があります。
     */
    post: operations["createBot"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/ws": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * WebSocket Mode BOT用通知ストリームに接続します
     * @description # BOT WebSocketプロトコル
     *
     *     ## 送信
     *
     *     `コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。
     *
     *     ### `rtcstate`コマンド
     *     自分のWebRTC状態を変更します。
     *     他のコネクションが既に状態を保持している場合、変更することができません。
     *
     *     `rtcstate:{チャンネルID}:({状態}:{セッションID})*`
     *
     *     チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。
     *
     *     `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`
     *
     *     コネクションが切断された場合、自分のWebRTC状態はリセットされます。
     *
     *     ## 受信
     *
     *     TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。
     *     `body`の内容はHTTP Modeの場合のRequest Bodyと同様です。
     *     例外として`ERROR`イベントは`reqId`を持ちません。
     *
     *     例: PINGイベント
     *     `{"type":"PING","reqId":"requestId","body":{"eventTime":"2019-05-07T04:50:48.582586882Z"}}`
     *
     *     ### `ERROR`
     *
     *     コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。
     *     非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。
     *     本番環境ではERRORが送られないようにすることが望ましいです。
     *
     *     `{"type":"ERROR","body":"message"}`
     */
    get: operations["connectBotWS"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}/icon": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    /**
     * BOTのアイコン画像を取得
     * @description 指定したBOTのアイコン画像を取得を取得します。
     */
    get: operations["getBotIcon"];
    /**
     * BOTのアイコン画像を変更
     * @description 指定したBOTのアイコン画像を変更を変更します。
     *     対象のBOTの管理権限が必要です。
     */
    put: operations["changeBotIcon"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    /**
     * BOT情報を取得
     * @description 指定したBOTのBOT情報を取得します。
     *     BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     */
    get: operations["getBot"];
    put?: never;
    post?: never;
    /**
     * BOTを削除
     * @description 指定したBOTを削除します。
     *     対象のBOTの管理権限が必要です。
     */
    delete: operations["deleteBot"];
    options?: never;
    head?: never;
    /**
     * BOT情報を変更
     * @description 指定したBOTの情報を変更します。
     *     対象のBOTの管理権限が必要です。
     *     BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     */
    patch: operations["editBot"];
    trace?: never;
  };
  "/bots/{botId}/actions/activate": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * BOTをアクティベート
     * @description 指定したBOTを有効化します。
     *     対象のBOTの管理権限が必要です。
     */
    post: operations["activateBot"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}/actions/inactivate": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * BOTをインアクティベート
     * @description 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     */
    post: operations["inactivateBot"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}/actions/reissue": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * BOTのトークンを再発行
     * @description 指定したBOTの現在の各種トークンを無効化し、再発行を行います。
     *     対象のBOTの管理権限が必要です。
     */
    post: operations["reissueBot"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}/logs": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    /**
     * BOTのイベントログを取得
     * @description 指定したBOTのイベントログを取得します。
     *     対象のBOTの管理権限が必要です。
     */
    get: operations["getBotLogs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}/actions/join": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * BOTをチャンネルに参加させる
     * @description 指定したBOTを指定したチャンネルに参加させます。
     *     チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。
     *     対象のBOTの管理権限が必要です。
     */
    post: operations["letBotJoinChannel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bots/{botId}/actions/leave": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * BOTをチャンネルから退出させる
     * @description 指定したBOTを指定したチャンネルから退出させます。
     *     対象のBOTの管理権限が必要です。
     */
    post: operations["letBotLeaveChannel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/bots": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネル参加中のBOTのリストを取得
     * @description 指定したチャンネルに参加しているBOTのリストを取得します。
     */
    get: operations["getChannelBots"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webrtc/authenticate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Skyway用認証API
     * @description Skyway WebRTC用の認証API
     */
    post: operations["postWebRTCAuthenticate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネル情報を取得
     * @description 指定したチャンネルの情報を取得します。
     */
    get: operations["getChannel"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * チャンネル情報を変更
     * @description 指定したチャンネルの情報を変更します。
     *     変更には権限が必要です。
     *     ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     */
    patch: operations["editChannel"];
    trace?: never;
  };
  "/webrtc/state": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * WebRTC状態を取得
     * @description 現在のWebRTC状態を取得します。
     */
    get: operations["getWebRTCState"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clip-folders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * クリップフォルダのリストを取得
     * @description 自身が所有するクリップフォルダのリストを取得します。
     */
    get: operations["getClipFolders"];
    put?: never;
    /**
     * クリップフォルダを作成
     * @description クリップフォルダを作成します。
     *     既にあるフォルダと同名のフォルダを作成することは可能です。
     */
    post: operations["createClipFolder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clip-folders/{folderId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    /**
     * クリップフォルダ情報を取得
     * @description 指定したクリップフォルダの情報を取得します。
     */
    get: operations["getClipFolder"];
    put?: never;
    post?: never;
    /**
     * クリップフォルダを削除
     * @description 指定したクリップフォルダを削除します。
     */
    delete: operations["deleteClipFolder"];
    options?: never;
    head?: never;
    /**
     * クリップフォルダ情報を編集
     * @description 指定したクリップフォルダの情報を編集します。
     */
    patch: operations["editClipFolder"];
    trace?: never;
  };
  "/clip-folders/{folderId}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    /**
     * フォルダ内のクリップのリストを取得
     * @description 指定したフォルダ内のクリップのリストを取得します。
     *     `order`を指定しない場合、クリップした日時の新しい順で返されます。
     */
    get: operations["getClips"];
    put?: never;
    /**
     * メッセージをクリップフォルダに追加
     * @description 指定したメッセージを指定したクリップフォルダに追加します。
     */
    post: operations["clipMessage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clip-folders/{folderId}/messages/{messageId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * メッセージをクリップフォルダから除外
     * @description 指定したフォルダから指定したメッセージのクリップを除外します。
     *     既に外されているメッセージを指定した場合は204を返します。
     */
    delete: operations["unclipMessage"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/webhooks/{webhookId}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    /**
     * Webhookの投稿メッセージのリストを取得
     * @description 指定されたWebhookが投稿したメッセージのリストを返します。
     */
    get: operations["getWebhookMessages"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/events": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /**
     * チャンネルイベントのリストを取得
     * @description 指定したチャンネルのイベントリストを取得します。
     */
    get: operations["getChannelEvents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stamp-palettes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * スタンプパレットのリストを取得
     * @description 自身が所有しているスタンプパレットのリストを取得します。
     */
    get: operations["getStampPalettes"];
    put?: never;
    /**
     * スタンプパレットを作成
     * @description スタンプパレットを作成します。
     */
    post: operations["createStampPalette"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stamp-palettes/{paletteId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプパレットUUID */
        paletteId: components["parameters"]["paletteIdInPath"];
      };
      cookie?: never;
    };
    /**
     * スタンプパレットを取得
     * @description 指定したスタンプパレットの情報を取得します。
     */
    get: operations["getStampPalette"];
    put?: never;
    post?: never;
    /**
     * スタンプパレットを削除
     * @description 指定したスタンプパレットを削除します。
     *     対象のスタンプパレットの管理権限が必要です。
     */
    delete: operations["deleteStampPalette"];
    options?: never;
    head?: never;
    /**
     * スタンプパレットを編集
     * @description 指定したスタンプパレットを編集します。
     *     リクエストのスタンプの配列の順番は保存されて変更されます。
     *     対象のスタンプパレットの管理権限が必要です。
     */
    patch: operations["editStampPalette"];
    trace?: never;
  };
  "/activity/onlines": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * オンラインユーザーリストを取得
     * @description 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     */
    get: operations["getOnlineUsers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/stamps/{stampId}/image": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    /**
     * スタンプ画像を取得
     * @description 指定したIDのスタンプ画像を返します。
     */
    get: operations["getStampImage"];
    /**
     * スタンプ画像を変更
     * @description 指定したスタンプの画像を変更します。
     */
    put: operations["changeStampImage"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/unread/{channelId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * チャンネルを既読にする
     * @description 自分が未読のチャンネルを既読にします。
     */
    delete: operations["readChannel"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/groups/{groupId}/admins/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * グループ管理者を削除
     * @description 指定したユーザーグループから指定した管理者を削除します。
     *     対象のユーザーグループの管理者権限が必要です。
     *     グループから管理者が存在しなくなる場合は400エラーを返します。
     */
    delete: operations["removeUserGroupAdmin"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/groups/{groupId}/admins": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    /**
     * グループ管理者を取得
     * @description 指定したグループの管理者のリストを取得します。
     */
    get: operations["getUserGroupAdmins"];
    put?: never;
    /**
     * グループ管理者を追加
     * @description 指定したグループに管理者を追加します。
     *     対象のユーザーグループの管理者権限が必要です。
     */
    post: operations["addUserGroupAdmin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/oauth2/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * OAuth2 トークンエンドポイント
     * @description OAuth2 トークンエンドポイント
     */
    post: operations["postOAuth2Token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/oauth2/authorize/decide": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * OAuth2 認可承諾API
     * @description OAuth2 認可承諾
     */
    post: operations["postOAuth2AuthorizeDecide"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/oauth2/authorize": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * OAuth2 認可エンドポイント
     * @description OAuth2 認可エンドポイント
     */
    get: operations["getOAuth2Authorize"];
    put?: never;
    /**
     * OAuth2 認可エンドポイント
     * @description OAuth2 認可エンドポイント
     */
    post: operations["postOAuth2Authorize"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/oauth2/revoke": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * OAuth2 トークン無効化エンドポイント
     * @description OAuth2 トークン無効化エンドポイント
     */
    post: operations["revokeOAuth2Token"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/ex-accounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 外部ログインアカウント一覧を取得
     * @description 自分に紐付けられている外部ログインアカウント一覧を取得します。
     */
    get: operations["getMyExternalAccounts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/ex-accounts/link": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 外部ログインアカウントを紐付ける
     * @description 自分に外部ログインアカウントを紐付けます。
     *     指定した`providerName`がサーバー側で有効である必要があります。
     *     リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
     */
    post: operations["linkExternalAccount"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/ex-accounts/unlink": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 外部ログインアカウントの紐付けを解除
     * @description 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
     */
    post: operations["unlinkExternalAccount"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/dm-channel": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    /**
     * DMチャンネル情報を取得
     * @description 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。
     *     ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
     */
    get: operations["getUserDMChannel"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/messages/{messageId}/clips": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    /**
     * 自分のクリップを取得
     * @description 対象のメッセージの自分のクリップの一覧を返します。
     */
    get: operations["getMessageClips"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ogp": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * OGP情報を取得
     * @description 指定されたURLのOGP情報を取得します。
     *     指定されたURLに対するOGP情報が見つからなかった場合、typeがemptyに設定された空のOGP情報を返します。
     */
    get: operations["getOgp"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ogp/cache": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * OGP情報のキャッシュを削除
     * @description 指定されたURLのOGP情報のキャッシュを削除します。
     */
    delete: operations["deleteOgpCache"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * ユーザー設定を取得
     * @description ユーザー設定を取得します。
     */
    get: operations["getUserSettings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/settings/notify-citation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * メッセージ引用通知の設定情報を取得
     * @description メッセージ引用通知の設定情報を変更します。
     */
    get: operations["getMyNotifyCitation"];
    /**
     * メッセージ引用通知の設定情報を変更
     * @description メッセージ引用通知の設定情報を変更します
     */
    put: operations["changeMyNotifyCitation"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/channels/{channelId}/path": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    /** 指定したチャンネルパスを取得 */
    get: operations["getChannelPath"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qall/endpoints": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * LiveKitエンドポイントを取得
     * @description 接続可能なLiveKitエンドポイントを取得します。
     */
    get: operations["getQallEndpoints"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qall/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * LiveKitトークンを取得
     * @description 指定したルームに参加するためのLiveKitトークンを取得します。
     */
    get: operations["getLiveKitToken"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qall/rooms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * ルームと参加者の一覧を取得
     * @description 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。
     */
    get: operations["getRooms"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qall/rooms/{roomId}/metadata": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * ルームのメタデータを取得
     * @description ルームのメタデータを取得します。
     */
    get: operations["getRoomMetadata"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * ルームのメタデータを更新
     * @description ルームのメタデータを更新します。
     */
    patch: operations["updateRoomMetadata"];
    trace?: never;
  };
  "/qall/rooms/{roomId}/participants": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * ルームでの発言権限を変更
     * @description ルーム内の参加者の発言権限を変更します。
     */
    patch: operations["changeParticipantRole"];
    trace?: never;
  };
  "/qall/webhook": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * LiveKit Webhook受信
     * @description LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。
     */
    post: operations["liveKitWebhook"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qall/soundboard": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * サウンドボード用の音声一覧を取得
     * @description DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。
     */
    get: operations["getSoundboardList"];
    put?: never;
    /**
     * サウンドボード用の短い音声ファイルをアップロード
     * @description 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。
     */
    post: operations["postSoundboard"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qall/soundboard/play": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * アップロード済み音声を LiveKit ルームで再生
     * @description S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。
     */
    post: operations["postSoundboardPlay"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Message
     * @description メッセージ
     */
    Message: {
      /**
       * Format: uuid
       * @description メッセージUUID
       */
      id: string;
      /**
       * Format: uuid
       * @description 投稿者UUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
      /** @description メッセージ本文 */
      content: string;
      /**
       * Format: date-time
       * @description 投稿日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 編集日時
       */
      updatedAt: string;
      /** @description ピン留めされているかどうか */
      pinned: boolean;
      /** @description 押されているスタンプの配列 */
      stamps: components["schemas"]["MessageStamp"][];
      /**
       * Format: uuid
       * @description スレッドUUID
       */
      threadId: string | null;
    };
    /**
     * MessageStamp
     * @description メッセージに押されたスタンプ
     */
    MessageStamp: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description スタンプUUID
       */
      stampId: string;
      /**
       * Format: int32
       * @description スタンプ数
       */
      count: number;
      /**
       * Format: date-time
       * @description スタンプが最初に押された日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description スタンプが最後に押された日時
       */
      updatedAt: string;
    };
    /**
     * StampStats
     * @description スタンプ統計情報
     */
    StampStats: {
      /**
       * Format: int64
       * @description スタンプ使用総数(同じユーザによって同じメッセージに貼られたものは複数カウントしない)
       */
      count: number;
      /**
       * Format: int64
       * @description スタンプ使用総数(全てカウント)
       */
      totalCount: number;
    };
    /**
     * Pin
     * @description ピン情報(メッセージ本体付き)
     */
    Pin: {
      /**
       * Format: uuid
       * @description ピン留めしたユーザーUUID
       */
      userId: string;
      /**
       * Format: date-time
       * @description ピン留めされた日時
       */
      pinnedAt: string;
      message: components["schemas"]["Message"];
    };
    /**
     * Channel
     * @description チャンネル
     */
    Channel: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      id: string;
      /**
       * Format: uuid
       * @description 親チャンネルUUID
       */
      parentId: string | null;
      /** @description チャンネルがアーカイブされているかどうか */
      archived: boolean;
      /** @description 強制通知チャンネルかどうか */
      force: boolean;
      /** @description チャンネルトピック */
      topic: string;
      /** @description チャンネル名 */
      name: string;
      /** @description 子チャンネルのUUID配列 */
      children: string[];
    };
    /**
     * PostMessageRequest
     * @description メッセージ投稿リクエスト
     */
    PostMessageRequest: {
      /** @description メッセージ本文 */
      content: string;
      /**
       * @description メンション・チャンネルリンクを自動埋め込みするか
       * @default false
       */
      embed: boolean;
    };
    /**
     * ChannelStats
     * @description チャンネル統計情報
     */
    ChannelStats: {
      /**
       * Format: int64
       * @description チャンネルの総投稿メッセージ数(削除されたものも含む)
       */
      totalMessageCount: number;
      /** @description チャンネル上のスタンプ統計情報 */
      stamps: components["schemas"]["ChannelStatsStamp"][];
      /** @description チャンネル上のユーザー統計情報 */
      users: components["schemas"]["ChannelStatsUser"][];
      /**
       * Format: date-time
       * @description 統計情報日時
       */
      datetime: string;
    };
    /**
     * ChannelStatsStamp
     * @description チャンネル上の特定スタンプ統計情報
     */
    ChannelStatsStamp: {
      /**
       * Format: uuid
       * @description スタンプID
       */
      id: string;
      /**
       * Format: int64
       * @description スタンプ数(同一メッセージ上のものは複数カウントしない)
       */
      count: number;
      /**
       * Format: int64
       * @description スタンプ数(同一メッセージ上のものも複数カウントする)
       */
      total: number;
    };
    /**
     * ChannelStatsUser
     * @description チャンネル上の特定ユーザー統計情報
     */
    ChannelStatsUser: {
      /**
       * Format: uuid
       * @description ユーザーID
       */
      id: string;
      /**
       * Format: int64
       * @description メッセージ数
       */
      messageCount: number;
    };
    /**
     * ChannelTopic
     * @description チャンネルトピック
     */
    ChannelTopic: {
      /** @description トピック */
      topic: string;
    };
    /**
     * PutChannelTopicRequest
     * @description チャンネルトピック編集リクエスト
     */
    PutChannelTopicRequest: {
      /** @description トピック */
      topic: string;
    };
    /**
     * ChannelViewer
     * @description チャンネル閲覧者情報
     */
    ChannelViewer: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      userId: string;
      state: components["schemas"]["ChannelViewState"];
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
    };
    /**
     * MyChannelViewState
     * @description 自身のチャンネル閲覧状態
     */
    MyChannelViewState: {
      /** @description WSセッションの識別子 */
      key: string;
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
      state: components["schemas"]["ChannelViewState"];
    };
    /**
     * ChannelViewState
     * @description 閲覧状態
     * @enum {string}
     */
    ChannelViewState: "none" | "monitoring" | "editing";
    /**
     * PostFileRequest
     * @description ファイルアップロードリクエスト
     */
    PostFileRequest: {
      /**
       * Format: binary
       * @description ファイル本体
       */
      file: string;
      /**
       * Format: uuid
       * @description アップロード先チャンネルUUID
       */
      channelId: string;
    };
    /**
     * ThumbnailType
     * @description サムネイル画像のタイプ
     *
     * @default image
     * @enum {string}
     */
    ThumbnailType: "image" | "waveform";
    ThumbnailInfo: {
      type: components["schemas"]["ThumbnailType"];
      /** @description MIMEタイプ */
      mime: string;
      /**
       * Format: int32
       * @description サムネイル幅
       */
      width?: number;
      /**
       * Format: int32
       * @description サムネイル高さ
       */
      height?: number;
    };
    /**
     * FileInfo
     * @description ファイル情報
     */
    FileInfo: {
      /**
       * Format: uuid
       * @description ファイルUUID
       */
      id: string;
      /** @description ファイル名 */
      name: string;
      /** @description MIMEタイプ */
      mime: string;
      /**
       * Format: int64
       * @description ファイルサイズ
       */
      size: number;
      /** @description MD5ハッシュ */
      md5: string;
      /** @description アニメーション画像かどうか */
      isAnimatedImage: boolean;
      /**
       * Format: date-time
       * @description アップロード日時
       */
      createdAt: string;
      thumbnails: components["schemas"]["ThumbnailInfo"][];
      /**
       * @deprecated
       * @description サムネイル情報
       *     サムネイルが存在しない場合はnullになります
       *     Deprecated: thumbnailsを参照してください
       */
      thumbnail: {
        /**
         * @deprecated
         * @description MIMEタイプ
         */
        mime: string;
        /**
         * Format: int32
         * @deprecated
         * @description サムネイル幅
         */
        width?: number;
        /**
         * Format: int32
         * @deprecated
         * @description サムネイル高さ
         */
        height?: number;
      } | null;
      /**
       * Format: uuid
       * @description 属しているチャンネルUUID
       */
      channelId: string | null;
      /**
       * Format: uuid
       * @description アップロード者UUID
       */
      uploaderId: string | null;
    };
    /**
     * PostMessageStampRequest
     * @description スタンプを押すリクエスト
     */
    PostMessageStampRequest: {
      /**
       * Format: int32
       * @description 押す数
       */
      count: number;
    };
    /**
     * Stamp
     * @description スタンプ情報
     */
    Stamp: {
      /**
       * Format: uuid
       * @description スタンプUUID
       */
      id: string;
      /** @description スタンプ名 */
      name: string;
      /**
       * Format: uuid
       * @description 作成者UUID
       */
      creatorId: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /**
       * Format: uuid
       * @description ファイルUUID
       */
      fileId: string;
      /** @description Unicode絵文字か */
      isUnicode: boolean;
    };
    /**
     * PostStampRequest
     * @description スタンプ作成リクエスト
     */
    PostStampRequest: {
      /** @description スタンプ名 */
      name: string;
      /**
       * Format: binary
       * @description スタンプ画像(1MBまでのpng, jpeg, gif)
       */
      file: string;
    };
    /**
     * StampHistoryEntry
     * @description スタンプ履歴の1項目
     */
    StampHistoryEntry: {
      /**
       * Format: uuid
       * @description スタンプUUID
       */
      stampId: string;
      /**
       * Format: date-time
       * @description 使用日時
       */
      datetime: string;
    };
    /**
     * StampWithThumbnail
     * @description スタンプ情報とサムネイルの有無
     */
    StampWithThumbnail: {
      /**
       * Format: uuid
       * @description スタンプUUID
       */
      id: string;
      /** @description スタンプ名 */
      name: string;
      /**
       * Format: uuid
       * @description 作成者UUID
       */
      creatorId: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /**
       * Format: uuid
       * @description ファイルUUID
       */
      fileId: string;
      /** @description Unicode絵文字か */
      isUnicode: boolean;
      /** @description サムネイルの有無 */
      hasThumbnail: boolean;
    };
    /**
     * User
     * @description ユーザー情報
     */
    User: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      id: string;
      /** @description ユーザー名 */
      name: string;
      /** @description ユーザー表示名 */
      displayName: string;
      /**
       * Format: uuid
       * @description アイコンファイルUUID
       */
      iconFileId: string;
      /** @description BOTかどうか */
      bot: boolean;
      state: components["schemas"]["UserAccountState"];
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
    };
    /**
     * UserDetail
     * @description ユーザー詳細情報
     */
    UserDetail: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      id: string;
      state: components["schemas"]["UserAccountState"];
      /** @description BOTかどうか */
      bot: boolean;
      /**
       * Format: uuid
       * @description アイコンファイルUUID
       */
      iconFileId: string;
      /** @description ユーザー表示名 */
      displayName: string;
      /** @description ユーザー名 */
      name: string;
      /** @description Twitter ID */
      twitterId: string;
      /**
       * Format: date-time
       * @description 最終オンライン日時
       */
      lastOnline: string | null;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /** @description タグリスト */
      tags: components["schemas"]["UserTag"][];
      /** @description 所属グループのUUIDの配列 */
      groups: string[];
      /** @description 自己紹介(biography) */
      bio: string;
      /**
       * Format: uuid
       * @description ホームチャンネル
       */
      homeChannel: string | null;
    };
    /**
     * UserTag
     * @description ユーザータグ
     */
    UserTag: {
      /**
       * Format: uuid
       * @description タグUUID
       */
      tagId: string;
      /** @description タグ文字列 */
      tag: string;
      /** @description タグがロックされているか */
      isLocked: boolean;
      /**
       * Format: date-time
       * @description タグ付与日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description タグ更新日時
       */
      updatedAt: string;
    };
    /**
     * UserAccountState
     * Format: int32
     * @description ユーザーアカウント状態
     *     0: 停止
     *     1: 有効
     *     2: 一時停止
     * @enum {integer}
     */
    UserAccountState: 0 | 1 | 2;
    /**
     * UserGroup
     * @description ユーザーグループ
     */
    UserGroup: {
      /**
       * Format: uuid
       * @description グループUUID
       */
      id: string;
      /** @description グループ名 */
      name: string;
      /** @description グループ説明 */
      description: string;
      /** @description グループタイプ */
      type: string;
      /**
       * Format: uuid
       * @description グループアイコンUUID
       */
      icon: string;
      /** @description グループメンバーの配列 */
      members: components["schemas"]["UserGroupMember"][];
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /** @description グループ管理者のUUIDの配列 */
      admins: string[];
    };
    /**
     * UserGroupMember
     * @description ユーザーグループメンバー
     */
    UserGroupMember: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      id: string;
      /** @description ユーザーの役割 */
      role: string;
    };
    /**
     * UserGroupMembers
     * @description ユーザーグループメンバーの配列
     */
    UserGroupMembers: components["schemas"]["UserGroupMember"][];
    /**
     * UserStats
     * @description ユーザー統計情報
     */
    UserStats: {
      /**
       * Format: int64
       * @description ユーザーの総投稿メッセージ数(削除されたものも含む)
       */
      totalMessageCount: number;
      /** @description ユーザーのスタンプ統計情報 */
      stamps: components["schemas"]["UserStatsStamp"][];
      /**
       * Format: date-time
       * @description 統計情報日時
       */
      datetime: string;
    };
    /**
     * UserStatsStamp
     * @description ユーザーの特定スタンプ統計情報
     */
    UserStatsStamp: {
      /**
       * Format: uuid
       * @description スタンプID
       */
      id: string;
      /**
       * Format: int64
       * @description スタンプ数(同一メッセージ上のものは複数カウントしない)
       */
      count: number;
      /**
       * Format: int64
       * @description スタンプ数(同一メッセージ上のものも複数カウントする)
       */
      total: number;
    };
    /**
     * PatchGroupMemberRequest
     * @description ユーザーグループメンバー編集リクエスト
     */
    PatchGroupMemberRequest: {
      /** @description ユーザーの役割 */
      role: string;
    };
    /**
     * PatchUserGroupRequest
     * @description ユーザーグループ編集リクエスト
     */
    PatchUserGroupRequest: {
      /** @description グループ名 */
      name?: string;
      /** @description グループ説明 */
      description?: string;
      /** @description グループタイプ */
      type?: string;
    };
    /**
     * PostUserGroupRequest
     * @description ユーザーグループ作成リクエスト
     */
    PostUserGroupRequest: {
      /** @description グループ名 */
      name: string;
      /** @description 説明 */
      description: string;
      /** @description グループタイプ */
      type: string;
    };
    /**
     * MyUserDetail
     * @description 自分のユーザー詳細情報
     */
    MyUserDetail: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      id: string;
      /** @description 自己紹介(biography) */
      bio: string;
      /** @description 所属グループのUUIDの配列 */
      groups: string[];
      /** @description タグリスト */
      tags: components["schemas"]["UserTag"][];
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /**
       * Format: date-time
       * @description 最終オンライン日時
       */
      lastOnline: string | null;
      /** @description Twitter ID */
      twitterId: string;
      /** @description ユーザー名 */
      name: string;
      /** @description ユーザー表示名 */
      displayName: string;
      /**
       * Format: uuid
       * @description アイコンファイルUUID
       */
      iconFileId: string;
      /** @description BOTかどうか */
      bot: boolean;
      state: components["schemas"]["UserAccountState"];
      /** @description 所有している権限の配列 */
      permissions: components["schemas"]["UserPermission"][];
      /**
       * Format: uuid
       * @description ホームチャンネル
       */
      homeChannel: string | null;
    };
    /**
     * OIDCUserInfo
     * @description 自分のユーザー詳細情報
     */
    OIDCUserInfo: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      sub: string;
      /** @description ユーザー名 */
      name: string;
      /** @description ユーザー名 */
      preferred_username: string;
      /** @description アイコン画像URL */
      picture: string;
      /**
       * Format: int64
       * @description 更新日時
       */
      updated_at?: number;
      traq?: components["schemas"]["OIDCTraqUserInfo"];
    };
    /**
     * OIDCTraqUserInfo
     * @description traQ特有のユーザー詳細情報
     */
    OIDCTraqUserInfo: {
      /** @description 自己紹介(biography) */
      bio: string;
      /** @description 所属グループのUUIDの配列 */
      groups: string[];
      /** @description タグリスト */
      tags: components["schemas"]["UserTag"][];
      /**
       * Format: date-time
       * @description 最終オンライン日時
       */
      last_online: string | null;
      /** @description Twitter ID */
      twitter_id: string;
      /** @description ユーザー表示名 */
      display_name: string;
      /**
       * Format: uuid
       * @description アイコンファイルUUID
       */
      icon_file_id: string;
      /** @description BOTかどうか */
      bot: boolean;
      state: components["schemas"]["UserAccountState"];
      /** @description 所有している権限の配列 */
      permissions: components["schemas"]["UserPermission"][];
      /**
       * Format: uuid
       * @description ホームチャンネル
       */
      home_channel: string | null;
    };
    /**
     * PatchChannelSubscribersRequest
     * @description チャンネル購読者編集リクエスト
     */
    PatchChannelSubscribersRequest: {
      /** @description 通知をオンにするユーザーのUUID配列 */
      on?: string[];
      /** @description 通知をオフにするユーザーのUUID配列 */
      off?: string[];
    };
    /**
     * PutChannelSubscribersRequest
     * @description 通知をオンにするユーザーのUUID配列
     */
    PutChannelSubscribersRequest: {
      /**
       * Format: uuid
       * @description 通知をオンにするユーザーのUUID配列
       */
      on: string[];
    };
    /**
     * UserSubscribeState
     * @description ユーザーのチャンネル購読状態
     */
    UserSubscribeState: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
      level: components["schemas"]["ChannelSubscribeLevel"];
    };
    /**
     * ChannelSubscribeLevel
     * @description チャンネル購読レベル
     *     0：無し
     *     1：未読管理
     *     2：未読管理+通知
     * @enum {integer}
     */
    ChannelSubscribeLevel: 0 | 1 | 2;
    /**
     * PutChannelSubscribeLevelRequest
     * @description チャンネル購読レベル変更リクエスト
     */
    PutChannelSubscribeLevelRequest: {
      level: components["schemas"]["ChannelSubscribeLevel"];
    };
    /**
     * Webhook
     * @description Webhook情報
     */
    Webhook: {
      /**
       * Format: uuid
       * @description WebhookUUID
       */
      id: string;
      /**
       * Format: uuid
       * @description WebhookユーザーUUID
       */
      botUserId: string;
      /** @description Webhookユーザー表示名 */
      displayName: string;
      /** @description 説明 */
      description: string;
      /** @description セキュアWebhookかどうか */
      secure: boolean;
      /**
       * Format: uuid
       * @description デフォルトの投稿先チャンネルUUID
       */
      channelId: string;
      /**
       * Format: uuid
       * @description オーナーUUID
       */
      ownerId: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
    };
    /**
     * PatchWebhookRequest
     * @description Webhook情報変更リクエスト
     */
    PatchWebhookRequest: {
      /** @description Webhookユーザー表示名 */
      name?: string;
      /** @description 説明 */
      description?: string;
      /**
       * Format: uuid
       * @description デフォルトの投稿先チャンネルUUID
       */
      channelId?: string;
      /** @description Webhookシークレット */
      secret?: string;
      /**
       * Format: uuid
       * @description 移譲先のユーザーUUID
       */
      ownerId?: string;
    };
    /**
     * PostWebhookRequest
     * @description Webhook作成リクエスト
     */
    PostWebhookRequest: {
      /** @description Webhookユーザーの表示名 */
      name: string;
      /** @description 説明 */
      description: string;
      /**
       * Format: uuid
       * @description デフォルトの投稿先チャンネルUUID
       */
      channelId: string;
      /** @description Webhookシークレット */
      secret: string;
    };
    /**
     * PutUserIconRequest
     * @description アイコン画像変更リクエスト
     */
    PutUserIconRequest: {
      /**
       * Format: binary
       * @description アイコン画像(2MBまでのpng, jpeg, gif)
       */
      file: string;
    };
    /**
     * PutMyPasswordRequest
     * @description パスワード変更リクエスト
     */
    PutMyPasswordRequest: {
      /** @description 現在のパスワード */
      password: string;
      /** @description 新しいパスワード */
      newPassword: string;
    };
    /**
     * PatchMeRequest
     * @description 自分のユーザー情報変更リクエスト
     */
    PatchMeRequest: {
      /** @description 新しい表示名 */
      displayName?: string;
      /** @description TwitterID */
      twitterId?: string;
      /** @description 自己紹介(biography) */
      bio?: string;
      /**
       * Format: uuid
       * @description ホームチャンネルのUUID
       *     `00000000-0000-0000-0000-000000000000`を指定すると、ホームチャンネルが`null`に設定されます
       */
      homeChannel?: string;
    };
    /**
     * PutUserPasswordRequest
     * @description ユーザーパスワード変更リクエスト
     */
    PutUserPasswordRequest: {
      /** @description 新しいパスワード */
      newPassword: string;
    };
    /**
     * PatchUserRequest
     * @description ユーザー情報編集リクエスト
     */
    PatchUserRequest: {
      /** @description 新しい表示名 */
      displayName?: string;
      /** @description TwitterID */
      twitterId?: string;
      state?: components["schemas"]["UserAccountState"];
      /** @description ユーザーロール */
      role?: string;
    };
    /**
     * PostMyFCMDeviceRequest
     * @description FCMデバイス登録リクエスト
     */
    PostMyFCMDeviceRequest: {
      /**
       * @description FCMのデバイストークン
       * @example bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1
       */
      token: string;
    };
    /**
     * PostUserRequest
     * @description ユーザー登録リクエスト
     */
    PostUserRequest: {
      /** @description ユーザー名 */
      name: string;
      /** @description パスワード */
      password?: string;
    };
    /**
     * PostChannelRequest
     * @description チャンネル作成リクエスト
     */
    PostChannelRequest: {
      /** @description チャンネル名 */
      name: string;
      /**
       * Format: uuid
       * @description 親チャンネルのUUID
       *     ルートに作成する場合はnullを指定
       */
      parent: string | null;
    };
    /**
     * PostUserTagRequest
     * @description ユーザータグ追加リクエスト
     */
    PostUserTagRequest: {
      /** @description タグ文字列 */
      tag: string;
    };
    /**
     * PatchUserTagRequest
     * @description ユーザーのタグの編集リクエスト
     */
    PatchUserTagRequest: {
      /** @description タグのロック状態 */
      isLocked: boolean;
    };
    /**
     * Tag
     * @description タグ情報
     */
    Tag: {
      /**
       * Format: uuid
       * @description タグUUID
       */
      id: string;
      /** @description タグ文字列 */
      tag: string;
      /** @description タグがつけられているユーザーのUUID配列 */
      users: string[];
    };
    /**
     * PostStarRequest
     * @description スター追加リクエスト
     */
    PostStarRequest: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
    };
    /**
     * UnreadChannel
     * @description 未読チャンネル情報
     */
    UnreadChannel: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
      /**
       * Format: int32
       * @description 未読メッセージ数
       */
      count: number;
      /** @description 自分宛てメッセージが含まれているかどうか */
      noticeable: boolean;
      /**
       * Format: date-time
       * @description チャンネルの最古の未読メッセージの日時
       */
      since: string;
      /**
       * Format: date-time
       * @description チャンネルの最新の未読メッセージの日時
       */
      updatedAt: string;
      /**
       * Format: uuid
       * @description そのチャンネルの未読の中で最も古いメッセージのid
       */
      oldestMessageId: string;
    };
    /**
     * PostLoginRequest
     * @description ログインリクエスト
     */
    PostLoginRequest: {
      /** @description ユーザー名 */
      name: string;
      /** @description パスワード */
      password: string;
    };
    /**
     * LoginSession
     * @description ログインセッション情報
     */
    LoginSession: {
      /**
       * Format: uuid
       * @description セッションUUID
       */
      id: string;
      /**
       * Format: date-time
       * @description 発行日時
       */
      issuedAt: string;
    };
    /**
     * ActiveOAuth2Token
     * @description 有効なOAuth2トークン情報
     */
    ActiveOAuth2Token: {
      /**
       * Format: uuid
       * @description トークンUUID
       */
      id: string;
      /** @description OAuth2クライアントUUID */
      clientId: string;
      /** @description スコープ */
      scopes: components["schemas"]["OAuth2Scope"][];
      /**
       * Format: date-time
       * @description 発行日時
       */
      issuedAt: string;
    };
    /**
     * OAuth2Scope
     * @description OAuth2スコープ
     * @enum {string}
     */
    OAuth2Scope: "openid" | "profile" | "read" | "write" | "manage_bot";
    /**
     * OAuth2Client
     * @description OAuth2クライアント情報
     */
    OAuth2Client: {
      /** @description クライアントUUID */
      id: string;
      /** @description クライアント名 */
      name: string;
      /** @description 説明 */
      description: string;
      /**
       * Format: uuid
       * @description クライアント開発者UUID
       */
      developerId: string;
      /** @description 要求スコープの配列 */
      scopes: components["schemas"]["OAuth2Scope"][];
      /** @description confidential client なら true, public client なら false */
      confidential: boolean;
    };
    /**
     * PatchClientRequest
     * @description OAuth2クライアント情報変更リクエスト
     */
    PatchClientRequest: {
      /** @description クライアント名 */
      name?: string;
      /** @description 説明 */
      description?: string;
      /**
       * Format: uri
       * @description コールバックURL
       */
      callbackUrl?: string;
      /**
       * Format: uuid
       * @description クライアント開発者UUID
       */
      developerId?: string;
      /** @description confidential client なら true, public client なら false */
      confidential?: boolean;
    };
    /**
     * OAuth2ClientDetail
     * @description OAuth2クライアント詳細情報
     */
    OAuth2ClientDetail: {
      /** @description クライアントUUID */
      id: string;
      /**
       * Format: uuid
       * @description クライアント開発者UUID
       */
      developerId: string;
      /** @description 説明 */
      description: string;
      /** @description クライアント名 */
      name: string;
      /** @description 要求スコープの配列 */
      scopes: components["schemas"]["OAuth2Scope"][];
      /**
       * Format: uri
       * @description コールバックURL
       */
      callbackUrl: string;
      /** @description クライアントシークレット */
      secret: string;
      /** @description confidential client なら true, public client なら false */
      confidential: boolean;
    };
    /**
     * PostClientRequest
     * @description OAuth2クライアント作成リクエスト
     */
    PostClientRequest: {
      /** @description クライアント名 */
      name: string;
      /**
       * Format: uri
       * @description コールバックURL
       */
      callbackUrl: string;
      /** @description 要求スコープの配列 */
      scopes: components["schemas"]["OAuth2Scope"][];
      /** @description 説明 */
      description: string;
      /**
       * @description confidential client なら true, public cleint なら false
       * @default false
       */
      confidential: boolean;
    };
    /**
     * BotMode
     * @description BOT動作モード
     *
     *     HTTP: HTTP Mode
     *     WebSocket: WebSocket Mode
     * @enum {string}
     */
    BotMode: "HTTP" | "WebSocket";
    /**
     * BotState
     * Format: int32
     * @description BOT状態
     *     0: 停止
     *     1: 有効
     *     2: 一時停止
     * @enum {integer}
     */
    BotState: 0 | 1 | 2;
    /**
     * Bot
     * @description BOT情報
     */
    Bot: {
      /**
       * Format: uuid
       * @description BOT UUID
       */
      id: string;
      /**
       * Format: uuid
       * @description BOTユーザーUUID
       */
      botUserId: string;
      /** @description 説明 */
      description: string;
      /**
       * Format: uuid
       * @description BOT開発者UUID
       */
      developerId: string;
      /** @description BOTが購読しているイベントの配列 */
      subscribeEvents: string[];
      mode: components["schemas"]["BotMode"];
      state: components["schemas"]["BotState"];
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
    };
    /**
     * PatchBotRequest
     * @description BOT情報変更リクエスト
     */
    PatchBotRequest: {
      /** @description BOTユーザー表示名 */
      displayName?: string;
      /** @description BOTの説明 */
      description?: string;
      /** @description 特権 */
      privileged?: boolean;
      mode?: components["schemas"]["BotMode"];
      /**
       * Format: uri
       * @description BOTサーバーエンドポイント
       */
      endpoint?: string;
      /**
       * Format: uuid
       * @description 移譲先の開発者UUID
       */
      developerId?: string;
      /** @description 購読するイベント */
      subscribeEvents?: string[];
      /** @description 自己紹介(biography) */
      bio?: string;
    };
    /**
     * BotTokens
     * @description BOTのトークン情報
     */
    BotTokens: {
      /** @description Verification Token */
      verificationToken: string;
      /** @description BOTアクセストークン */
      accessToken: string;
    };
    /**
     * BotDetail
     * @description BOT詳細情報
     */
    BotDetail: {
      /**
       * Format: uuid
       * @description BOT UUID
       */
      id: string;
      /**
       * Format: date-time
       * @description 更新日時
       */
      updatedAt: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      mode: components["schemas"]["BotMode"];
      state: components["schemas"]["BotState"];
      /** @description BOTが購読しているイベントの配列 */
      subscribeEvents: string[];
      /**
       * Format: uuid
       * @description BOT開発者UUID
       */
      developerId: string;
      /** @description 説明 */
      description: string;
      /**
       * Format: uuid
       * @description BOTユーザーUUID
       */
      botUserId: string;
      tokens: components["schemas"]["BotTokens"];
      /**
       * Format: uri
       * @description BOTサーバーエンドポイント
       */
      endpoint: string;
      /** @description 特権BOTかどうか */
      privileged: boolean;
      /** @description BOTが参加しているチャンネルのUUID配列 */
      channels: string[];
    };
    /**
     * BotEventLog
     * @description BOTイベントログ
     */
    BotEventLog: {
      /**
       * Format: uuid
       * @description BOT UUID
       */
      botId: string;
      /**
       * Format: uuid
       * @description リクエストUUID
       */
      requestId: string;
      /** @description イベントタイプ */
      event: string;
      result?: components["schemas"]["BotEventResult"];
      /**
       * Format: int32
       * @description ステータスコード
       */
      code: number;
      /**
       * Format: date-time
       * @description イベント日時
       */
      datetime: string;
    };
    /**
     * BotEventResult
     * @description イベント配送結果
     * @enum {string}
     */
    BotEventResult: "ok" | "ng" | "ne" | "dp";
    /**
     * PostBotRequest
     * @description BOT作成リクエスト
     */
    PostBotRequest: {
      /** @description BOTユーザーID
       *     自動的に接頭辞"BOT_"が付与されます */
      name: string;
      /** @description BOTユーザー表示名 */
      displayName: string;
      /** @description BOTの説明 */
      description: string;
      mode: components["schemas"]["BotMode"];
      /**
       * Format: uri
       * @description BOTサーバーエンドポイント
       *     BOT動作モードがHTTPの場合必須です
       */
      endpoint?: string;
    };
    /**
     * PostBotActionJoinRequest
     * @description BOTチャンネル参加リクエスト
     */
    PostBotActionJoinRequest: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
    };
    /**
     * PostBotActionLeaveRequest
     * @description BOTチャンネル退出リクエスト
     */
    PostBotActionLeaveRequest: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
    };
    /**
     * BotUser
     * @description BOTユーザー対
     */
    BotUser: {
      /**
       * Format: uuid
       * @description BOT UUID
       */
      id: string;
      /**
       * Format: uuid
       * @description BOTユーザーUUID
       */
      botUserId: string;
    };
    /**
     * PostWebRTCAuthenticateRequest
     * @description skyway用認証リクエスト
     */
    PostWebRTCAuthenticateRequest: {
      /** @description ピアID */
      peerId: string;
    };
    /**
     * WebRTCAuthenticateResult
     * @description skyway用認証リクエストリザルト
     */
    WebRTCAuthenticateResult: {
      /** @description ピアID */
      peerId: string;
      /**
       * Format: int32
       * @description TTL
       */
      ttl: number;
      /**
       * Format: int64
       * @description タイムスタンプ
       */
      timestamp: number;
      /** @description 認証トークン */
      authToken: string;
    };
    /**
     * PatchChannelRequest
     * @description チャンネル情報変更リクエスト
     */
    PatchChannelRequest: {
      /** @description チャンネル名 */
      name?: string;
      /** @description アーカイブされているかどうか */
      archived?: boolean;
      /** @description 強制通知チャンネルかどうか */
      force?: boolean;
      /**
       * Format: uuid
       * @description 親チャンネルUUID
       */
      parent?: string;
    };
    /**
     * WebRTCUserStates
     * @description WebRTC状態の配列
     */
    WebRTCUserStates: components["schemas"]["WebRTCUserState"][];
    /**
     * ClipFolder
     * @description クリップフォルダ情報
     */
    ClipFolder: {
      /**
       * Format: uuid
       * @description フォルダUUID
       */
      id: string;
      /** @description フォルダ名 */
      name: string;
      /**
       * Format: date-time
       * @description 作成日時
       */
      createdAt: string;
      /**
       * Format: uuid
       * @description フォルダ所有者UUID
       */
      ownerId: string;
      /** @description 説明 */
      description: string;
    };
    /**
     * PatchClipFolderRequest
     * @description クリップフォルダ情報編集リクエスト
     */
    PatchClipFolderRequest: {
      /** @description フォルダ名 */
      name?: string;
      /** @description 説明 */
      description?: string;
    };
    /**
     * PostClipFolderRequest
     * @description クリップフォルダ作成リクエスト
     */
    PostClipFolderRequest: {
      /** @description フォルダ名 */
      name: string;
      /** @description 説明 */
      description: string;
    };
    /**
     * PostClipFolderMessageRequest
     * @description クリップ追加リクエスト
     */
    PostClipFolderMessageRequest: {
      /**
       * Format: uuid
       * @description メッセージUUID
       */
      messageId: string;
    };
    /**
     * ClippedMessage
     * @description クリップされたメッセージ
     */
    ClippedMessage: {
      message: components["schemas"]["Message"];
      /**
       * Format: date-time
       * @description クリップした日時
       */
      clippedAt: string;
    };
    /**
     * ChannelEvent
     * @description チャンネルイベント
     */
    ChannelEvent: {
      /**
       * @description イベントタイプ
       * @enum {string}
       */
      type:
        | "TopicChanged"
        | "SubscribersChanged"
        | "PinAdded"
        | "PinRemoved"
        | "NameChanged"
        | "ParentChanged"
        | "VisibilityChanged"
        | "ForcedNotificationChanged"
        | "ChildCreated";
      /**
       * Format: date-time
       * @description イベント日時
       */
      datetime: string;
      /** @description イベント内容 */
      detail:
        | components["schemas"]["TopicChangedEvent"]
        | components["schemas"]["SubscribersChangedEvent"]
        | components["schemas"]["PinAddedEvent"]
        | components["schemas"]["PinRemovedEvent"]
        | components["schemas"]["NameChangedEvent"]
        | components["schemas"]["ParentChangedEvent"]
        | components["schemas"]["VisibilityChangedEvent"]
        | components["schemas"]["ForcedNotificationChangedEvent"]
        | components["schemas"]["ChildCreatedEvent"];
    };
    /**
     * TopicChangedEvent
     * @description トピック変更イベント
     */
    TopicChangedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /** @description 変更前トピック */
      before: string;
      /** @description 変更後トピック */
      after: string;
    };
    /**
     * SubscribersChangedEvent
     * @description 購読者変更イベント
     */
    SubscribersChangedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /** @description オンにされたユーザーのUUID配列 */
      on: string[];
      /** @description オフにされたユーザーのUUID配列 */
      off: string[];
    };
    /**
     * PinAddedEvent
     * @description ピン追加イベント
     */
    PinAddedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description メッセージUUID
       */
      messageId: string;
    };
    /**
     * PinRemovedEvent
     * @description ピン削除イベント
     */
    PinRemovedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description メッセージUUID
       */
      messageId: string;
    };
    /**
     * NameChangedEvent
     * @description チャンネル名変更イベント
     */
    NameChangedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /** @description 変更前チャンネル名 */
      before: string;
      /** @description 変更後チャンネル名 */
      after: string;
    };
    /**
     * ParentChangedEvent
     * @description 親チャンネル変更イベント
     */
    ParentChangedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description 変更前親チャンネルUUID
       */
      before: string;
      /**
       * Format: uuid
       * @description 変更後親チャンネルUUID
       */
      after: string;
    };
    /**
     * VisibilityChangedEvent
     * @description チャンネル可視状態変更イベント
     */
    VisibilityChangedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /** @description 変更後可視状態 */
      visibility: boolean;
    };
    /**
     * ForcedNotificationChangedEvent
     * @description チャンネル強制通知状態変更イベント
     */
    ForcedNotificationChangedEvent: {
      /**
       * Format: uuid
       * @description 変更者UUID
       */
      userId: string;
      /** @description 変更後強制通知状態 */
      force: boolean;
    };
    /**
     * ChildCreatedEvent
     * @description 子チャンネル作成イベント
     */
    ChildCreatedEvent: {
      /**
       * Format: uuid
       * @description 作成者UUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
    };
    /**
     * QallRoomStateChangedEvent
     * @description Qallのルーム状態が変更された
     */
    QallRoomStateChangedEvent: {
      roomStates: {
        /**
         * Format: uuid
         * @description ルームのID
         */
        roomId: string;
        participants: {
          /** @description ユーザーID_RandomUUID */
          identity: string;
          /** @description 表示名 */
          name: string;
          /**
           * Format: date-time
           * @description 参加した時刻
           */
          joinedAt: string;
          attributes?: {
            [key: string]: string;
          };
          /** @description 発言権限 */
          canPublish: boolean;
        }[];
        /** @description ウェビナールームかどうか */
        isWebinar: boolean;
        /** @description ルームに関連付けられたカスタム属性 */
        metadata?: string;
      }[];
    };
    /**
     * QallSoundboardItemCreatedEvent
     * @description Qallのサウンドボードアイテムが作成された
     */
    QallSoundboardItemCreatedEvent: {
      /**
       * Format: uuid
       * @description 作成されたサウンドボードアイテムのId
       */
      soundId: string;
      /** @description 作成されたサウンドボードアイテムの名前 */
      name: string;
      /**
       * Format: uuid
       * @description 作成者のId
       */
      creatorId: string;
    };
    /**
     * QallSoundboardItemDeletedEvent
     * @description Qallのサウンドボードアイテムが削除された
     */
    QallSoundboardItemDeletedEvent: {
      /**
       * Format: uuid
       * @description 削除されたサウンドボードアイテムのId
       */
      soundId: string;
    };
    /**
     * StampPalette
     * @description スタンプパレット情報
     */
    StampPalette: {
      /**
       * Format: uuid
       * @description スタンプパレットUUID
       */
      id: string;
      /** @description パレット名 */
      name: string;
      /** @description パレット内のスタンプのUUID配列 */
      stamps: string[];
      /**
       * Format: uuid
       * @description 作成者UUID
       */
      creatorId: string;
      /**
       * Format: date-time
       * @description パレット作成日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description パレット更新日時
       */
      updatedAt: string;
      /** @description パレット説明 */
      description: string;
    };
    /**
     * PostStampPaletteRequest
     * @description スタンプパレット作成リクエスト
     */
    PostStampPaletteRequest: {
      /** @description パレット内のスタンプのUUID配列 */
      stamps: string[];
      /** @description パレット名 */
      name: string;
      /** @description 説明 */
      description: string;
    };
    /**
     * PatchStampPaletteRequest
     * @description スタンプパレット情報変更リクエスト
     */
    PatchStampPaletteRequest: {
      /** @description パレット名 */
      name?: string;
      /** @description 説明 */
      description?: string;
      /** @description パレット内のスタンプUUIDの配列 */
      stamps?: string[];
    };
    /**
     * PatchStampRequest
     * @description スタンプ情報変更リクエスト
     */
    PatchStampRequest: {
      /** @description スタンプ名 */
      name?: string;
      /**
       * Format: uuid
       * @description 作成者UUID
       */
      creatorId?: string;
    };
    /**
     * MessagePin
     * @description ピン情報
     */
    MessagePin: {
      /**
       * Format: uuid
       * @description ピン留めしたユーザーUUID
       */
      userId: string;
      /**
       * Format: date-time
       * @description ピン留めされた日時
       */
      pinnedAt: string;
    };
    /**
     * PostUserGroupAdmin
     * @description グループ管理者追加リクエスト
     */
    PostUserGroupAdminRequest: {
      /**
       * Format: uuid
       * @description 追加するユーザーのUUID
       */
      id: string;
    };
    /**
     * ChannelList
     * @description GET /channelsレスポンス
     */
    ChannelList: {
      /** @description パブリックチャンネルの配列 */
      public: components["schemas"]["Channel"][];
      /** @description ダイレクトメッセージチャンネルの配列 */
      dm?: components["schemas"]["DMChannel"][];
    };
    /**
     * DMChannel
     * @description ダイレクトメッセージチャンネル
     */
    DMChannel: {
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      id: string;
      /**
       * Format: uuid
       * @description 送信先相手のUUID
       */
      userId: string;
    };
    /**
     * ActivityTimelineMessage
     * @description Timelineアクテビティ用メッセージ
     */
    ActivityTimelineMessage: {
      /**
       * Format: uuid
       * @description メッセージUUID
       */
      id: string;
      /**
       * Format: uuid
       * @description 投稿者UUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
      /** @description メッセージ本文 */
      content: string;
      /**
       * Format: date-time
       * @description 投稿日時
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 編集日時
       */
      updatedAt: string;
    };
    OAuth2Decide: {
      /** @description 承諾する場合は"approve" */
      submit: string;
    };
    PostOAuth2Token: {
      grant_type: string;
      code?: string;
      redirect_uri?: string;
      client_id?: string;
      code_verifier?: string;
      username?: string;
      /** Format: password */
      password?: string;
      scope?: string;
      refresh_token?: string;
      client_secret?: string;
    };
    OAuth2Token: {
      access_token: string;
      token_type: string;
      expires_in?: number;
      refresh_token?: string;
      scope?: string;
      id_token?: string;
    };
    OAuth2Authorization: {
      response_type?: components["schemas"]["OAuth2ResponseType"];
      client_id: string;
      redirect_uri?: string;
      scope?: string;
      state?: string;
      code_challenge?: string;
      code_challenge_method?: string;
      nonce?: string;
      prompt?: components["schemas"]["OAuth2Prompt"];
    };
    /** @enum {string} */
    OAuth2Prompt: "none";
    /** @enum {string} */
    OAuth2ResponseType: "code" | "token" | "none";
    /**
     * OAuth2Revoke
     * @description POST /oauth2/revoke 用リクエストボディ
     */
    OAuth2Revoke: {
      /** @description 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン */
      token: string;
    };
    /**
     * ExternalProviderUser
     * @description 外部認証アカウントユーザー
     */
    ExternalProviderUser: {
      /** @description 外部サービス名 */
      providerName: string;
      /** @description 紐付けた日時 */
      linkedAt: string;
      /** @description 外部アカウント名 */
      externalName: string;
    };
    /**
     * PostLinkExternalAccount
     * @description POST /users/me/ex-accounts/link 用リクエストボディ
     */
    PostLinkExternalAccount: {
      /** @description 外部サービス名 */
      providerName: string;
    };
    /**
     * PostUnlinkExternalAccount
     * @description POST /users/me/ex-accounts/unlink 用リクエストボディ
     */
    PostUnlinkExternalAccount: {
      /** @description 外部サービス名 */
      providerName: string;
    };
    /**
     * UserPermission
     * @description ユーザー権限
     * @enum {string}
     */
    UserPermission:
      | "get_webhook"
      | "create_webhook"
      | "edit_webhook"
      | "delete_webhook"
      | "access_others_webhook"
      | "get_bot"
      | "create_bot"
      | "edit_bot"
      | "delete_bot"
      | "access_others_bot"
      | "bot_action_join_channel"
      | "bot_action_leave_channel"
      | "create_channel"
      | "get_channel"
      | "edit_channel"
      | "delete_channel"
      | "change_parent_channel"
      | "edit_channel_topic"
      | "get_channel_star"
      | "edit_channel_star"
      | "get_my_tokens"
      | "revoke_my_token"
      | "get_clients"
      | "create_client"
      | "edit_my_client"
      | "delete_my_client"
      | "manage_others_client"
      | "upload_file"
      | "download_file"
      | "delete_file"
      | "get_message"
      | "post_message"
      | "edit_message"
      | "delete_message"
      | "report_message"
      | "get_message_reports"
      | "create_message_pin"
      | "delete_message_pin"
      | "get_channel_subscription"
      | "edit_channel_subscription"
      | "connect_notification_stream"
      | "register_fcm_device"
      | "get_stamp"
      | "create_stamp"
      | "edit_stamp"
      | "edit_stamp_created_by_others"
      | "delete_stamp"
      | "delete_my_stamp"
      | "add_message_stamp"
      | "remove_message_stamp"
      | "get_my_stamp_history"
      | "get_stamp_palette"
      | "create_stamp_palette"
      | "edit_stamp_palette"
      | "delete_stamp_palette"
      | "get_user"
      | "register_user"
      | "get_me"
      | "get_oidc_userinfo"
      | "edit_me"
      | "change_my_icon"
      | "change_my_password"
      | "edit_other_users"
      | "get_user_qr_code"
      | "get_user_tag"
      | "edit_user_tag"
      | "get_user_group"
      | "create_user_group"
      | "create_special_user_group"
      | "edit_user_group"
      | "delete_user_group"
      | "edit_others_user_group"
      | "web_rtc"
      | "get_my_sessions"
      | "delete_my_sessions"
      | "get_my_external_account"
      | "edit_my_external_account"
      | "get_unread"
      | "delete_unread"
      | "get_clip_folder"
      | "create_clip_folder"
      | "edit_clip_folder"
      | "delete_clip_folder";
    /**
     * Version
     * @description バージョン・サーバーフラグ情報
     */
    Version: {
      /** @description traQ(サーバー)リビジョン */
      revision: string;
      /** @description traQ(サーバー)バージョン */
      version: string;
      flags: {
        /** @description 有効な外部ログインプロバイダ */
        externalLogin: string[];
        /** @description ユーザーが自身で新規登録(POST /api/v3/users)可能か */
        signUpAllowed: boolean;
      };
    };
    /**
     * WebRTCUserState
     * @description WebRTC状態
     */
    WebRTCUserState: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      userId: string;
      /**
       * Format: uuid
       * @description チャンネルUUID
       */
      channelId: string;
      /** @description セッションの配列 */
      sessions: components["schemas"]["Session"][];
    };
    /**
     * MessageClip
     * @description メッセージクリップ
     */
    MessageClip: {
      /**
       * Format: uuid
       * @description クリップされているフォルダのID
       */
      folderId: string;
      /**
       * Format: date-time
       * @description クリップされた日時
       */
      clippedAt: string;
    };
    /**
     * Ogp
     * @description OGPの情報
     */
    Ogp: {
      type: string;
      title: string;
      url: string;
      images: components["schemas"]["OgpMedia"][];
      description: string;
      videos: components["schemas"]["OgpMedia"][];
    };
    /**
     * OgpMedia
     * @description OGPに含まれる画像の情報
     */
    OgpMedia: {
      url: string;
      secureUrl: string | null;
      type: string | null;
      width: number | null;
      height: number | null;
    };
    /**
     * GetNotifyCitation
     * @description メッセージ引用通知の設定情報
     */
    GetNotifyCitation: {
      notifyCitation: boolean;
    };
    /**
     * UserSettings
     * @description ユーザー設定の情報
     */
    UserSettings: {
      /**
       * Format: uuid
       * @description ユーザーUUID
       */
      id: string;
      /** @description メッセージ引用通知の設定情報 */
      notifyCitation: boolean;
    };
    /**
     * PutNotifyCitationRequest
     * @description メッセージ引用通知設定リクエスト
     */
    PutNotifyCitationRequest: {
      /** @description メッセージ引用通知の設定情報 */
      notifyCitation: boolean;
    };
    /**
     * ChannelPath
     * @description チャンネルパス
     * @example {
     *       "path": "/general"
     *     }
     */
    ChannelPath: {
      /** @description チャンネルパス */
      path: string;
    };
    Session: {
      /** @description 状態 */
      state: string;
      /** @description セッションID */
      sessionId: string;
    };
    soundboardPlayResponse: {
      /** @description 作成された Ingress のID */
      ingressId: string;
      /** @description 作成された Ingress のストリームURL等 */
      url?: string;
      /** @description RTMP配信の場合のstream key */
      streamKey?: string;
    };
    qallEndpointResponse: {
      /** @description LiveKitのエンドポイント */
      endpoint: string;
    };
    soundboardListResponse: components["schemas"]["soundboardItem"][];
    soundboardItem: {
      /** @description サーバが発行したサウンドID */
      soundId: string;
      /** @description ユーザが指定した表示用のサウンド名 */
      soundName: string;
      /** @description 任意のスタンプID等、サウンドに紐づく拡張情報 */
      stampId: string;
      /** @description 作成者のユーザID */
      creatorId: string;
    };
    soundboardUploadResponse: {
      /** @description 登録されたサウンドID (ファイル名) */
      soundId: string;
    };
    qallRoomsListResponse: components["schemas"]["qallRoomWithParticipants"][];
    qallTokenResponse: {
      /** @description LiveKit用のJWTトークン */
      token: string;
    };
    qallRoomWithParticipants: {
      /**
       * Format: uuid
       * @description ルームのID
       */
      roomId: string;
      participants: components["schemas"]["qallParticipant"][];
      /** @description ウェビナールームかどうか */
      isWebinar?: boolean;
      /** @description ルームに関連付けられたカスタム属性 */
      metadata?: string;
    };
    /** @description ルーム内の参加者一覧 */
    qallParticipant: {
      /** @description ユーザーID_RandomUUID */
      identity?: string;
      /** @description 表示名 */
      name?: string;
      /**
       * Format: date-time
       * @description 参加した時刻
       */
      joinedAt?: string;
      /** @description ユーザーに関連付けられたカスタム属性 */
      attributes?: {
        [key: string]: string;
      };
      /** @description 発言権限 */
      canPublish?: boolean;
    };
    qallParticipantRequest: {
      users: {
        /** @description ユーザーID */
        userId?: string;
        /** @description 発言権限 */
        canPublish?: boolean;
      }[];
    };
    qallMetadataRequest: {
      /** @description ルームに関連付けられたカスタム属性 */
      metadata?: string;
    };
    qallMetadataResponse: {
      /** @description ルームに関連付けられたカスタム属性 */
      metadata?: string;
    };
    /** @example {
     *       "results": [
     *         {
     *           "participantId": "user1",
     *           "status": "success"
     *         },
     *         {
     *           "participantId": "user2",
     *           "status": "error",
     *           "errorMessage": "Invalid participant ID"
     *         }
     *       ]
     *     } */
    qallParticipantResponse: {
      results?: {
        /** @description 対象参加者ID */
        participantId?: string;
        /** @description success もしくは error */
        status?: string;
        /** @description エラーがある場合の詳細 */
        errorMessage?: string;
      }[];
    };
    soundboardUploadRequest: {
      /**
       * Format: binary
       * @description アップロードする音声ファイル(20秒以内)
       */
      audio: string;
      /** @description ユーザが自由につけるサウンド名 */
      soundName: string;
      /** @description アイコンスタンプID */
      stampId?: string;
    };
    soundboardPlayRequest: {
      /** @description サウンドID (DB登録済み) */
      soundId: string;
      /**
       * Format: uuid
       * @description 再生させたいルームのUUID
       */
      roomName: string;
    };
  };
  responses: never;
  parameters: {
    /** @description スタンプパレットUUID */
    paletteIdInPath: string;
    /** @description クリップフォルダUUID */
    folderIdInPath: string;
    /** @description BOTUUID */
    botIdInPath: string;
    /** @description OAuth2クライアントUUID */
    clientIdInPath: string;
    /** @description OAuth2トークンUUID */
    tokenIdInPath: string;
    /** @description セッションUUID */
    sessionIdInPath: string;
    /** @description リダイレクト先 */
    redirectInQuery: string;
    /** @description タグUUID */
    tagIdInPath: string;
    /** @description WebhookUUID */
    webhookIdInPath: string;
    /** @description ユーザーグループUUID */
    groupIdInPath: string;
    /** @description ユーザーUUID */
    userIdInPath: string;
    /** @description スタンプUUID */
    stampIdInPath: string;
    /** @description ファイルUUID */
    fileIdInPath: string;
    /** @description メッセージUUID */
    messageIdInPath: string;
    /**
     * @description 取得する件数
     * @example 50
     */
    limitInQuery: number;
    /**
     * @description 取得するオフセット
     * @example 150
     */
    offsetInQuery: number;
    /**
     * @description 取得する時間範囲の開始日時
     * @example 2016-10-12T11:00:00.000000Z
     */
    sinceInQuery: string;
    /**
     * @description 取得する時間範囲の終了日時
     * @example 2016-10-12T11:00:00.0000000Z
     */
    untilInQuery: string;
    /** @description 範囲の端を含めるかどうか */
    inclusiveInQuery: boolean;
    /** @description 昇順か降順か */
    orderInQuery: "asc" | "desc";
    /** @description チャンネルUUID */
    channelIdInPath: string;
    /** @description ルームUUID */
    roomIdInPath: string;
    /** @description ルームUUID */
    roomIdInQuery: string;
    /** @description ウェビナールームかどうか(デフォルト false) */
    isWebinarInQuery: boolean;
    /** @description 削除されたメッセージを除外するかどうか(デフォルト false) */
    excludeDeletedMessagesInQuery: boolean;
  };
  requestBodies: never;
  headers: {
    /** @description 指定した範囲に要素がさらに存在するかどうか */
    "X-TRAQ-MORE": boolean;
  };
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getMessages: {
    parameters: {
      query?: {
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
        /**
         * @description 取得する時間範囲の開始日時
         * @example 2016-10-12T11:00:00.000000Z
         */
        since?: components["parameters"]["sinceInQuery"];
        /**
         * @description 取得する時間範囲の終了日時
         * @example 2016-10-12T11:00:00.0000000Z
         */
        until?: components["parameters"]["untilInQuery"];
        /** @description 範囲の端を含めるかどうか */
        inclusive?: components["parameters"]["inclusiveInQuery"];
        /** @description 昇順か降順か */
        order?: components["parameters"]["orderInQuery"];
      };
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          "X-TRAQ-MORE": components["headers"]["X-TRAQ-MORE"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostMessageRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  searchMessages: {
    parameters: {
      query?: {
        /**
         * @description 検索ワード
         *     Simple-Query-String-Syntaxをパースして検索します
         *
         * @example "phrase match" +(foo | bar) -baz
         */
        word?: string;
        /**
         * @description 投稿日時が指定日時より後
         * @example 2006-01-02T15:04:05Z
         */
        after?: string;
        /**
         * @description 投稿日時が指定日時より前
         * @example 2006-01-02T15:04:05Z
         */
        before?: string;
        /** @description メッセージが投稿されたチャンネル */
        in?: string;
        /** @description メンションされたユーザー */
        to?: string[];
        /** @description メッセージを投稿したユーザー */
        from?: string[];
        /** @description 引用しているメッセージ */
        citation?: string;
        /** @description メッセージを投稿したユーザーがBotかどうか */
        bot?: boolean;
        /** @description メッセージがURLを含むか */
        hasURL?: boolean;
        /** @description メッセージが添付ファイルを含むか */
        hasAttachments?: boolean;
        /** @description メッセージが画像を含むか */
        hasImage?: boolean;
        /** @description メッセージが動画を含むか */
        hasVideo?: boolean;
        /** @description メッセージが音声ファイルを含むか */
        hasAudio?: boolean;
        /** @description 検索結果から取得するメッセージの最大件数 */
        limit?: number;
        /** @description 検索結果から取得するメッセージのオフセット */
        offset?: number;
        /** @description ソート順 (作成日時が新しい `createdAt`, 作成日時が古い `-createdAt`, 更新日時が新しい `updatedAt`, 更新日時が古い `-updatedAt`) */
        sort?: "createdAt" | "-createdAt" | "updatedAt" | "-updatedAt";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: int64
             * @description 検索にヒットしたメッセージ件数
             */
            totalHits: number;
            /** @description 検索にヒットしたメッセージの配列 */
            hits: components["schemas"]["Message"][];
          };
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description search service is currently unavailable */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostMessageRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     メッセージを編集できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     指定されたメッセージを編集する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     正常に削除できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     指定されたメッセージを削除する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagePin"];
        };
      };
      /** @description Not Found
       *     指定したメッセージ、またはピン留めが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createPin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Created
       *     指定したメッセージがピン留めされました。 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessagePin"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     メッセージが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removePin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     指定したメッセージのピン留めが外されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     指定したメッセージ、またはピン留めが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelStats: {
    parameters: {
      query?: {
        /** @description 削除されたメッセージを除外するかどうか(デフォルト false) */
        "exclude-deleted-messages"?:
          components["parameters"]["excludeDeletedMessagesInQuery"];
      };
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChannelStats"];
        };
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelTopic: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChannelTopic"];
        };
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editChannelTopic: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PutChannelTopicRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     チャンネルトピックが編集されました */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelViewers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChannelViewer"][];
        };
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getFiles: {
    parameters: {
      query?: {
        /** @description アップロード先チャンネルUUID */
        channelId?: string;
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
        /**
         * @description 取得する時間範囲の開始日時
         * @example 2016-10-12T11:00:00.000000Z
         */
        since?: components["parameters"]["sinceInQuery"];
        /**
         * @description 取得する時間範囲の終了日時
         * @example 2016-10-12T11:00:00.0000000Z
         */
        until?: components["parameters"]["untilInQuery"];
        /** @description 範囲の端を含めるかどうか */
        inclusive?: components["parameters"]["inclusiveInQuery"];
        /** @description 昇順か降順か */
        order?: components["parameters"]["orderInQuery"];
        /** @description アップロード者が自分のファイルのみを取得するか */
        mine?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          "X-TRAQ-MORE": components["headers"]["X-TRAQ-MORE"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileInfo"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postFile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PostFileRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileInfo"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Length Required */
      411: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getFileMeta: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FileInfo"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ファイルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getThumbnailImage: {
    parameters: {
      query?: {
        /** @description 取得するサムネイルのタイプ */
        type?: components["schemas"]["ThumbnailType"];
      };
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/png": string;
          "image/jpeg": string;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ファイルが見つからない、またはサムネイル画像が存在しません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getFile: {
    parameters: {
      query?: {
        /** @description 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます */
        dl?: number;
      };
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK
       *     ファイル本体を返します。
       *     application/octet-streamで返すことになっていますが、ファイルの形式によって変わります。 */
      200: {
        headers: {
          /** @description https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition */
          "Content-Disposition"?: string;
          [name: string]: unknown;
        };
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ファイルUUID */
        fileId: components["parameters"]["fileIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     ファイルが削除できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelPins: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Pin"][];
        };
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMessageStamps: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageStamp"][];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addMessageStamp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostMessageStampRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     スタンプを押すことができました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     メッセージ、またはスタンプが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeMessageStamp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     スタンプを消すことができました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     メッセージ、またはスタンプが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getStamp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Stamp"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteStamp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     スタンプが削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editStamp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchStampRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     スタンプ情報が変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getStamps: {
    parameters: {
      query?: {
        /**
         * @deprecated
         * @description Unicode絵文字を含ませるかどうか
         *     Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください
         */
        "include-unicode"?: boolean;
        /** @description 取得するスタンプの種類 */
        type?: "unicode" | "original";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StampWithThumbnail"][];
        };
      };
    };
  };
  createStamp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PostStampRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Stamp"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyStampHistory: {
    parameters: {
      query?: {
        /** @description 件数 */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StampHistoryEntry"][];
        };
      };
    };
  };
  getMyQRCode: {
    parameters: {
      query?: {
        /** @description 画像でなくトークン文字列で返すかどうか */
        token?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/png": string;
          "text/plain": string;
        };
      };
    };
  };
  getStampStats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StampStats"];
        };
      };
      /** @description Not Found
       *     スタンプが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetail"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchUserRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserGroup: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserGroup"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteUserGroup: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     ユーザーグループが削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editUserGroup: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchUserGroupRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     編集されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     変更後のグループ名のグループは既に存在します。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeUserGroupIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PutUserIconRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserGroupMembers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserGroupMember"][];
        };
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addUserGroupMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json":
          | components["schemas"]["UserGroupMember"]
          | components["schemas"]["UserGroupMembers"];
      };
    };
    responses: {
      /** @description No Content
       *     追加されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeUserGroupMembers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     グループから全てのユーザーが削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeUserGroupMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     指定したユーザーがユーザーグループから削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editUserGroupMember: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchGroupMemberRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request
       *     ユーザーがグループに存在しないか、リクエストが不正です。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserGroups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserGroup"][];
        };
      };
    };
  };
  createUserGroup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostUserGroupRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserGroup"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     指定したグループを作成する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     指定した名前のグループは既に存在します。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MyUserDetail"];
        };
      };
    };
  };
  editMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchMeRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOIDCUserInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OIDCUserInfo"];
        };
      };
    };
  };
  getDirectMessages: {
    parameters: {
      query?: {
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
        /**
         * @description 取得する時間範囲の開始日時
         * @example 2016-10-12T11:00:00.000000Z
         */
        since?: components["parameters"]["sinceInQuery"];
        /**
         * @description 取得する時間範囲の終了日時
         * @example 2016-10-12T11:00:00.0000000Z
         */
        until?: components["parameters"]["untilInQuery"];
        /** @description 範囲の端を含めるかどうか */
        inclusive?: components["parameters"]["inclusiveInQuery"];
        /** @description 昇順か降順か */
        order?: components["parameters"]["orderInQuery"];
      };
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          "X-TRAQ-MORE": components["headers"]["X-TRAQ-MORE"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postDirectMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostMessageRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserStats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserStats"];
        };
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelSubscribers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
      /** @description Forbidden
       *     プライベートチャンネル・強制通知チャンネルの設定は取得できません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  setChannelSubscribers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json":
          components["schemas"]["PutChannelSubscribersRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     指定したチャンネルの通知購読者は変更できません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editChannelSubscribers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json":
          components["schemas"]["PatchChannelSubscribersRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     指定したチャンネルの通知購読者は変更できません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyChannelSubscriptions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserSubscribeState"][];
        };
      };
    };
  };
  setChannelSubscribeLevel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json":
          components["schemas"]["PutChannelSubscribeLevelRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     指定したチャンネルの通知購読レベルは変更できません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getWebhooks: {
    parameters: {
      query?: {
        /** @description 全てのWebhookを取得します。権限が必要です。 */
        all?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Webhook"][];
        };
      };
    };
  };
  createWebhook: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostWebhookRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getWebhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Webhook"];
        };
      };
      /** @description Not Found
       *     Webhookが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postWebhook: {
    parameters: {
      query?: {
        /** @description メンション・チャンネルリンクを自動埋め込みする場合に1を指定する */
        embed?: number;
      };
      header?: {
        /** @description リクエストボディシグネチャ(Secretが設定されている場合は必須) */
        "X-TRAQ-Signature"?: string;
        /** @description 投稿先のチャンネルID(変更する場合) */
        "X-TRAQ-Channel-Id"?: string;
      };
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "text/plain": string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteWebhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     Webhookが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editWebhook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchWebhookRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     編集できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     Webhookが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getWebhookIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/jpeg": string;
          "image/gif": string;
          "image/png": string;
        };
      };
      /** @description Not Found
       *     Webhookが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeWebhookIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PutUserIconRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     Webhookが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/jpeg": string;
          "image/gif": string;
          "image/png": string;
        };
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeUserIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PutUserIconRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyIcon: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/jpeg": string;
          "image/gif": string;
          "image/png": string;
        };
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeMyIcon: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PutUserIconRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeMyPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PutMyPasswordRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized
       *     現在のパスワードが違います。 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeUserPassword: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PutUserPasswordRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  registerFCMDevice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostMyFCMDeviceRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     登録できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyViewStates: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MyChannelViewState"][];
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query?: {
        /** @description アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか */
        "include-suspended"?: boolean;
        /** @description 名前が一致するアカウントのみを取得する */
        name?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostUserRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetail"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     nameが重複しています。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannels: {
    parameters: {
      query?: {
        /** @description ダイレクトメッセージチャンネルをレスポンスに含めるかどうか */
        "include-dm"?: boolean;
        /** @description パスが一致するチャンネルのみを取得する */
        path?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChannelList"];
        };
      };
    };
  };
  createChannel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostChannelRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Channel"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     指定した名前のチャンネルは既に存在しています。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserTags: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserTag"][];
        };
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addUserTag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostUserTagRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserTag"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     既に追加されています。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeUserTag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     タグがロックされていました。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editUserTag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchUserTagRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーか、タグが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Tag"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyUserTags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserTag"][];
        };
      };
    };
  };
  addMyUserTag: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostUserTagRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserTag"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     既に追加されています。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeMyUserTag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     タグがロックされています。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editMyUserTag: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description タグUUID */
        tagId: components["parameters"]["tagIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchUserTagRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     タグが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyStars: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
    };
  };
  addMyStar: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostStarRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     スターしました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeMyStar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyUnreadChannels: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnreadChannel"][];
        };
      };
    };
  };
  getServerVersion: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Version"];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: {
        /** @description リダイレクト先 */
        redirect?: components["parameters"]["redirectInQuery"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostLoginRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     ログインしました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Found
       *     ログインしました。リダイレクトします。 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized
       *     認証情報が間違っています。 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ログインを試行したユーザーアカウントに問題があります。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  logout: {
    parameters: {
      query?: {
        /** @description リダイレクト先 */
        redirect?: components["parameters"]["redirectInQuery"];
        /** @description 全てのセッションでログアウトするかどうか */
        all?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     ログアウトしました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Found
       *     ログアウトしました。リダイレクトします。 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMySessions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginSession"][];
        };
      };
    };
  };
  revokeMySession: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description セッションUUID */
        sessionId: components["parameters"]["sessionIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     無効化しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getActivityTimeline: {
    parameters: {
      query?: {
        /** @description 取得する件数 */
        limit?: number;
        /** @description 全てのチャンネルのタイムラインを取得する */
        all?: boolean;
        /** @description 同じチャンネルのメッセージは最新のもののみ取得するか */
        per_channel?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            components["schemas"]["ActivityTimelineMessage"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ws: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Switching Protocols */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyTokens: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ActiveOAuth2Token"][];
        };
      };
    };
  };
  revokeMyToken: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OAuth2トークンUUID */
        tokenId: components["parameters"]["tokenIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     取り消しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPublicUserIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザー名 */
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/jpeg": string;
          "image/gif": string;
          "image/png": string;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getClient: {
    parameters: {
      query?: {
        /** @description 詳細情報を含めるかどうか */
        detail?: boolean;
      };
      header?: never;
      path: {
        /** @description OAuth2クライアントUUID */
        clientId: components["parameters"]["clientIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["OAuth2Client"]
            | components["schemas"]["OAuth2ClientDetail"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteClient: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OAuth2クライアントUUID */
        clientId: components["parameters"]["clientIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     OAuth2クライアントが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editClient: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OAuth2クライアントUUID */
        clientId: components["parameters"]["clientIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchClientRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     OAuth2クライアントが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  revokeClientTokens: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description OAuth2クライアントUUID */
        clientId: components["parameters"]["clientIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     OAuth2クライアントが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getClients: {
    parameters: {
      query?: {
        /** @description 全てのクライアントを取得するかどうか */
        all?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OAuth2Client"][];
        };
      };
    };
  };
  createClient: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostClientRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OAuth2ClientDetail"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBots: {
    parameters: {
      query?: {
        /** @description 全てのBOTを取得するかどうか */
        all?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Bot"][];
        };
      };
    };
  };
  createBot: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostBotRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BotDetail"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     既に使われている名前です。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  connectBotWS: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Switching Protocols */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBotIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/jpeg": string;
          "image/gif": string;
          "image/png": string;
        };
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeBotIcon: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": components["schemas"]["PutUserIconRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBot: {
    parameters: {
      query?: {
        /** @description 詳細情報を含めるかどうか */
        detail?: boolean;
      };
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["Bot"]
            | components["schemas"]["BotDetail"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteBot: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editBot: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchBotRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  activateBot: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Accepted */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  inactivateBot: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     BOTがインアクティベートされました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  reissueBot: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BotTokens"];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBotLogs: {
    parameters: {
      query?: {
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
      };
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BotEventLog"][];
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  letBotJoinChannel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostBotActionJoinRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     BOTを参加させました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  letBotLeaveChannel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description BOTUUID */
        botId: components["parameters"]["botIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostBotActionLeaveRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     BOTを退出させました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     BOTが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelBots: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BotUser"][];
        };
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postWebRTCAuthenticate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json":
          components["schemas"]["PostWebRTCAuthenticateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebRTCAuthenticateResult"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Service Unavailable
       *     WebRTCは現在機能を停止しています */
      503: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Channel"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editChannel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchChannelRequest"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     変更後の名前のチャンネルが既に存在しています。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getWebRTCState: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["WebRTCUserStates"];
        };
      };
    };
  };
  getClipFolders: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClipFolder"][];
        };
      };
    };
  };
  createClipFolder: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostClipFolderRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClipFolder"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getClipFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClipFolder"];
        };
      };
      /** @description Not Found
       *     クリップフォルダが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteClipFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     クリップフォルダが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editClipFolder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchClipFolderRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     編集しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getClips: {
    parameters: {
      query?: {
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
        /** @description 昇順か降順か */
        order?: components["parameters"]["orderInQuery"];
      };
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClippedMessage"][];
        };
      };
      /** @description Not Found
       *     クリップフォルダが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  clipMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json":
          components["schemas"]["PostClipFolderMessageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ClippedMessage"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     クリップフォルダが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Conflict
       *     既に追加されています。 */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  unclipMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description クリップフォルダUUID */
        folderId: components["parameters"]["folderIdInPath"];
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     外しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     クリップフォルダが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getWebhookMessages: {
    parameters: {
      query?: {
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
        /**
         * @description 取得する時間範囲の開始日時
         * @example 2016-10-12T11:00:00.000000Z
         */
        since?: components["parameters"]["sinceInQuery"];
        /**
         * @description 取得する時間範囲の終了日時
         * @example 2016-10-12T11:00:00.0000000Z
         */
        until?: components["parameters"]["untilInQuery"];
        /** @description 範囲の端を含めるかどうか */
        inclusive?: components["parameters"]["inclusiveInQuery"];
        /** @description 昇順か降順か */
        order?: components["parameters"]["orderInQuery"];
      };
      header?: never;
      path: {
        /** @description WebhookUUID */
        webhookId: components["parameters"]["webhookIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          "X-TRAQ-MORE": components["headers"]["X-TRAQ-MORE"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     Webhookが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelEvents: {
    parameters: {
      query?: {
        /**
         * @description 取得する件数
         * @example 50
         */
        limit?: components["parameters"]["limitInQuery"];
        /**
         * @description 取得するオフセット
         * @example 150
         */
        offset?: components["parameters"]["offsetInQuery"];
        /**
         * @description 取得する時間範囲の開始日時
         * @example 2016-10-12T11:00:00.000000Z
         */
        since?: components["parameters"]["sinceInQuery"];
        /**
         * @description 取得する時間範囲の終了日時
         * @example 2016-10-12T11:00:00.0000000Z
         */
        until?: components["parameters"]["untilInQuery"];
        /** @description 範囲の端を含めるかどうか */
        inclusive?: components["parameters"]["inclusiveInQuery"];
        /** @description 昇順か降順か */
        order?: components["parameters"]["orderInQuery"];
      };
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          "X-TRAQ-MORE": components["headers"]["X-TRAQ-MORE"];
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChannelEvent"][];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     チャンネルが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getStampPalettes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StampPalette"][];
        };
      };
    };
  };
  createStampPalette: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostStampPaletteRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StampPalette"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getStampPalette: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプパレットUUID */
        paletteId: components["parameters"]["paletteIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StampPalette"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteStampPalette: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプパレットUUID */
        paletteId: components["parameters"]["paletteIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     削除しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     対象のスタンプパレットを削除する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  editStampPalette: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプパレットUUID */
        paletteId: components["parameters"]["paletteIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchStampPaletteRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     変更しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     対象のスタンプパレットを編集する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOnlineUsers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
    };
  };
  getStampImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "image/png": string;
          "image/gif": string;
          "image/jpeg": string;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeStampImage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description スタンプUUID */
        stampId: components["parameters"]["stampIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description スタンプ画像(1MBまでのpng, jpeg, gif)
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request Entity Too Large */
      413: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  readChannel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     既読にしました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeUserGroupAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
        /** @description ユーザーUUID */
        userId: components["parameters"]["userIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content
       *     指定したユーザーがユーザーグループ管理者から削除されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserGroupAdmins: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string[];
        };
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addUserGroupAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ユーザーグループUUID */
        groupId: components["parameters"]["groupIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostUserGroupAdminRequest"];
      };
    };
    responses: {
      /** @description No Content
       *     追加されました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden
       *     ユーザーグループを操作する権限がありません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found
       *     ユーザーグループが見つかりません。 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postOAuth2Token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded":
          components["schemas"]["PostOAuth2Token"];
      };
    };
    responses: {
      /** @description トークンが正常に発行されました。 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OAuth2Token"];
        };
      };
      /** @description トークン発行に失敗しました。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description トークン発行に失敗しました。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postOAuth2AuthorizeDecide: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded":
          components["schemas"]["OAuth2Decide"];
      };
    };
    responses: {
      /** @description RedirectURIに結果をリダイレクトします。 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description リクエストが不正です。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description リクエストが許可されていません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOAuth2Authorize: {
    parameters: {
      query: {
        response_type?: components["schemas"]["OAuth2ResponseType"];
        client_id: string;
        redirect_uri?: string;
        scope?: string;
        state?: string;
        code_challenge?: string;
        code_challenge_method?: string;
        nonce?: string;
        prompt?: components["schemas"]["OAuth2Prompt"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 結果に応じてリダイレクトします。 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description リクエストが不正です。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description リクエストが許可されていません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postOAuth2Authorize: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded":
          components["schemas"]["OAuth2Authorization"];
      };
    };
    responses: {
      /** @description 結果に応じてリダイレクトします。 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description リクエストが不正です。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description リクエストが許可されていません。 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  revokeOAuth2Token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded":
          components["schemas"]["OAuth2Revoke"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyExternalAccounts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExternalProviderUser"][];
        };
      };
    };
  };
  linkExternalAccount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostLinkExternalAccount"];
      };
    };
    responses: {
      /** @description Found
       *     外部サービスの認証画面に遷移します。 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  unlinkExternalAccount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PostUnlinkExternalAccount"];
      };
    };
    responses: {
      /** @description No Content
       *     紐付けを解除しました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserDMChannel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DMChannel"];
        };
      };
      /** @description Not Found
       *     ユーザーが見つかりません。
       */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMessageClips: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description メッセージUUID */
        messageId: components["parameters"]["messageIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageClip"][];
        };
      };
      /** @description Not Found
       */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getOgp: {
    parameters: {
      query: {
        /** @description OGPを取得したいURL */
        url: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Ogp"];
        };
      };
      /** @description 指定したURLが不正です。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteOgpCache: {
    parameters: {
      query: {
        /** @description OGPのキャッシュを削除したいURL */
        url: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 指定したURLが不正です。 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getUserSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserSettings"];
        };
      };
    };
  };
  getMyNotifyCitation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetNotifyCitation"];
        };
      };
    };
  };
  changeMyNotifyCitation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PutNotifyCitationRequest"];
      };
    };
    responses: {
      /** @description 変更できました。 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getChannelPath: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description チャンネルUUID */
        channelId: components["parameters"]["channelIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChannelPath"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQallEndpoints: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 - LiveKitエンドポイントの取得 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["qallEndpointResponse"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getLiveKitToken: {
    parameters: {
      query?: {
        /** @description ルームUUID */
        roomId?: components["parameters"]["roomIdInQuery"];
        /** @description ウェビナールームかどうか(デフォルト false) */
        isWebinar?: components["parameters"]["isWebinarInQuery"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 - LiveKitトークンを返します */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["qallTokenResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getRooms: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 - ルームと参加者一覧の取得 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["qallRoomsListResponse"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getRoomMetadata: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ルームUUID */
        roomId: components["parameters"]["roomIdInPath"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 - ルームのメタデータを取得 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["qallMetadataResponse"];
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateRoomMetadata: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ルームUUID */
        roomId: components["parameters"]["roomIdInPath"];
      };
      cookie?: never;
    };
    /** @description ルームのメタデータ */
    requestBody: {
      content: {
        "application/json": components["schemas"]["qallMetadataRequest"];
      };
    };
    responses: {
      /** @description 成功 - ルームのメタデータを更新 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  changeParticipantRole: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ルームUUID */
        roomId: components["parameters"]["roomIdInPath"];
      };
      cookie?: never;
    };
    /** @description 発言権限を変更する参加者の情報 */
    requestBody: {
      content: {
        "application/json": components["schemas"]["qallParticipantRequest"][];
      };
    };
    responses: {
      /** @description 成功 - 発言権限を変更（部分的成功含む） */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["qallParticipantResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  liveKitWebhook: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/webhook+json": Record<string, never>;
      };
    };
    responses: {
      /** @description Webhookを正常に受信 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid payload */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getSoundboardList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description サウンド一覧の取得に成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["soundboardListResponse"];
        };
      };
      /** @description サーバエラー */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postSoundboard: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["soundboardUploadRequest"];
      };
    };
    responses: {
      /** @description アップロード成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["soundboardUploadResponse"];
        };
      };
      /** @description ファイルが提供されていない等 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description アップロードエラーなどのサーバエラー */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  postSoundboardPlay: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["soundboardPlayRequest"];
      };
    };
    responses: {
      /** @description Ingressの作成に成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["soundboardPlayResponse"];
        };
      };
      /** @description パラメータ不足 or ユーザが部屋にいない等 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 認証エラー */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Ingress作成失敗などのサーバエラー */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
