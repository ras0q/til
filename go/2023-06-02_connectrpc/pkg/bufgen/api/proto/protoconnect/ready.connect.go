// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/proto/ready.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/ras0q/connect-web-playground/pkg/bufgen/api/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReadyServiceName is the fully-qualified name of the ReadyService service.
	ReadyServiceName = "ready.ReadyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReadyServiceReadyProcedure is the fully-qualified name of the ReadyService's Ready RPC.
	ReadyServiceReadyProcedure = "/ready.ReadyService/Ready"
	// ReadyServiceUnreadyProcedure is the fully-qualified name of the ReadyService's Unready RPC.
	ReadyServiceUnreadyProcedure = "/ready.ReadyService/Unready"
)

// ReadyServiceClient is a client for the ready.ReadyService service.
type ReadyServiceClient interface {
	Ready(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error)
	Unready(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error)
}

// NewReadyServiceClient constructs a client for the ready.ReadyService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReadyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReadyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &readyServiceClient{
		ready: connect_go.NewClient[emptypb.Empty, proto.ReadyResponse](
			httpClient,
			baseURL+ReadyServiceReadyProcedure,
			opts...,
		),
		unready: connect_go.NewClient[emptypb.Empty, proto.ReadyResponse](
			httpClient,
			baseURL+ReadyServiceUnreadyProcedure,
			opts...,
		),
	}
}

// readyServiceClient implements ReadyServiceClient.
type readyServiceClient struct {
	ready   *connect_go.Client[emptypb.Empty, proto.ReadyResponse]
	unready *connect_go.Client[emptypb.Empty, proto.ReadyResponse]
}

// Ready calls ready.ReadyService.Ready.
func (c *readyServiceClient) Ready(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error) {
	return c.ready.CallUnary(ctx, req)
}

// Unready calls ready.ReadyService.Unready.
func (c *readyServiceClient) Unready(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error) {
	return c.unready.CallUnary(ctx, req)
}

// ReadyServiceHandler is an implementation of the ready.ReadyService service.
type ReadyServiceHandler interface {
	Ready(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error)
	Unready(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error)
}

// NewReadyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReadyServiceHandler(svc ReadyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ReadyServiceReadyProcedure, connect_go.NewUnaryHandler(
		ReadyServiceReadyProcedure,
		svc.Ready,
		opts...,
	))
	mux.Handle(ReadyServiceUnreadyProcedure, connect_go.NewUnaryHandler(
		ReadyServiceUnreadyProcedure,
		svc.Unready,
		opts...,
	))
	return "/ready.ReadyService/", mux
}

// UnimplementedReadyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReadyServiceHandler struct{}

func (UnimplementedReadyServiceHandler) Ready(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ready.ReadyService.Ready is not implemented"))
}

func (UnimplementedReadyServiceHandler) Unready(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[proto.ReadyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ready.ReadyService.Unready is not implemented"))
}
