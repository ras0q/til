// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file api/proto/ready.proto (package ready, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ready.ReadyResponse
 */
export class ReadyResponse extends Message<ReadyResponse> {
  /**
   * @generated from field: bool ready = 1;
   */
  ready = false;

  constructor(data?: PartialMessage<ReadyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ready.ReadyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadyResponse {
    return new ReadyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadyResponse {
    return new ReadyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadyResponse {
    return new ReadyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadyResponse | PlainMessage<ReadyResponse> | undefined, b: ReadyResponse | PlainMessage<ReadyResponse> | undefined): boolean {
    return proto3.util.equals(ReadyResponse, a, b);
  }
}

