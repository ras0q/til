/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/assistants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List assistants
         * @description Returns a list of assistants.
         */
        get: operations["listAssistants"];
        put?: never;
        /**
         * Create assistant
         * @description Create an assistant with a model and instructions.
         */
        post: operations["createAssistant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistants/{assistant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve assistant
         * @description Retrieves an assistant.
         */
        get: operations["getAssistant"];
        put?: never;
        /**
         * Modify assistant
         * @description Modifies an assistant.
         */
        post: operations["modifyAssistant"];
        /**
         * Delete assistant
         * @description Delete an assistant.
         */
        delete: operations["deleteAssistant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio/speech": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create speech
         * @description Generates audio from the input text.
         */
        post: operations["createSpeech"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio/transcriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create transcription
         * @description Transcribes audio into the input language.
         */
        post: operations["createTranscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio/translations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create translation
         * @description Translates audio into English.
         */
        post: operations["createTranslation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List batch
         * @description List your organization's batches.
         */
        get: operations["listBatches"];
        put?: never;
        /**
         * Create batch
         * @description Creates and executes a batch from an uploaded file of requests
         */
        post: operations["createBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batches/{batch_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve batch
         * @description Retrieves a batch.
         */
        get: operations["retrieveBatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batches/{batch_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel batch
         * @description Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
         */
        post: operations["cancelBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Chat Completions
         * @description List stored Chat Completions. Only Chat Completions that have been stored
         *     with the `store` parameter set to `true` will be returned.
         *
         */
        get: operations["listChatCompletions"];
        put?: never;
        /**
         * Create chat completion
         * @description **Starting a new project?** We recommend trying [Responses](https://platform.openai.com/docs/api-reference/responses)
         *     to take advantage of the latest OpenAI platform features. Compare
         *     [Chat Completions with Responses](https://platform.openai.com/docs/guides/responses-vs-chat-completions?api-mode=responses).
         *
         *     ---
         *
         *     Creates a model response for the given chat conversation. Learn more in the
         *     [text generation](https://platform.openai.com/docs/guides/text-generation), [vision](https://platform.openai.com/docs/guides/vision),
         *     and [audio](https://platform.openai.com/docs/guides/audio) guides.
         *
         *     Parameter support can differ depending on the model used to generate the
         *     response, particularly for newer reasoning models. Parameters that are only
         *     supported for reasoning models are noted below. For the current state of
         *     unsupported parameters in reasoning models,
         *     [refer to the reasoning guide](https://platform.openai.com/docs/guides/reasoning).
         *
         */
        post: operations["createChatCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/completions/{completion_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get chat completion
         * @description Get a stored chat completion. Only Chat Completions that have been created
         *     with the `store` parameter set to `true` will be returned.
         *
         */
        get: operations["getChatCompletion"];
        put?: never;
        /**
         * Update chat completion
         * @description Modify a stored chat completion. Only Chat Completions that have been
         *     created with the `store` parameter set to `true` can be modified. Currently,
         *     the only supported modification is to update the `metadata` field.
         *
         */
        post: operations["updateChatCompletion"];
        /**
         * Delete chat completion
         * @description Delete a stored chat completion. Only Chat Completions that have been
         *     created with the `store` parameter set to `true` can be deleted.
         *
         */
        delete: operations["deleteChatCompletion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/completions/{completion_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get chat messages
         * @description Get the messages in a stored chat completion. Only Chat Completions that
         *     have been created with the `store` parameter set to `true` will be
         *     returned.
         *
         */
        get: operations["getChatCompletionMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create completion
         * @description Creates a completion for the provided prompt and parameters.
         */
        post: operations["createCompletion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/containers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List containers
         * @description List Containers
         */
        get: operations["ListContainers"];
        put?: never;
        /**
         * Create container
         * @description Create Container
         */
        post: operations["CreateContainer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/containers/{container_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve container
         * @description Retrieve Container
         */
        get: operations["RetrieveContainer"];
        put?: never;
        post?: never;
        /**
         * Delete a container
         * @description Delete Container
         */
        delete: operations["DeleteContainer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/containers/{container_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List container files
         * @description List Container files
         */
        get: operations["ListContainerFiles"];
        put?: never;
        /**
         * Create container file
         * @description Create a Container File
         *
         *     You can send either a multipart/form-data request with the raw file content, or a JSON request with a file ID.
         *
         */
        post: operations["CreateContainerFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/containers/{container_id}/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve container file
         * @description Retrieve Container File
         */
        get: operations["RetrieveContainerFile"];
        put?: never;
        post?: never;
        /**
         * Delete a container file
         * @description Delete Container File
         */
        delete: operations["DeleteContainerFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/containers/{container_id}/files/{file_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve container file content
         * @description Retrieve Container File Content
         */
        get: operations["RetrieveContainerFileContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create embeddings
         * @description Creates an embedding vector representing the input text.
         */
        post: operations["createEmbedding"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List evals
         * @description List evaluations for a project.
         *
         */
        get: operations["listEvals"];
        put?: never;
        /**
         * Create eval
         * @description Create the structure of an evaluation that can be used to test a model's performance.
         *     An evaluation is a set of testing criteria and the config for a data source, which dictates the schema of the data used in the evaluation. After creating an evaluation, you can run it on different models and model parameters. We support several types of graders and datasources.
         *     For more information, see the [Evals guide](https://platform.openai.com/docs/guides/evals).
         *
         */
        post: operations["createEval"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evals/{eval_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an eval
         * @description Get an evaluation by ID.
         *
         */
        get: operations["getEval"];
        put?: never;
        /**
         * Update an eval
         * @description Update certain properties of an evaluation.
         *
         */
        post: operations["updateEval"];
        /**
         * Delete an eval
         * @description Delete an evaluation.
         *
         */
        delete: operations["deleteEval"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evals/{eval_id}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get eval runs
         * @description Get a list of runs for an evaluation.
         *
         */
        get: operations["getEvalRuns"];
        put?: never;
        /**
         * Create eval run
         * @description Kicks off a new run for a given evaluation, specifying the data source, and what model configuration to use to test. The datasource will be validated against the schema specified in the config of the evaluation.
         *
         */
        post: operations["createEvalRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evals/{eval_id}/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an eval run
         * @description Get an evaluation run by ID.
         *
         */
        get: operations["getEvalRun"];
        put?: never;
        /**
         * Cancel eval run
         * @description Cancel an ongoing evaluation run.
         *
         */
        post: operations["cancelEvalRun"];
        /**
         * Delete eval run
         * @description Delete an eval run.
         *
         */
        delete: operations["deleteEvalRun"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evals/{eval_id}/runs/{run_id}/output_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get eval run output items
         * @description Get a list of output items for an evaluation run.
         *
         */
        get: operations["getEvalRunOutputItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an output item of an eval run
         * @description Get an evaluation run output item by ID.
         *
         */
        get: operations["getEvalRunOutputItem"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List files
         * @description Returns a list of files.
         */
        get: operations["listFiles"];
        put?: never;
        /**
         * Upload file
         * @description Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 1 TB.
         *
         *     The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for details.
         *
         *     The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) models.
         *
         *     The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](https://platform.openai.com/docs/api-reference/batch/request-input).
         *
         *     Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
         *
         */
        post: operations["createFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve file
         * @description Returns information about a specific file.
         */
        get: operations["retrieveFile"];
        put?: never;
        post?: never;
        /**
         * Delete file
         * @description Delete a file.
         */
        delete: operations["deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/{file_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve file content
         * @description Returns the contents of the specified file.
         */
        get: operations["downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/alpha/graders/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run grader
         * @description Run a grader.
         *
         */
        post: operations["runGrader"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/alpha/graders/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate grader
         * @description Validate a grader.
         *
         */
        post: operations["validateGrader"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List checkpoint permissions
         * @description **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
         *
         *     Organization owners can use this endpoint to view all permissions for a fine-tuned model checkpoint.
         *
         */
        get: operations["listFineTuningCheckpointPermissions"];
        put?: never;
        /**
         * Create checkpoint permissions
         * @description **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).
         *
         *     This enables organization owners to share fine-tuned models with other projects in their organization.
         *
         */
        post: operations["createFineTuningCheckpointPermission"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions/{permission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete checkpoint permission
         * @description **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
         *
         *     Organization owners can use this endpoint to delete a permission for a fine-tuned model checkpoint.
         *
         */
        delete: operations["deleteFineTuningCheckpointPermission"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List fine-tuning jobs
         * @description List your organization's fine-tuning jobs
         *
         */
        get: operations["listPaginatedFineTuningJobs"];
        put?: never;
        /**
         * Create fine-tuning job
         * @description Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
         *
         *     Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
         *
         *     [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)
         *
         */
        post: operations["createFineTuningJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs/{fine_tuning_job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve fine-tuning job
         * @description Get info about a fine-tuning job.
         *
         *     [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)
         *
         */
        get: operations["retrieveFineTuningJob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs/{fine_tuning_job_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel fine-tuning
         * @description Immediately cancel a fine-tune job.
         *
         */
        post: operations["cancelFineTuningJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List fine-tuning checkpoints
         * @description List checkpoints for a fine-tuning job.
         *
         */
        get: operations["listFineTuningJobCheckpoints"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs/{fine_tuning_job_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List fine-tuning events
         * @description Get status updates for a fine-tuning job.
         *
         */
        get: operations["listFineTuningEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs/{fine_tuning_job_id}/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pause fine-tuning
         * @description Pause a fine-tune job.
         *
         */
        post: operations["pauseFineTuningJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fine_tuning/jobs/{fine_tuning_job_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resume fine-tuning
         * @description Resume a fine-tune job.
         *
         */
        post: operations["resumeFineTuningJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/edits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create image edit
         * @description Creates an edited or extended image given one or more source images and a prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.
         */
        post: operations["createImageEdit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/generations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create image
         * @description Creates an image given a prompt. [Learn more](https://platform.openai.com/docs/guides/images).
         *
         */
        post: operations["createImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/variations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create image variation
         * @description Creates a variation of a given image. This endpoint only supports `dall-e-2`.
         */
        post: operations["createImageVariation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List models
         * @description Lists the currently available models, and provides basic information about each one such as the owner and availability.
         */
        get: operations["listModels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/models/{model}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve model
         * @description Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         */
        get: operations["retrieveModel"];
        put?: never;
        post?: never;
        /**
         * Delete a fine-tuned model
         * @description Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
         */
        delete: operations["deleteModel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/moderations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create moderation
         * @description Classifies if text and/or image inputs are potentially harmful. Learn
         *     more in the [moderation guide](https://platform.openai.com/docs/guides/moderation).
         *
         */
        post: operations["createModeration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/admin_api_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all organization and project API keys.
         * @description List organization API keys
         */
        get: operations["admin-api-keys-list"];
        put?: never;
        /**
         * Create admin API key
         * @description Create an organization admin API key
         */
        post: operations["admin-api-keys-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/admin_api_keys/{key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve admin API key
         * @description Retrieve a single organization API key
         */
        get: operations["admin-api-keys-get"];
        put?: never;
        post?: never;
        /**
         * Delete admin API key
         * @description Delete an organization admin API key
         */
        delete: operations["admin-api-keys-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/audit_logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List audit logs
         * @description List user actions and configuration changes within this organization.
         */
        get: operations["list-audit-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization certificates
         * @description List uploaded certificates for this organization.
         */
        get: operations["listOrganizationCertificates"];
        put?: never;
        /**
         * Upload certificate
         * @description Upload a certificate to the organization. This does **not** automatically activate the certificate.
         *
         *     Organizations can upload up to 50 certificates.
         *
         */
        post: operations["uploadCertificate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/certificates/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate certificates for organization
         * @description Activate certificates at the organization level.
         *
         *     You can atomically and idempotently activate up to 10 certificates at a time.
         *
         */
        post: operations["activateOrganizationCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/certificates/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate certificates for organization
         * @description Deactivate certificates at the organization level.
         *
         *     You can atomically and idempotently deactivate up to 10 certificates at a time.
         *
         */
        post: operations["deactivateOrganizationCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/certificates/{certificate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get certificate
         * @description Get a certificate that has been uploaded to the organization.
         *
         *     You can get a certificate regardless of whether it is active or not.
         *
         */
        get: operations["getCertificate"];
        put?: never;
        /**
         * Modify certificate
         * @description Modify a certificate. Note that only the name can be modified.
         *
         */
        post: operations["modifyCertificate"];
        /**
         * Delete certificate
         * @description Delete a certificate from the organization.
         *
         *     The certificate must be inactive for the organization and all projects.
         *
         */
        delete: operations["deleteCertificate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/costs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Costs
         * @description Get costs details for the organization.
         */
        get: operations["usage-costs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invites
         * @description Returns a list of invites in the organization.
         */
        get: operations["list-invites"];
        put?: never;
        /**
         * Create invite
         * @description Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
         */
        post: operations["inviteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/invites/{invite_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve invite
         * @description Retrieves an invite.
         */
        get: operations["retrieve-invite"];
        put?: never;
        post?: never;
        /**
         * Delete invite
         * @description Delete an invite. If the invite has already been accepted, it cannot be deleted.
         */
        delete: operations["delete-invite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List projects
         * @description Returns a list of projects.
         */
        get: operations["list-projects"];
        put?: never;
        /**
         * Create project
         * @description Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
         */
        post: operations["create-project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve project
         * @description Retrieves a project.
         */
        get: operations["retrieve-project"];
        put?: never;
        /**
         * Modify project
         * @description Modifies a project in the organization.
         */
        post: operations["modify-project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/api_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project API keys
         * @description Returns a list of API keys in the project.
         */
        get: operations["list-project-api-keys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/api_keys/{key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve project API key
         * @description Retrieves an API key in the project.
         */
        get: operations["retrieve-project-api-key"];
        put?: never;
        post?: never;
        /**
         * Delete project API key
         * @description Deletes an API key from the project.
         */
        delete: operations["delete-project-api-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive project
         * @description Archives a project in the organization. Archived projects cannot be used or updated.
         */
        post: operations["archive-project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project certificates
         * @description List certificates for this project.
         */
        get: operations["listProjectCertificates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/certificates/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate certificates for project
         * @description Activate certificates at the project level.
         *
         *     You can atomically and idempotently activate up to 10 certificates at a time.
         *
         */
        post: operations["activateProjectCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/certificates/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate certificates for project
         * @description Deactivate certificates at the project level. You can atomically and
         *     idempotently deactivate up to 10 certificates at a time.
         *
         */
        post: operations["deactivateProjectCertificates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/rate_limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project rate limits
         * @description Returns the rate limits per model for a project.
         */
        get: operations["list-project-rate-limits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/rate_limits/{rate_limit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Modify project rate limit
         * @description Updates a project rate limit.
         */
        post: operations["update-project-rate-limits"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/service_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project service accounts
         * @description Returns a list of service accounts in the project.
         */
        get: operations["list-project-service-accounts"];
        put?: never;
        /**
         * Create project service account
         * @description Creates a new service account in the project. This also returns an unredacted API key for the service account.
         */
        post: operations["create-project-service-account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/service_accounts/{service_account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve project service account
         * @description Retrieves a service account in the project.
         */
        get: operations["retrieve-project-service-account"];
        put?: never;
        post?: never;
        /**
         * Delete project service account
         * @description Deletes a service account from the project.
         */
        delete: operations["delete-project-service-account"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project users
         * @description Returns a list of users in the project.
         */
        get: operations["list-project-users"];
        put?: never;
        /**
         * Create project user
         * @description Adds a user to the project. Users must already be members of the organization to be added to a project.
         */
        post: operations["create-project-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/projects/{project_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve project user
         * @description Retrieves a user in the project.
         */
        get: operations["retrieve-project-user"];
        put?: never;
        /**
         * Modify project user
         * @description Modifies a user's role in the project.
         */
        post: operations["modify-project-user"];
        /**
         * Delete project user
         * @description Deletes a user from the project.
         */
        delete: operations["delete-project-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/audio_speeches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Audio speeches
         * @description Get audio speeches usage details for the organization.
         */
        get: operations["usage-audio-speeches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/audio_transcriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Audio transcriptions
         * @description Get audio transcriptions usage details for the organization.
         */
        get: operations["usage-audio-transcriptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/code_interpreter_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Code interpreter sessions
         * @description Get code interpreter sessions usage details for the organization.
         */
        get: operations["usage-code-interpreter-sessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Completions
         * @description Get completions usage details for the organization.
         */
        get: operations["usage-completions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/embeddings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Embeddings
         * @description Get embeddings usage details for the organization.
         */
        get: operations["usage-embeddings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Images
         * @description Get images usage details for the organization.
         */
        get: operations["usage-images"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/moderations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Moderations
         * @description Get moderations usage details for the organization.
         */
        get: operations["usage-moderations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/usage/vector_stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Vector stores
         * @description Get vector stores usage details for the organization.
         */
        get: operations["usage-vector-stores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Lists all of the users in the organization.
         */
        get: operations["list-users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve user
         * @description Retrieves a user by their identifier.
         */
        get: operations["retrieve-user"];
        put?: never;
        /**
         * Modify user
         * @description Modifies a user's role in the organization.
         */
        post: operations["modify-user"];
        /**
         * Delete user
         * @description Deletes a user from the organization.
         */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/realtime/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create session
         * @description Create an ephemeral API token for use in client-side applications with the
         *     Realtime API. Can be configured with the same session parameters as the
         *     `session.update` client event.
         *
         *     It responds with a session object, plus a `client_secret` key which contains
         *     a usable ephemeral API token that can be used to authenticate browser clients
         *     for the Realtime API.
         *
         */
        post: operations["create-realtime-session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/realtime/transcription_sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create transcription session
         * @description Create an ephemeral API token for use in client-side applications with the
         *     Realtime API specifically for realtime transcriptions.
         *     Can be configured with the same session parameters as the `transcription_session.update` client event.
         *
         *     It responds with a session object, plus a `client_secret` key which contains
         *     a usable ephemeral API token that can be used to authenticate browser clients
         *     for the Realtime API.
         *
         */
        post: operations["create-realtime-transcription-session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/responses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a model response
         * @description Creates a model response. Provide [text](https://platform.openai.com/docs/guides/text) or
         *     [image](https://platform.openai.com/docs/guides/images) inputs to generate [text](https://platform.openai.com/docs/guides/text)
         *     or [JSON](https://platform.openai.com/docs/guides/structured-outputs) outputs. Have the model call
         *     your own [custom code](https://platform.openai.com/docs/guides/function-calling) or use built-in
         *     [tools](https://platform.openai.com/docs/guides/tools) like [web search](https://platform.openai.com/docs/guides/tools-web-search)
         *     or [file search](https://platform.openai.com/docs/guides/tools-file-search) to use your own data
         *     as input for the model's response.
         *
         */
        post: operations["createResponse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/responses/{response_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a model response
         * @description Retrieves a model response with the given ID.
         *
         */
        get: operations["getResponse"];
        put?: never;
        post?: never;
        /**
         * Delete a model response
         * @description Deletes a model response with the given ID.
         *
         */
        delete: operations["deleteResponse"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/responses/{response_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a response
         * @description Cancels a model response with the given ID. Only responses created with
         *     the `background` parameter set to `true` can be cancelled.
         *     [Learn more](https://platform.openai.com/docs/guides/background).
         *
         */
        post: operations["cancelResponse"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/responses/{response_id}/input_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List input items
         * @description Returns a list of input items for a given response.
         */
        get: operations["listInputItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create thread
         * @description Create a thread.
         */
        post: operations["createThread"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create thread and run
         * @description Create a thread and run it in one request.
         */
        post: operations["createThreadAndRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve thread
         * @description Retrieves a thread.
         */
        get: operations["getThread"];
        put?: never;
        /**
         * Modify thread
         * @description Modifies a thread.
         */
        post: operations["modifyThread"];
        /**
         * Delete thread
         * @description Delete a thread.
         */
        delete: operations["deleteThread"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List messages
         * @description Returns a list of messages for a given thread.
         */
        get: operations["listMessages"];
        put?: never;
        /**
         * Create message
         * @description Create a message.
         */
        post: operations["createMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/messages/{message_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve message
         * @description Retrieve a message.
         */
        get: operations["getMessage"];
        put?: never;
        /**
         * Modify message
         * @description Modifies a message.
         */
        post: operations["modifyMessage"];
        /**
         * Delete message
         * @description Deletes a message.
         */
        delete: operations["deleteMessage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List runs
         * @description Returns a list of runs belonging to a thread.
         */
        get: operations["listRuns"];
        put?: never;
        /**
         * Create run
         * @description Create a run.
         */
        post: operations["createRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve run
         * @description Retrieves a run.
         */
        get: operations["getRun"];
        put?: never;
        /**
         * Modify run
         * @description Modifies a run.
         */
        post: operations["modifyRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/runs/{run_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a run
         * @description Cancels a run that is `in_progress`.
         */
        post: operations["cancelRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/runs/{run_id}/steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List run steps
         * @description Returns a list of run steps belonging to a run.
         */
        get: operations["listRunSteps"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve run step
         * @description Retrieves a run step.
         */
        get: operations["getRunStep"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit tool outputs to run
         * @description When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
         *
         */
        post: operations["submitToolOuputsToRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create upload
         * @description Creates an intermediate [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object
         *     that you can add [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.
         *     Currently, an Upload can accept at most 8 GB in total and expires after an
         *     hour after you create it.
         *
         *     Once you complete the Upload, we will create a
         *     [File](https://platform.openai.com/docs/api-reference/files/object) object that contains all the parts
         *     you uploaded. This File is usable in the rest of our platform as a regular
         *     File object.
         *
         *     For certain `purpose` values, the correct `mime_type` must be specified.
         *     Please refer to documentation for the
         *     [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).
         *
         *     For guidance on the proper filename extensions for each purpose, please
         *     follow the documentation on [creating a
         *     File](https://platform.openai.com/docs/api-reference/files/create).
         *
         */
        post: operations["createUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/{upload_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel upload
         * @description Cancels the Upload. No Parts may be added after an Upload is cancelled.
         *
         */
        post: operations["cancelUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/{upload_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete upload
         * @description Completes the [Upload](https://platform.openai.com/docs/api-reference/uploads/object).
         *
         *     Within the returned Upload object, there is a nested [File](https://platform.openai.com/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
         *
         *     You can specify the order of the Parts by passing in an ordered list of the Part IDs.
         *
         *     The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
         *
         */
        post: operations["completeUpload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/{upload_id}/parts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add upload part
         * @description Adds a [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.
         *
         *     Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
         *
         *     It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).
         *
         */
        post: operations["addUploadPart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List vector stores
         * @description Returns a list of vector stores.
         */
        get: operations["listVectorStores"];
        put?: never;
        /**
         * Create vector store
         * @description Create a vector store.
         */
        post: operations["createVectorStore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve vector store
         * @description Retrieves a vector store.
         */
        get: operations["getVectorStore"];
        put?: never;
        /**
         * Modify vector store
         * @description Modifies a vector store.
         */
        post: operations["modifyVectorStore"];
        /**
         * Delete vector store
         * @description Delete a vector store.
         */
        delete: operations["deleteVectorStore"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/file_batches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create vector store file batch
         * @description Create a vector store file batch.
         */
        post: operations["createVectorStoreFileBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/file_batches/{batch_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve vector store file batch
         * @description Retrieves a vector store file batch.
         */
        get: operations["getVectorStoreFileBatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel vector store file batch
         * @description Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
         */
        post: operations["cancelVectorStoreFileBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List vector store files in a batch
         * @description Returns a list of vector store files in a batch.
         */
        get: operations["listFilesInVectorStoreBatch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List vector store files
         * @description Returns a list of vector store files.
         */
        get: operations["listVectorStoreFiles"];
        put?: never;
        /**
         * Create vector store file
         * @description Create a vector store file by attaching a [File](https://platform.openai.com/docs/api-reference/files) to a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).
         */
        post: operations["createVectorStoreFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve vector store file
         * @description Retrieves a vector store file.
         */
        get: operations["getVectorStoreFile"];
        put?: never;
        /**
         * Update vector store file attributes
         * @description Update attributes on a vector store file.
         */
        post: operations["updateVectorStoreFileAttributes"];
        /**
         * Delete vector store file
         * @description Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](https://platform.openai.com/docs/api-reference/files/delete) endpoint.
         */
        delete: operations["deleteVectorStoreFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/files/{file_id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve vector store file content
         * @description Retrieve the parsed contents of a vector store file.
         */
        get: operations["retrieveVectorStoreFileContent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector_stores/{vector_store_id}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search vector store
         * @description Search a vector store for relevant chunks based on a query and file attributes filter.
         */
        post: operations["searchVectorStore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    batch_cancelled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookBatchCancelled"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    batch_completed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookBatchCompleted"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    batch_expired: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookBatchExpired"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    batch_failed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookBatchFailed"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    eval_run_canceled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookEvalRunCanceled"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    eval_run_failed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookEvalRunFailed"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    eval_run_succeeded: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookEvalRunSucceeded"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    fine_tuning_job_cancelled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookFineTuningJobCancelled"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    fine_tuning_job_failed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookFineTuningJobFailed"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    fine_tuning_job_succeeded: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookFineTuningJobSucceeded"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    response_cancelled: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookResponseCancelled"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    response_completed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookResponseCompleted"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    response_failed: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookResponseFailed"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    response_incomplete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description The event payload sent by the API. */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["WebhookResponseIncomplete"];
                };
            };
            responses: {
                /** @description Return a 200 status code to acknowledge receipt of the event. Non-200
                 *     status codes will be retried.
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        AddUploadPartRequest: {
            /**
             * Format: binary
             * @description The chunk of bytes for this Part.
             *
             */
            data: string;
        };
        /** @description Represents an individual Admin API key in an org. */
        AdminApiKey: {
            /**
             * @description The object type, which is always `organization.admin_api_key`
             * @example organization.admin_api_key
             */
            object: string;
            /**
             * @description The identifier, which can be referenced in API endpoints
             * @example key_abc
             */
            id: string;
            /**
             * @description The name of the API key
             * @example Administration Key
             */
            name: string;
            /**
             * @description The redacted value of the API key
             * @example sk-admin...def
             */
            redacted_value: string;
            /**
             * @description The value of the API key. Only shown on create.
             * @example sk-admin-1234abcd
             */
            value?: string;
            /**
             * Format: int64
             * @description The Unix timestamp (in seconds) of when the API key was created
             * @example 1711471533
             */
            created_at: number;
            /**
             * Format: int64
             * @description The Unix timestamp (in seconds) of when the API key was last used
             * @example 1711471534
             */
            last_used_at: number | null;
            owner: {
                /**
                 * @description Always `user`
                 * @example user
                 */
                type?: string;
                /**
                 * @description The object type, which is always organization.user
                 * @example organization.user
                 */
                object?: string;
                /**
                 * @description The identifier, which can be referenced in API endpoints
                 * @example sa_456
                 */
                id?: string;
                /**
                 * @description The name of the user
                 * @example My Service Account
                 */
                name?: string;
                /**
                 * Format: int64
                 * @description The Unix timestamp (in seconds) of when the user was created
                 * @example 1711471533
                 */
                created_at?: number;
                /**
                 * @description Always `owner`
                 * @example owner
                 */
                role?: string;
            };
        };
        ApiKeyList: {
            /** @example list */
            object?: string;
            data?: components["schemas"]["AdminApiKey"][];
            /** @example false */
            has_more?: boolean;
            /** @example key_abc */
            first_id?: string;
            /** @example key_xyz */
            last_id?: string;
        };
        /**
         * Assistant
         * @description Represents an `assistant` that can call the model and use tools.
         */
        AssistantObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `assistant`.
             * @enum {string}
             */
            object: "assistant";
            /** @description The Unix timestamp (in seconds) for when the assistant was created. */
            created_at: number;
            /** @description The name of the assistant. The maximum length is 256 characters.
             *      */
            name: string | null;
            /** @description The description of the assistant. The maximum length is 512 characters.
             *      */
            description: string | null;
            /** @description ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
             *      */
            model: string;
            /** @description The system instructions that the assistant uses. The maximum length is 256,000 characters.
             *      */
            instructions: string | null;
            /**
             * @description A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
             *
             * @default []
             */
            tools: components["schemas"]["AssistantTool"][];
            /** @description A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                     *      */
                    vector_store_ids?: string[];
                };
            } | null;
            metadata: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        /** @description Represents an event emitted when streaming a Run.
         *
         *     Each event in a server-sent events stream has an `event` and `data` property:
         *
         *     ```
         *     event: thread.created
         *     data: {"id": "thread_123", "object": "thread", ...}
         *     ```
         *
         *     We emit events whenever a new object is created, transitions to a new state, or is being
         *     streamed in parts (deltas). For example, we emit `thread.run.created` when a new run
         *     is created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses
         *     to create a message during a run, we emit a `thread.message.created event`, a
         *     `thread.message.in_progress` event, many `thread.message.delta` events, and finally a
         *     `thread.message.completed` event.
         *
         *     We may add additional events over time, so we recommend handling unknown events gracefully
         *     in your code. See the [Assistants API quickstart](https://platform.openai.com/docs/assistants/overview) to learn how to
         *     integrate the Assistants API with streaming.
         *      */
        AssistantStreamEvent: components["schemas"]["ThreadStreamEvent"] | components["schemas"]["RunStreamEvent"] | components["schemas"]["RunStepStreamEvent"] | components["schemas"]["MessageStreamEvent"] | components["schemas"]["ErrorEvent"];
        /** @enum {string} */
        AssistantSupportedModels: "gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gpt-5-2025-08-07" | "gpt-5-mini-2025-08-07" | "gpt-5-nano-2025-08-07" | "gpt-4.1" | "gpt-4.1-mini" | "gpt-4.1-nano" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "gpt-4.1-nano-2025-04-14" | "o3-mini" | "o3-mini-2025-01-31" | "o1" | "o1-2024-12-17" | "gpt-4o" | "gpt-4o-2024-11-20" | "gpt-4o-2024-08-06" | "gpt-4o-2024-05-13" | "gpt-4o-mini" | "gpt-4o-mini-2024-07-18" | "gpt-4.5-preview" | "gpt-4.5-preview-2025-02-27" | "gpt-4-turbo" | "gpt-4-turbo-2024-04-09" | "gpt-4-0125-preview" | "gpt-4-turbo-preview" | "gpt-4-1106-preview" | "gpt-4-vision-preview" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-1106" | "gpt-3.5-turbo-0125" | "gpt-3.5-turbo-16k-0613";
        /** Code interpreter tool */
        AssistantToolsCode: {
            /**
             * @description The type of tool being defined: `code_interpreter`
             * @enum {string}
             */
            type: "code_interpreter";
        };
        /** FileSearch tool */
        AssistantToolsFileSearch: {
            /**
             * @description The type of tool being defined: `file_search`
             * @enum {string}
             */
            type: "file_search";
            /** @description Overrides for the file search tool. */
            file_search?: {
                /** @description The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
                 *
                 *     Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                 *      */
                max_num_results?: number;
                ranking_options?: components["schemas"]["FileSearchRankingOptions"];
            };
        };
        /** FileSearch tool */
        AssistantToolsFileSearchTypeOnly: {
            /**
             * @description The type of tool being defined: `file_search`
             * @enum {string}
             */
            type: "file_search";
        };
        /** Function tool */
        AssistantToolsFunction: {
            /**
             * @description The type of tool being defined: `function`
             * @enum {string}
             */
            type: "function";
            function: components["schemas"]["FunctionObject"];
        };
        /** @description Specifies the format that the model must output. Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o), [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
         *
         *     Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
         *
         *     Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
         *
         *     **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
         *      */
        AssistantsApiResponseFormatOption: "auto" | components["schemas"]["ResponseFormatText"] | components["schemas"]["ResponseFormatJsonObject"] | components["schemas"]["ResponseFormatJsonSchema"];
        /** @description Controls which (if any) tool is called by the model.
         *     `none` means the model will not call any tools and instead generates a message.
         *     `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
         *     `required` means the model must call one or more tools before responding to the user.
         *     Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
         *      */
        AssistantsApiToolChoiceOption: ("none" | "auto" | "required") | components["schemas"]["AssistantsNamedToolChoice"];
        /** @description Specifies a tool the model should use. Use to force the model to call a specific tool. */
        AssistantsNamedToolChoice: {
            /**
             * @description The type of the tool. If type is `function`, the function name must be set
             * @enum {string}
             */
            type: "function" | "code_interpreter" | "file_search";
            function?: {
                /** @description The name of the function to call. */
                name: string;
            };
        };
        /**
         * @description The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`.
         *
         * @default json
         * @enum {string}
         */
        AudioResponseFormat: "json" | "text" | "srt" | "verbose_json" | "vtt";
        /** @description A log of a user action or configuration change within this organization. */
        AuditLog: {
            /** @description The ID of this log. */
            id: string;
            type: components["schemas"]["AuditLogEventType"];
            /** @description The Unix timestamp (in seconds) of the event. */
            effective_at: number;
            /** @description The project that the action was scoped to. Absent for actions not scoped to projects. Note that any admin actions taken via Admin API keys are associated with the default project. */
            project?: {
                /** @description The project ID. */
                id?: string;
                /** @description The project title. */
                name?: string;
            };
            actor: components["schemas"]["AuditLogActor"];
            /** @description The details for events with this `type`. */
            "api_key.created"?: {
                /** @description The tracking ID of the API key. */
                id?: string;
                /** @description The payload used to create the API key. */
                data?: {
                    /** @description A list of scopes allowed for the API key, e.g. `["api.model.request"]` */
                    scopes?: string[];
                };
            };
            /** @description The details for events with this `type`. */
            "api_key.updated"?: {
                /** @description The tracking ID of the API key. */
                id?: string;
                /** @description The payload used to update the API key. */
                changes_requested?: {
                    /** @description A list of scopes allowed for the API key, e.g. `["api.model.request"]` */
                    scopes?: string[];
                };
            };
            /** @description The details for events with this `type`. */
            "api_key.deleted"?: {
                /** @description The tracking ID of the API key. */
                id?: string;
            };
            /** @description The project and fine-tuned model checkpoint that the checkpoint permission was created for. */
            "checkpoint_permission.created"?: {
                /** @description The ID of the checkpoint permission. */
                id?: string;
                /** @description The payload used to create the checkpoint permission. */
                data?: {
                    /** @description The ID of the project that the checkpoint permission was created for. */
                    project_id?: string;
                    /** @description The ID of the fine-tuned model checkpoint. */
                    fine_tuned_model_checkpoint?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "checkpoint_permission.deleted"?: {
                /** @description The ID of the checkpoint permission. */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "invite.sent"?: {
                /** @description The ID of the invite. */
                id?: string;
                /** @description The payload used to create the invite. */
                data?: {
                    /** @description The email invited to the organization. */
                    email?: string;
                    /** @description The role the email was invited to be. Is either `owner` or `member`. */
                    role?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "invite.accepted"?: {
                /** @description The ID of the invite. */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "invite.deleted"?: {
                /** @description The ID of the invite. */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "login.failed"?: {
                /** @description The error code of the failure. */
                error_code?: string;
                /** @description The error message of the failure. */
                error_message?: string;
            };
            /** @description The details for events with this `type`. */
            "logout.failed"?: {
                /** @description The error code of the failure. */
                error_code?: string;
                /** @description The error message of the failure. */
                error_message?: string;
            };
            /** @description The details for events with this `type`. */
            "organization.updated"?: {
                /** @description The organization ID. */
                id?: string;
                /** @description The payload used to update the organization settings. */
                changes_requested?: {
                    /** @description The organization title. */
                    title?: string;
                    /** @description The organization description. */
                    description?: string;
                    /** @description The organization name. */
                    name?: string;
                    /** @description Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`. */
                    threads_ui_visibility?: string;
                    /** @description Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`. */
                    usage_dashboard_visibility?: string;
                    /** @description How your organization logs data from supported API calls. One of `disabled`, `enabled_per_call`, `enabled_for_all_projects`, or `enabled_for_selected_projects` */
                    api_call_logging?: string;
                    /** @description The list of project ids if api_call_logging is set to `enabled_for_selected_projects` */
                    api_call_logging_project_ids?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "project.created"?: {
                /** @description The project ID. */
                id?: string;
                /** @description The payload used to create the project. */
                data?: {
                    /** @description The project name. */
                    name?: string;
                    /** @description The title of the project as seen on the dashboard. */
                    title?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "project.updated"?: {
                /** @description The project ID. */
                id?: string;
                /** @description The payload used to update the project. */
                changes_requested?: {
                    /** @description The title of the project as seen on the dashboard. */
                    title?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "project.archived"?: {
                /** @description The project ID. */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "rate_limit.updated"?: {
                /** @description The rate limit ID */
                id?: string;
                /** @description The payload used to update the rate limits. */
                changes_requested?: {
                    /** @description The maximum requests per minute. */
                    max_requests_per_1_minute?: number;
                    /** @description The maximum tokens per minute. */
                    max_tokens_per_1_minute?: number;
                    /** @description The maximum images per minute. Only relevant for certain models. */
                    max_images_per_1_minute?: number;
                    /** @description The maximum audio megabytes per minute. Only relevant for certain models. */
                    max_audio_megabytes_per_1_minute?: number;
                    /** @description The maximum requests per day. Only relevant for certain models. */
                    max_requests_per_1_day?: number;
                    /** @description The maximum batch input tokens per day. Only relevant for certain models. */
                    batch_1_day_max_input_tokens?: number;
                };
            };
            /** @description The details for events with this `type`. */
            "rate_limit.deleted"?: {
                /** @description The rate limit ID */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "service_account.created"?: {
                /** @description The service account ID. */
                id?: string;
                /** @description The payload used to create the service account. */
                data?: {
                    /** @description The role of the service account. Is either `owner` or `member`. */
                    role?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "service_account.updated"?: {
                /** @description The service account ID. */
                id?: string;
                /** @description The payload used to updated the service account. */
                changes_requested?: {
                    /** @description The role of the service account. Is either `owner` or `member`. */
                    role?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "service_account.deleted"?: {
                /** @description The service account ID. */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "user.added"?: {
                /** @description The user ID. */
                id?: string;
                /** @description The payload used to add the user to the project. */
                data?: {
                    /** @description The role of the user. Is either `owner` or `member`. */
                    role?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "user.updated"?: {
                /** @description The project ID. */
                id?: string;
                /** @description The payload used to update the user. */
                changes_requested?: {
                    /** @description The role of the user. Is either `owner` or `member`. */
                    role?: string;
                };
            };
            /** @description The details for events with this `type`. */
            "user.deleted"?: {
                /** @description The user ID. */
                id?: string;
            };
            /** @description The details for events with this `type`. */
            "certificate.created"?: {
                /** @description The certificate ID. */
                id?: string;
                /** @description The name of the certificate. */
                name?: string;
            };
            /** @description The details for events with this `type`. */
            "certificate.updated"?: {
                /** @description The certificate ID. */
                id?: string;
                /** @description The name of the certificate. */
                name?: string;
            };
            /** @description The details for events with this `type`. */
            "certificate.deleted"?: {
                /** @description The certificate ID. */
                id?: string;
                /** @description The name of the certificate. */
                name?: string;
                /** @description The certificate content in PEM format. */
                certificate?: string;
            };
            /** @description The details for events with this `type`. */
            "certificates.activated"?: {
                certificates?: {
                    /** @description The certificate ID. */
                    id?: string;
                    /** @description The name of the certificate. */
                    name?: string;
                }[];
            };
            /** @description The details for events with this `type`. */
            "certificates.deactivated"?: {
                certificates?: {
                    /** @description The certificate ID. */
                    id?: string;
                    /** @description The name of the certificate. */
                    name?: string;
                }[];
            };
        };
        /** @description The actor who performed the audit logged action. */
        AuditLogActor: {
            /**
             * @description The type of actor. Is either `session` or `api_key`.
             * @enum {string}
             */
            type?: "session" | "api_key";
            session?: components["schemas"]["AuditLogActorSession"];
            api_key?: components["schemas"]["AuditLogActorApiKey"];
        };
        /** @description The API Key used to perform the audit logged action. */
        AuditLogActorApiKey: {
            /** @description The tracking id of the API key. */
            id?: string;
            /**
             * @description The type of API key. Can be either `user` or `service_account`.
             * @enum {string}
             */
            type?: "user" | "service_account";
            user?: components["schemas"]["AuditLogActorUser"];
            service_account?: components["schemas"]["AuditLogActorServiceAccount"];
        };
        /** @description The service account that performed the audit logged action. */
        AuditLogActorServiceAccount: {
            /** @description The service account id. */
            id?: string;
        };
        /** @description The session in which the audit logged action was performed. */
        AuditLogActorSession: {
            user?: components["schemas"]["AuditLogActorUser"];
            /** @description The IP address from which the action was performed. */
            ip_address?: string;
        };
        /** @description The user who performed the audit logged action. */
        AuditLogActorUser: {
            /** @description The user id. */
            id?: string;
            /** @description The user email. */
            email?: string;
        };
        /**
         * @description The event type.
         * @enum {string}
         */
        AuditLogEventType: "api_key.created" | "api_key.updated" | "api_key.deleted" | "checkpoint_permission.created" | "checkpoint_permission.deleted" | "invite.sent" | "invite.accepted" | "invite.deleted" | "login.succeeded" | "login.failed" | "logout.succeeded" | "logout.failed" | "organization.updated" | "project.created" | "project.updated" | "project.archived" | "service_account.created" | "service_account.updated" | "service_account.deleted" | "rate_limit.updated" | "rate_limit.deleted" | "user.added" | "user.updated" | "user.deleted";
        /**
         * Auto Chunking Strategy
         * @description The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
         */
        AutoChunkingStrategyRequestParam: {
            /**
             * @description Always `auto`.
             * @enum {string}
             */
            type: "auto";
        };
        Batch: {
            id: string;
            /**
             * @description The object type, which is always `batch`.
             * @enum {string}
             */
            object: "batch";
            /** @description The OpenAI API endpoint used by the batch. */
            endpoint: string;
            errors?: {
                /** @description The object type, which is always `list`. */
                object?: string;
                data?: components["schemas"]["BatchError"][];
            };
            /** @description The ID of the input file for the batch. */
            input_file_id: string;
            /** @description The time frame within which the batch should be processed. */
            completion_window: string;
            /**
             * @description The current status of the batch.
             * @enum {string}
             */
            status: "validating" | "failed" | "in_progress" | "finalizing" | "completed" | "expired" | "cancelling" | "cancelled";
            /** @description The ID of the file containing the outputs of successfully executed requests. */
            output_file_id?: string;
            /** @description The ID of the file containing the outputs of requests with errors. */
            error_file_id?: string;
            /** @description The Unix timestamp (in seconds) for when the batch was created. */
            created_at: number;
            /** @description The Unix timestamp (in seconds) for when the batch started processing. */
            in_progress_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch will expire. */
            expires_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch started finalizing. */
            finalizing_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch was completed. */
            completed_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch failed. */
            failed_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch expired. */
            expired_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch started cancelling. */
            cancelling_at?: number;
            /** @description The Unix timestamp (in seconds) for when the batch was cancelled. */
            cancelled_at?: number;
            request_counts?: components["schemas"]["BatchRequestCounts"];
            metadata?: components["schemas"]["Metadata"];
        };
        /**
         * File expiration policy
         * @description The expiration policy for the output and/or error file that are generated for a batch.
         */
        BatchFileExpirationAfter: {
            /**
             * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `created_at`. Note that the anchor is the file creation time, not the time the batch is created.
             * @enum {string}
             */
            anchor: "created_at";
            /** @description The number of seconds after the anchor time that the file will expire. Must be between 3600 (1 hour) and 2592000 (30 days). */
            seconds: number;
        };
        /** @description The per-line object of the batch input file */
        BatchRequestInput: {
            /** @description A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch. */
            custom_id?: string;
            /**
             * @description The HTTP method to be used for the request. Currently only `POST` is supported.
             * @enum {string}
             */
            method?: "POST";
            /** @description The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. */
            url?: string;
        };
        /** @description The per-line object of the batch output and error files */
        BatchRequestOutput: {
            id?: string;
            /** @description A developer-provided per-request id that will be used to match outputs to inputs. */
            custom_id?: string;
            response?: {
                /** @description The HTTP status code of the response */
                status_code?: number;
                /** @description An unique identifier for the OpenAI API request. Please include this request ID when contacting support. */
                request_id?: string;
                /** @description The JSON body of the response */
                body?: Record<string, never>;
            } | null;
            /** @description For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure. */
            error?: {
                /** @description A machine-readable error code. */
                code?: string;
                /** @description A human-readable error message. */
                message?: string;
            } | null;
        };
        /** @description Represents an individual `certificate` uploaded to the organization. */
        Certificate: {
            /**
             * @description The object type.
             *
             *     - If creating, updating, or getting a specific certificate, the object type is `certificate`.
             *     - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.
             *     - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`.
             *
             * @enum {string}
             */
            object: "certificate" | "organization.certificate" | "organization.project.certificate";
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            /** @description The name of the certificate. */
            name: string;
            /** @description The Unix timestamp (in seconds) of when the certificate was uploaded. */
            created_at: number;
            certificate_details: {
                /** @description The Unix timestamp (in seconds) of when the certificate becomes valid. */
                valid_at?: number;
                /** @description The Unix timestamp (in seconds) of when the certificate expires. */
                expires_at?: number;
                /** @description The content of the certificate in PEM format. */
                content?: string;
            };
            /** @description Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate. */
            active?: boolean;
        };
        /**
         * Allowed tools
         * @description Constrains the tools available to the model to a pre-defined set.
         *
         */
        ChatCompletionAllowedTools: {
            /**
             * @description Constrains the tools available to the model to a pre-defined set.
             *
             *     `auto` allows the model to pick from among the allowed tools and generate a
             *     message.
             *
             *     `required` requires the model to call one or more of the allowed tools.
             *
             * @enum {string}
             */
            mode: "auto" | "required";
            /** @description A list of tool definitions that the model should be allowed to call.
             *
             *     For the Chat Completions API, the list of tool definitions might look like:
             *     ```json
             *     [
             *       { "type": "function", "function": { "name": "get_weather" } },
             *       { "type": "function", "function": { "name": "get_time" } }
             *     ]
             *     ```
             *      */
            tools: {
                [key: string]: unknown;
            }[];
        };
        /**
         * Allowed tools
         * @description Constrains the tools available to the model to a pre-defined set.
         *
         */
        ChatCompletionAllowedToolsChoice: {
            /**
             * @description Allowed tool configuration type. Always `allowed_tools`.
             * @enum {string}
             */
            type: "allowed_tools";
            allowed_tools: components["schemas"]["ChatCompletionAllowedTools"];
        };
        ChatCompletionDeleted: {
            /**
             * @description The type of object being deleted.
             * @enum {string}
             */
            object: "chat.completion.deleted";
            /** @description The ID of the chat completion that was deleted. */
            id: string;
            /** @description Whether the chat completion was deleted. */
            deleted: boolean;
        };
        /** @description Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
         *      */
        ChatCompletionFunctionCallOption: {
            /** @description The name of the function to call. */
            name: string;
        };
        /** @deprecated */
        ChatCompletionFunctions: {
            /** @description A description of what the function does, used by the model to choose when and how to call the function. */
            description?: string;
            /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            parameters?: components["schemas"]["FunctionParameters"];
        };
        /**
         * ChatCompletionList
         * @description An object representing a list of Chat Completions.
         *
         */
        ChatCompletionList: {
            /**
             * @description The type of this object. It is always set to "list".
             *
             * @default list
             * @enum {string}
             */
            object: "list";
            /** @description An array of chat completion objects.
             *      */
            data: components["schemas"]["CreateChatCompletionResponse"][];
            /** @description The identifier of the first chat completion in the data array. */
            first_id: string;
            /** @description The identifier of the last chat completion in the data array. */
            last_id: string;
            /** @description Indicates whether there are more Chat Completions available. */
            has_more: boolean;
        };
        /**
         * Custom tool call
         * @description A call to a custom tool created by the model.
         *
         */
        ChatCompletionMessageCustomToolCall: {
            /** @description The ID of the tool call. */
            id: string;
            /**
             * @description The type of the tool. Always `custom`.
             * @enum {string}
             */
            type: "custom";
            /** @description The custom tool that the model called. */
            custom: {
                /** @description The name of the custom tool to call. */
                name: string;
                /** @description The input for the custom tool call generated by the model. */
                input: string;
            };
        };
        /**
         * ChatCompletionMessageList
         * @description An object representing a list of chat completion messages.
         *
         */
        ChatCompletionMessageList: {
            /**
             * @description The type of this object. It is always set to "list".
             *
             * @default list
             * @enum {string}
             */
            object: "list";
            /** @description An array of chat completion message objects.
             *      */
            data: (components["schemas"]["ChatCompletionResponseMessage"] & {
                /** @description The identifier of the chat message. */
                id: string;
                /** @description If a content parts array was provided, this is an array of `text` and `image_url` parts.
                 *     Otherwise, null.
                 *      */
                content_parts?: (components["schemas"]["ChatCompletionRequestMessageContentPartText"] | components["schemas"]["ChatCompletionRequestMessageContentPartImage"])[] | null;
            })[];
            /** @description The identifier of the first chat message in the data array. */
            first_id: string;
            /** @description The identifier of the last chat message in the data array. */
            last_id: string;
            /** @description Indicates whether there are more chat messages available. */
            has_more: boolean;
        };
        /**
         * Function tool call
         * @description A call to a function tool created by the model.
         *
         */
        ChatCompletionMessageToolCall: {
            /** @description The ID of the tool call. */
            id: string;
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type: "function";
            /** @description The function that the model called. */
            function: {
                /** @description The name of the function to call. */
                name: string;
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments: string;
            };
        };
        ChatCompletionMessageToolCallChunk: {
            index: number;
            /** @description The ID of the tool call. */
            id?: string;
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type?: "function";
            function?: {
                /** @description The name of the function to call. */
                name?: string;
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments?: string;
            };
        };
        /** @description The tool calls generated by the model, such as function calls. */
        ChatCompletionMessageToolCalls: (components["schemas"]["ChatCompletionMessageToolCall"] | components["schemas"]["ChatCompletionMessageCustomToolCall"])[];
        /** @description Output types that you would like the model to generate for this request.
         *     Most models are capable of generating text, which is the default:
         *
         *     `["text"]`
         *
         *     The `gpt-4o-audio-preview` model can also be used to [generate audio](https://platform.openai.com/docs/guides/audio). To
         *     request that this model generate both text and audio responses, you can
         *     use:
         *
         *     `["text", "audio"]`
         *      */
        ChatCompletionModalities: ("text" | "audio")[] | null;
        /**
         * Function tool choice
         * @description Specifies a tool the model should use. Use to force the model to call a specific function.
         */
        ChatCompletionNamedToolChoice: {
            /**
             * @description For function calling, the type is always `function`.
             * @enum {string}
             */
            type: "function";
            function: {
                /** @description The name of the function to call. */
                name: string;
            };
        };
        /**
         * Custom tool choice
         * @description Specifies a tool the model should use. Use to force the model to call a specific custom tool.
         */
        ChatCompletionNamedToolChoiceCustom: {
            /**
             * @description For custom tool calling, the type is always `custom`.
             * @enum {string}
             */
            type: "custom";
            custom: {
                /** @description The name of the custom tool to call. */
                name: string;
            };
        };
        /**
         * Assistant message
         * @description Messages sent by the model in response to user messages.
         *
         */
        ChatCompletionRequestAssistantMessage: {
            /** @description The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
             *      */
            content?: (string | components["schemas"]["ChatCompletionRequestAssistantMessageContentPart"][]) | null;
            /** @description The refusal message by the assistant. */
            refusal?: string | null;
            /**
             * @description The role of the messages author, in this case `assistant`.
             * @enum {string}
             */
            role: "assistant";
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
            /** @description Data about a previous audio response from the model.
             *     [Learn more](https://platform.openai.com/docs/guides/audio).
             *      */
            audio?: {
                /** @description Unique identifier for a previous audio response from the model.
                 *      */
                id: string;
            } | null;
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCalls"];
            /**
             * @deprecated
             * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             */
            function_call?: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments: string;
                /** @description The name of the function to call. */
                name: string;
            } | null;
        };
        ChatCompletionRequestAssistantMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] | components["schemas"]["ChatCompletionRequestMessageContentPartRefusal"];
        /**
         * Developer message
         * @description Developer-provided instructions that the model should follow, regardless of
         *     messages sent by the user. With o1 models and newer, `developer` messages
         *     replace the previous `system` messages.
         *
         */
        ChatCompletionRequestDeveloperMessage: {
            /** @description The contents of the developer message. */
            content: string | components["schemas"]["ChatCompletionRequestMessageContentPartText"][];
            /**
             * @description The role of the messages author, in this case `developer`.
             * @enum {string}
             */
            role: "developer";
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
        };
        /**
         * Function message
         * @deprecated
         */
        ChatCompletionRequestFunctionMessage: {
            /**
             * @description The role of the messages author, in this case `function`.
             * @enum {string}
             */
            role: "function";
            /** @description The contents of the function message. */
            content: string | null;
            /** @description The name of the function to call. */
            name: string;
        };
        ChatCompletionRequestMessage: components["schemas"]["ChatCompletionRequestDeveloperMessage"] | components["schemas"]["ChatCompletionRequestSystemMessage"] | components["schemas"]["ChatCompletionRequestUserMessage"] | components["schemas"]["ChatCompletionRequestAssistantMessage"] | components["schemas"]["ChatCompletionRequestToolMessage"] | components["schemas"]["ChatCompletionRequestFunctionMessage"];
        /**
         * Audio content part
         * @description Learn about [audio inputs](https://platform.openai.com/docs/guides/audio).
         *
         */
        ChatCompletionRequestMessageContentPartAudio: {
            /**
             * @description The type of the content part. Always `input_audio`.
             * @enum {string}
             */
            type: "input_audio";
            input_audio: {
                /** @description Base64 encoded audio data. */
                data: string;
                /**
                 * @description The format of the encoded audio data. Currently supports "wav" and "mp3".
                 *
                 * @enum {string}
                 */
                format: "wav" | "mp3";
            };
        };
        /**
         * File content part
         * @description Learn about [file inputs](https://platform.openai.com/docs/guides/text) for text generation.
         *
         */
        ChatCompletionRequestMessageContentPartFile: {
            /**
             * @description The type of the content part. Always `file`.
             * @enum {string}
             */
            type: "file";
            file: {
                /** @description The name of the file, used when passing the file to the model as a
                 *     string.
                 *      */
                filename?: string;
                /** @description The base64 encoded file data, used when passing the file to the model
                 *     as a string.
                 *      */
                file_data?: string;
                /** @description The ID of an uploaded file to use as input.
                 *      */
                file_id?: string;
            };
        };
        /**
         * Image content part
         * @description Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
         *
         */
        ChatCompletionRequestMessageContentPartImage: {
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "image_url";
            image_url: {
                /**
                 * Format: uri
                 * @description Either a URL of the image or the base64 encoded image data.
                 */
                url: string;
                /**
                 * @description Specifies the detail level of the image. Learn more in the [Vision guide](https://platform.openai.com/docs/guides/vision#low-or-high-fidelity-image-understanding).
                 * @default auto
                 * @enum {string}
                 */
                detail: "auto" | "low" | "high";
            };
        };
        /** Refusal content part */
        ChatCompletionRequestMessageContentPartRefusal: {
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "refusal";
            /** @description The refusal message generated by the model. */
            refusal: string;
        };
        /**
         * Text content part
         * @description Learn about [text inputs](https://platform.openai.com/docs/guides/text-generation).
         *
         */
        ChatCompletionRequestMessageContentPartText: {
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "text";
            /** @description The text content. */
            text: string;
        };
        /**
         * System message
         * @description Developer-provided instructions that the model should follow, regardless of
         *     messages sent by the user. With o1 models and newer, use `developer` messages
         *     for this purpose instead.
         *
         */
        ChatCompletionRequestSystemMessage: {
            /** @description The contents of the system message. */
            content: string | components["schemas"]["ChatCompletionRequestSystemMessageContentPart"][];
            /**
             * @description The role of the messages author, in this case `system`.
             * @enum {string}
             */
            role: "system";
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
        };
        ChatCompletionRequestSystemMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"];
        /** Tool message */
        ChatCompletionRequestToolMessage: {
            /**
             * @description The role of the messages author, in this case `tool`.
             * @enum {string}
             */
            role: "tool";
            /** @description The contents of the tool message. */
            content: string | components["schemas"]["ChatCompletionRequestToolMessageContentPart"][];
            /** @description Tool call that this message is responding to. */
            tool_call_id: string;
        };
        ChatCompletionRequestToolMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"];
        /**
         * User message
         * @description Messages sent by an end user, containing prompts or additional context
         *     information.
         *
         */
        ChatCompletionRequestUserMessage: {
            /** @description The contents of the user message.
             *      */
            content: string | components["schemas"]["ChatCompletionRequestUserMessageContentPart"][];
            /**
             * @description The role of the messages author, in this case `user`.
             * @enum {string}
             */
            role: "user";
            /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
            name?: string;
        };
        ChatCompletionRequestUserMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] | components["schemas"]["ChatCompletionRequestMessageContentPartImage"] | components["schemas"]["ChatCompletionRequestMessageContentPartAudio"] | components["schemas"]["ChatCompletionRequestMessageContentPartFile"];
        /** @description A chat completion message generated by the model. */
        ChatCompletionResponseMessage: {
            /** @description The contents of the message. */
            content: string | null;
            /** @description The refusal message generated by the model. */
            refusal: string | null;
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCalls"];
            /** @description Annotations for the message, when applicable, as when using the
             *     [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
             *      */
            annotations?: {
                /**
                 * @description The type of the URL citation. Always `url_citation`.
                 * @enum {string}
                 */
                type: "url_citation";
                /** @description A URL citation when using web search. */
                url_citation: {
                    /** @description The index of the last character of the URL citation in the message. */
                    end_index: number;
                    /** @description The index of the first character of the URL citation in the message. */
                    start_index: number;
                    /** @description The URL of the web resource. */
                    url: string;
                    /** @description The title of the web resource. */
                    title: string;
                };
            }[];
            /**
             * @description The role of the author of this message.
             * @enum {string}
             */
            role: "assistant";
            /**
             * @deprecated
             * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             */
            function_call?: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments: string;
                /** @description The name of the function to call. */
                name: string;
            };
            /** @description If the audio output modality is requested, this object contains data
             *     about the audio response from the model. [Learn more](https://platform.openai.com/docs/guides/audio).
             *      */
            audio?: {
                /** @description Unique identifier for this audio response. */
                id: string;
                /** @description The Unix timestamp (in seconds) for when this audio response will
                 *     no longer be accessible on the server for use in multi-turn
                 *     conversations.
                 *      */
                expires_at: number;
                /** @description Base64 encoded audio bytes generated by the model, in the format
                 *     specified in the request.
                 *      */
                data: string;
                /** @description Transcript of the audio generated by the model. */
                transcript: string;
            } | null;
        };
        /**
         * @description The role of the author of a message
         * @enum {string}
         */
        ChatCompletionRole: "developer" | "system" | "user" | "assistant" | "tool" | "function";
        /**
         * @description Options for streaming response. Only set this when you set `stream: true`.
         *
         * @default null
         */
        ChatCompletionStreamOptions: {
            /** @description If set, an additional chunk will be streamed before the `data: [DONE]`
             *     message. The `usage` field on this chunk shows the token usage statistics
             *     for the entire request, and the `choices` field will always be an empty
             *     array.
             *
             *     All other chunks will also include a `usage` field, but with a null
             *     value. **NOTE:** If the stream is interrupted, you may not receive the
             *     final usage chunk which contains the total token usage for the request.
             *      */
            include_usage?: boolean;
            /** @description When true, stream obfuscation will be enabled. Stream obfuscation adds
             *     random characters to an `obfuscation` field on streaming delta events to
             *     normalize payload sizes as a mitigation to certain side-channel attacks.
             *     These obfuscation fields are included by default, but add a small amount
             *     of overhead to the data stream. You can set `include_obfuscation` to
             *     false to optimize for bandwidth if you trust the network links between
             *     your application and the OpenAI API.
             *      */
            include_obfuscation?: boolean;
        } | null;
        /** @description A chat completion delta generated by streamed model responses. */
        ChatCompletionStreamResponseDelta: {
            /** @description The contents of the chunk message. */
            content?: string | null;
            /**
             * @deprecated
             * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             */
            function_call?: {
                /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
                arguments?: string;
                /** @description The name of the function to call. */
                name?: string;
            };
            tool_calls?: components["schemas"]["ChatCompletionMessageToolCallChunk"][];
            /**
             * @description The role of the author of this message.
             * @enum {string}
             */
            role?: "developer" | "system" | "user" | "assistant" | "tool";
            /** @description The refusal message generated by the model. */
            refusal?: string | null;
        };
        ChatCompletionTokenLogprob: {
            /** @description The token. */
            token: string;
            /** @description The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely. */
            logprob: number;
            /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
            bytes: number[] | null;
            /** @description List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned. */
            top_logprobs: {
                /** @description The token. */
                token: string;
                /** @description The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely. */
                logprob: number;
                /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
                bytes: number[] | null;
            }[];
        };
        /**
         * Function tool
         * @description A function tool that can be used to generate a response.
         *
         */
        ChatCompletionTool: {
            /**
             * @description The type of the tool. Currently, only `function` is supported.
             * @enum {string}
             */
            type: "function";
            function: components["schemas"]["FunctionObject"];
        };
        /** @description Controls which (if any) tool is called by the model.
         *     `none` means the model will not call any tool and instead generates a message.
         *     `auto` means the model can pick between generating a message or calling one or more tools.
         *     `required` means the model must call one or more tools.
         *     Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
         *
         *     `none` is the default when no tools are present. `auto` is the default if tools are present.
         *      */
        ChatCompletionToolChoiceOption: ("none" | "auto" | "required") | components["schemas"]["ChatCompletionAllowedToolsChoice"] | components["schemas"]["ChatCompletionNamedToolChoice"] | components["schemas"]["ChatCompletionNamedToolChoiceCustom"];
        /** @description The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty. */
        ChunkingStrategyRequestParam: components["schemas"]["AutoChunkingStrategyRequestParam"] | components["schemas"]["StaticChunkingStrategyRequestParam"];
        /**
         * Click
         * @description A click action.
         *
         */
        Click: {
            /**
             * @description Specifies the event type. For a click action, this property is
             *     always set to `click`.
             *
             * @default click
             * @enum {string}
             */
            type: "click";
            /**
             * @description Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.
             *
             * @enum {string}
             */
            button: "left" | "right" | "wheel" | "back" | "forward";
            /** @description The x-coordinate where the click occurred.
             *      */
            x: number;
            /** @description The y-coordinate where the click occurred.
             *      */
            y: number;
        };
        /**
         * Code interpreter file output
         * @description The output of a code interpreter tool call that is a file.
         *
         */
        CodeInterpreterFileOutput: {
            /**
             * @description The type of the code interpreter file output. Always `files`.
             *
             * @enum {string}
             */
            type: "files";
            files: {
                /** @description The MIME type of the file.
                 *      */
                mime_type: string;
                /** @description The ID of the file.
                 *      */
                file_id: string;
            }[];
        };
        /**
         * Code interpreter output image
         * @description The image output from the code interpreter.
         *
         */
        CodeInterpreterOutputImage: {
            /**
             * @description The type of the output. Always 'image'.
             * @default image
             * @enum {string}
             */
            type: "image";
            /** @description The URL of the image output from the code interpreter. */
            url: string;
        };
        /**
         * Code interpreter output logs
         * @description The logs output from the code interpreter.
         *
         */
        CodeInterpreterOutputLogs: {
            /**
             * @description The type of the output. Always 'logs'.
             * @default logs
             * @enum {string}
             */
            type: "logs";
            /** @description The logs output from the code interpreter. */
            logs: string;
        };
        /**
         * Code interpreter text output
         * @description The output of a code interpreter tool call that is text.
         *
         */
        CodeInterpreterTextOutput: {
            /**
             * @description The type of the code interpreter text output. Always `logs`.
             *
             * @enum {string}
             */
            type: "logs";
            /** @description The logs of the code interpreter tool call.
             *      */
            logs: string;
        };
        /**
         * Code interpreter
         * @description A tool that runs Python code to help generate a response to a prompt.
         *
         */
        CodeInterpreterTool: {
            /**
             * @description The type of the code interpreter tool. Always `code_interpreter`.
             *
             * @enum {string}
             */
            type: "code_interpreter";
            /** @description The code interpreter container. Can be a container ID or an object that
             *     specifies uploaded file IDs to make available to your code.
             *      */
            container: string | components["schemas"]["CodeInterpreterToolAuto"];
        };
        /**
         * CodeInterpreterContainerAuto
         * @description Configuration for a code interpreter container. Optionally specify the IDs
         *     of the files to run the code on.
         *
         */
        CodeInterpreterToolAuto: {
            /**
             * @description Always `auto`.
             * @enum {string}
             */
            type: "auto";
            /** @description An optional list of uploaded files to make available to your code.
             *      */
            file_ids?: string[];
        };
        /**
         * Code interpreter tool call
         * @description A tool call to run code.
         *
         */
        CodeInterpreterToolCall: {
            /**
             * @description The type of the code interpreter tool call. Always `code_interpreter_call`.
             *
             * @default code_interpreter_call
             * @enum {string}
             */
            type: "code_interpreter_call";
            /** @description The unique ID of the code interpreter tool call.
             *      */
            id: string;
            /**
             * @description The status of the code interpreter tool call. Valid values are `in_progress`, `completed`, `incomplete`, `interpreting`, and `failed`.
             *
             * @enum {string}
             */
            status: "in_progress" | "completed" | "incomplete" | "interpreting" | "failed";
            /** @description The ID of the container used to run the code.
             *      */
            container_id: string;
            /** @description The code to run, or null if not available.
             *      */
            code: string | null;
            /** @description The outputs generated by the code interpreter, such as logs or images.
             *     Can be null if no outputs are available.
             *      */
            outputs: (components["schemas"]["CodeInterpreterOutputLogs"] | components["schemas"]["CodeInterpreterOutputImage"])[] | null;
        };
        /**
         * Comparison Filter
         * @description A filter used to compare a specified attribute key to a given value using a defined comparison operation.
         *
         */
        ComparisonFilter: {
            /**
             * @description Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.
             *     - `eq`: equals
             *     - `ne`: not equal
             *     - `gt`: greater than
             *     - `gte`: greater than or equal
             *     - `lt`: less than
             *     - `lte`: less than or equal
             *
             * @default eq
             * @enum {string}
             */
            type: "eq" | "ne" | "gt" | "gte" | "lt" | "lte";
            /** @description The key to compare against the value. */
            key: string;
            /** @description The value to compare against the attribute key; supports string, number, or boolean types. */
            value: string | number | boolean;
        };
        CompleteUploadRequest: {
            /** @description The ordered list of Part IDs.
             *      */
            part_ids: string[];
            /** @description The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.
             *      */
            md5?: string;
        };
        /** @description Usage statistics for the completion request. */
        CompletionUsage: {
            /**
             * @description Number of tokens in the generated completion.
             * @default 0
             */
            completion_tokens: number;
            /**
             * @description Number of tokens in the prompt.
             * @default 0
             */
            prompt_tokens: number;
            /**
             * @description Total number of tokens used in the request (prompt + completion).
             * @default 0
             */
            total_tokens: number;
            /** @description Breakdown of tokens used in a completion. */
            completion_tokens_details?: {
                /**
                 * @description When using Predicted Outputs, the number of tokens in the
                 *     prediction that appeared in the completion.
                 *
                 * @default 0
                 */
                accepted_prediction_tokens: number;
                /**
                 * @description Audio input tokens generated by the model.
                 * @default 0
                 */
                audio_tokens: number;
                /**
                 * @description Tokens generated by the model for reasoning.
                 * @default 0
                 */
                reasoning_tokens: number;
                /**
                 * @description When using Predicted Outputs, the number of tokens in the
                 *     prediction that did not appear in the completion. However, like
                 *     reasoning tokens, these tokens are still counted in the total
                 *     completion tokens for purposes of billing, output, and context window
                 *     limits.
                 *
                 * @default 0
                 */
                rejected_prediction_tokens: number;
            };
            /** @description Breakdown of tokens used in the prompt. */
            prompt_tokens_details?: {
                /**
                 * @description Audio input tokens present in the prompt.
                 * @default 0
                 */
                audio_tokens: number;
                /**
                 * @description Cached tokens present in the prompt.
                 * @default 0
                 */
                cached_tokens: number;
            };
        };
        /**
         * Compound Filter
         * @description Combine multiple filters using `and` or `or`.
         */
        CompoundFilter: {
            /**
             * @description Type of operation: `and` or `or`.
             * @enum {string}
             */
            type: "and" | "or";
            /** @description Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`. */
            filters: (components["schemas"]["ComparisonFilter"] | unknown)[];
        };
        ComputerAction: components["schemas"]["Click"] | components["schemas"]["DoubleClick"] | components["schemas"]["Drag"] | components["schemas"]["KeyPress"] | components["schemas"]["Move"] | components["schemas"]["Screenshot"] | components["schemas"]["Scroll"] | components["schemas"]["Type"] | components["schemas"]["Wait"];
        /** @description A computer screenshot image used with the computer use tool.
         *      */
        ComputerScreenshotImage: {
            /**
             * @description Specifies the event type. For a computer screenshot, this property is
             *     always set to `computer_screenshot`.
             *
             * @default computer_screenshot
             * @enum {string}
             */
            type: "computer_screenshot";
            /** @description The URL of the screenshot image. */
            image_url?: string;
            /** @description The identifier of an uploaded file that contains the screenshot. */
            file_id?: string;
        };
        /**
         * Computer tool call
         * @description A tool call to a computer use tool. See the
         *     [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
         *
         */
        ComputerToolCall: {
            /**
             * @description The type of the computer call. Always `computer_call`.
             * @default computer_call
             * @enum {string}
             */
            type: "computer_call";
            /** @description The unique ID of the computer call. */
            id: string;
            /** @description An identifier used when responding to the tool call with output.
             *      */
            call_id: string;
            action: components["schemas"]["ComputerAction"];
            /** @description The pending safety checks for the computer call.
             *      */
            pending_safety_checks: components["schemas"]["ComputerToolCallSafetyCheck"][];
            /**
             * @description The status of the item. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when items are returned via API.
             *
             * @enum {string}
             */
            status: "in_progress" | "completed" | "incomplete";
        };
        /**
         * Computer tool call output
         * @description The output of a computer tool call.
         *
         */
        ComputerToolCallOutput: {
            /**
             * @description The type of the computer tool call output. Always `computer_call_output`.
             *
             * @default computer_call_output
             * @enum {string}
             */
            type: "computer_call_output";
            /** @description The ID of the computer tool call output.
             *      */
            id?: string;
            /** @description The ID of the computer tool call that produced the output.
             *      */
            call_id: string;
            /** @description The safety checks reported by the API that have been acknowledged by the
             *     developer.
             *      */
            acknowledged_safety_checks?: components["schemas"]["ComputerToolCallSafetyCheck"][];
            output: components["schemas"]["ComputerScreenshotImage"];
            /**
             * @description The status of the message input. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when input items are returned via API.
             *
             * @enum {string}
             */
            status?: "in_progress" | "completed" | "incomplete";
        };
        ComputerToolCallOutputResource: components["schemas"]["ComputerToolCallOutput"] & {
            /** @description The unique ID of the computer call tool output.
             *      */
            id: string;
        };
        /** @description A pending safety check for the computer call.
         *      */
        ComputerToolCallSafetyCheck: {
            /** @description The ID of the pending safety check. */
            id: string;
            /** @description The type of the pending safety check. */
            code: string;
            /** @description Details about the pending safety check. */
            message: string;
        };
        ContainerFileListResource: {
            /**
             * @description The type of object returned, must be 'list'.
             * @constant
             */
            object: "list";
            /** @description A list of container files. */
            data: components["schemas"]["ContainerFileResource"][];
            /** @description The ID of the first file in the list. */
            first_id: string;
            /** @description The ID of the last file in the list. */
            last_id: string;
            /** @description Whether there are more files available. */
            has_more: boolean;
        };
        /** The container file object */
        ContainerFileResource: {
            /** @description Unique identifier for the file. */
            id: string;
            /**
             * @description The type of this object (`container.file`).
             * @constant
             */
            object: "container.file";
            /** @description The container this file belongs to. */
            container_id: string;
            /** @description Unix timestamp (in seconds) when the file was created. */
            created_at: number;
            /** @description Size of the file in bytes. */
            bytes: number;
            /** @description Path of the file in the container. */
            path: string;
            /** @description Source of the file (e.g., `user`, `assistant`). */
            source: string;
        };
        ContainerListResource: {
            /**
             * @description The type of object returned, must be 'list'.
             * @constant
             */
            object: "list";
            /** @description A list of containers. */
            data: components["schemas"]["ContainerResource"][];
            /** @description The ID of the first container in the list. */
            first_id: string;
            /** @description The ID of the last container in the list. */
            last_id: string;
            /** @description Whether there are more containers available. */
            has_more: boolean;
        };
        /** The container object */
        ContainerResource: {
            /** @description Unique identifier for the container. */
            id: string;
            /** @description The type of this object. */
            object: string;
            /** @description Name of the container. */
            name: string;
            /** @description Unix timestamp (in seconds) when the container was created. */
            created_at: number;
            /** @description Status of the container (e.g., active, deleted). */
            status: string;
            /** @description The container will expire after this time period.
             *     The anchor is the reference point for the expiration.
             *     The minutes is the number of minutes after the anchor before the container expires.
             *      */
            expires_after?: {
                /**
                 * @description The reference point for the expiration.
                 * @enum {string}
                 */
                anchor?: "last_active_at";
                /** @description The number of minutes after the anchor before the container expires. */
                minutes?: number;
            };
        };
        /** @description Multi-modal input and output contents.
         *      */
        Content: components["schemas"]["InputContent"] | components["schemas"]["OutputContent"];
        /**
         * Coordinate
         * @description An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.
         *
         */
        Coordinate: {
            /** @description The x-coordinate.
             *      */
            x: number;
            /** @description The y-coordinate.
             *      */
            y: number;
        };
        /** @description The aggregated costs details of the specific time bucket. */
        CostsResult: {
            /** @enum {string} */
            object: "organization.costs.result";
            /** @description The monetary value in its associated currency. */
            amount?: {
                /** @description The numeric value of the cost. */
                value?: number;
                /** @description Lowercase ISO-4217 currency e.g. "usd" */
                currency?: string;
            };
            /** @description When `group_by=line_item`, this field provides the line item of the grouped costs result. */
            line_item?: string | null;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped costs result. */
            project_id?: string | null;
        };
        CreateAssistantRequest: {
            /**
             * @description ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
             *
             * @example gpt-4o
             */
            model: string | components["schemas"]["AssistantSupportedModels"];
            /** @description The name of the assistant. The maximum length is 256 characters.
             *      */
            name?: string | null;
            /** @description The description of the assistant. The maximum length is 512 characters.
             *      */
            description?: string | null;
            /** @description The system instructions that the assistant uses. The maximum length is 256,000 characters.
             *      */
            instructions?: string | null;
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /**
             * @description A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
             *
             * @default []
             */
            tools: components["schemas"]["AssistantTool"][];
            /** @description A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                     *      */
                    vector_store_ids?: string[];
                    /** @description A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                     *      */
                    vector_stores?: {
                        /** @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
                         *      */
                        file_ids?: string[];
                        /** @description The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. */
                        chunking_strategy?: {
                            /**
                             * @description Always `auto`.
                             * @enum {string}
                             */
                            type: "auto";
                        } | {
                            /**
                             * @description Always `static`.
                             * @enum {string}
                             */
                            type: "static";
                            static: {
                                /** @description The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`. */
                                max_chunk_size_tokens: number;
                                /** @description The number of tokens that overlap between chunks. The default value is `400`.
                                 *
                                 *     Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                                 *      */
                                chunk_overlap_tokens: number;
                            };
                        };
                        metadata?: components["schemas"]["Metadata"];
                    }[];
                } | unknown | unknown;
            } | null;
            metadata?: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        CreateChatCompletionRequest: components["schemas"]["CreateModelResponseProperties"] & {
            /** @description A list of messages comprising the conversation so far. Depending on the
             *     [model](https://platform.openai.com/docs/models) you use, different message types (modalities) are
             *     supported, like [text](https://platform.openai.com/docs/guides/text-generation),
             *     [images](https://platform.openai.com/docs/guides/vision), and [audio](https://platform.openai.com/docs/guides/audio).
             *      */
            messages: components["schemas"]["ChatCompletionRequestMessage"][];
            /** @description Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
             *     offers a wide range of models with different capabilities, performance
             *     characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)
             *     to browse and compare available models.
             *      */
            model: components["schemas"]["ModelIdsShared"];
            modalities?: components["schemas"]["ResponseModalities"];
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /** @description An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
             *      */
            max_completion_tokens?: number | null;
            /**
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on
             *     their existing frequency in the text so far, decreasing the model's
             *     likelihood to repeat the same line verbatim.
             *
             * @default 0
             */
            frequency_penalty: number | null;
            /**
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on
             *     whether they appear in the text so far, increasing the model's likelihood
             *     to talk about new topics.
             *
             * @default 0
             */
            presence_penalty: number | null;
            /**
             * Web search
             * @description This tool searches the web for relevant results to use in a response.
             *     Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search?api-mode=chat).
             *
             */
            web_search_options?: {
                /** @description Approximate location parameters for the search.
                 *      */
                user_location?: {
                    /**
                     * @description The type of location approximation. Always `approximate`.
                     *
                     * @enum {string}
                     */
                    type: "approximate";
                    approximate: components["schemas"]["WebSearchLocation"];
                } | null;
                search_context_size?: components["schemas"]["WebSearchContextSize"];
            };
            /** @description An integer between 0 and 20 specifying the number of most likely tokens to
             *     return at each token position, each with an associated log probability.
             *     `logprobs` must be set to `true` if this parameter is used.
             *      */
            top_logprobs?: number | null;
            /** @description An object specifying the format that the model must output.
             *
             *     Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
             *     Structured Outputs which ensures the model will match your supplied JSON
             *     schema. Learn more in the [Structured Outputs
             *     guide](https://platform.openai.com/docs/guides/structured-outputs).
             *
             *     Setting to `{ "type": "json_object" }` enables the older JSON mode, which
             *     ensures the message the model generates is valid JSON. Using `json_schema`
             *     is preferred for models that support it.
             *      */
            response_format?: components["schemas"]["ResponseFormatText"] | components["schemas"]["ResponseFormatJsonSchema"] | components["schemas"]["ResponseFormatJsonObject"];
            /** @description Parameters for audio output. Required when audio output is requested with
             *     `modalities: ["audio"]`. [Learn more](https://platform.openai.com/docs/guides/audio).
             *      */
            audio?: {
                /** @description The voice the model uses to respond. Supported voices are
                 *     `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `nova`, `onyx`, `sage`, and `shimmer`.
                 *      */
                voice: components["schemas"]["VoiceIdsShared"];
                /**
                 * @description Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                 *     `opus`, or `pcm16`.
                 *
                 * @enum {string}
                 */
                format: "wav" | "aac" | "mp3" | "flac" | "opus" | "pcm16";
            } | null;
            /**
             * @description Whether or not to store the output of this chat completion request for
             *     use in our [model distillation](https://platform.openai.com/docs/guides/distillation) or
             *     [evals](https://platform.openai.com/docs/guides/evals) products.
             *
             *     Supports text and image inputs. Note: image inputs over 10MB will be dropped.
             *
             * @default false
             */
            store: boolean | null;
            /**
             * @description If set to true, the model response data will be streamed to the client
             *     as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
             *     See the [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)
             *     for more information, along with the [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)
             *     guide for more information on how to handle the streaming events.
             *
             * @default false
             */
            stream: boolean | null;
            stop?: components["schemas"]["StopConfiguration"];
            /**
             * @description Modify the likelihood of specified tokens appearing in the completion.
             *
             *     Accepts a JSON object that maps tokens (specified by their token ID in the
             *     tokenizer) to an associated bias value from -100 to 100. Mathematically,
             *     the bias is added to the logits generated by the model prior to sampling.
             *     The exact effect will vary per model, but values between -1 and 1 should
             *     decrease or increase likelihood of selection; values like -100 or 100
             *     should result in a ban or exclusive selection of the relevant token.
             *
             * @default null
             */
            logit_bias: {
                [key: string]: number;
            } | null;
            /**
             * @description Whether to return log probabilities of the output tokens or not. If true,
             *     returns the log probabilities of each output token returned in the
             *     `content` of `message`.
             *
             * @default false
             */
            logprobs: boolean | null;
            /**
             * @deprecated
             * @description The maximum number of [tokens](/tokenizer) that can be generated in the
             *     chat completion. This value can be used to control
             *     [costs](https://openai.com/api/pricing/) for text generated via API.
             *
             *     This value is now deprecated in favor of `max_completion_tokens`, and is
             *     not compatible with [o-series models](https://platform.openai.com/docs/guides/reasoning).
             *
             */
            max_tokens?: number | null;
            /**
             * @description How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
             * @default 1
             * @example 1
             */
            n: number | null;
            /** @description Configuration for a [Predicted Output](https://platform.openai.com/docs/guides/predicted-outputs),
             *     which can greatly improve response times when large parts of the model
             *     response are known ahead of time. This is most common when you are
             *     regenerating a file with only minor changes to most of the content.
             *      */
            prediction?: components["schemas"]["PredictionContent"] | null;
            /**
             * @deprecated
             * @description This feature is in Beta.
             *     If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
             *     Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
             *
             */
            seed?: number | null;
            stream_options?: components["schemas"]["ChatCompletionStreamOptions"];
            /** @description A list of tools the model may call. You can provide either
             *     [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools) or
             *     [function tools](https://platform.openai.com/docs/guides/function-calling).
             *      */
            tools?: (components["schemas"]["ChatCompletionTool"] | components["schemas"]["CustomToolChatCompletions"])[];
            tool_choice?: components["schemas"]["ChatCompletionToolChoiceOption"];
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            /**
             * @deprecated
             * @description Deprecated in favor of `tool_choice`.
             *
             *     Controls which (if any) function is called by the model.
             *
             *     `none` means the model will not call a function and instead generates a
             *     message.
             *
             *     `auto` means the model can pick between generating a message or calling a
             *     function.
             *
             *     Specifying a particular function via `{"name": "my_function"}` forces the
             *     model to call that function.
             *
             *     `none` is the default when no functions are present. `auto` is the default
             *     if functions are present.
             *
             */
            function_call?: ("none" | "auto") | components["schemas"]["ChatCompletionFunctionCallOption"];
            /**
             * @deprecated
             * @description Deprecated in favor of `tools`.
             *
             *     A list of functions the model may generate JSON inputs for.
             *
             */
            functions?: components["schemas"]["ChatCompletionFunctions"][];
            verbosity?: components["schemas"]["Verbosity"];
        };
        /** @description Represents a chat completion response returned by model, based on the provided input. */
        CreateChatCompletionResponse: {
            /** @description A unique identifier for the chat completion. */
            id: string;
            /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
            choices: {
                /**
                 * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                 *     `length` if the maximum number of tokens specified in the request was reached,
                 *     `content_filter` if content was omitted due to a flag from our content filters,
                 *     `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                 *
                 * @enum {string}
                 */
                finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
                /** @description The index of the choice in the list of choices. */
                index: number;
                message: components["schemas"]["ChatCompletionResponseMessage"];
                /** @description Log probability information for the choice. */
                logprobs: {
                    /** @description A list of message content tokens with log probability information. */
                    content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                    /** @description A list of message refusal tokens with log probability information. */
                    refusal: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                } | null;
            }[];
            /** @description The Unix timestamp (in seconds) of when the chat completion was created. */
            created: number;
            /** @description The model used for the chat completion. */
            model: string;
            service_tier?: components["schemas"]["ServiceTier"];
            /**
             * @deprecated
             * @description This fingerprint represents the backend configuration that the model runs with.
             *
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
             *
             */
            system_fingerprint?: string;
            /**
             * @description The object type, which is always `chat.completion`.
             * @enum {string}
             */
            object: "chat.completion";
            usage?: components["schemas"]["CompletionUsage"];
        };
        /** @description Represents a streamed chunk of a chat completion response returned
         *     by the model, based on the provided input.
         *     [Learn more](https://platform.openai.com/docs/guides/streaming-responses).
         *      */
        CreateChatCompletionStreamResponse: {
            /** @description A unique identifier for the chat completion. Each chunk has the same ID. */
            id: string;
            /** @description A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
             *     last chunk if you set `stream_options: {"include_usage": true}`.
             *      */
            choices: {
                delta: components["schemas"]["ChatCompletionStreamResponseDelta"];
                /** @description Log probability information for the choice. */
                logprobs?: {
                    /** @description A list of message content tokens with log probability information. */
                    content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                    /** @description A list of message refusal tokens with log probability information. */
                    refusal: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
                } | null;
                /**
                 * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                 *     `length` if the maximum number of tokens specified in the request was reached,
                 *     `content_filter` if content was omitted due to a flag from our content filters,
                 *     `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                 *
                 * @enum {string|null}
                 */
                finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call" | null;
                /** @description The index of the choice in the list of choices. */
                index: number;
            }[];
            /** @description The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp. */
            created: number;
            /** @description The model to generate the completion. */
            model: string;
            service_tier?: components["schemas"]["ServiceTier"];
            /**
             * @deprecated
             * @description This fingerprint represents the backend configuration that the model runs with.
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
             *
             */
            system_fingerprint?: string;
            /**
             * @description The object type, which is always `chat.completion.chunk`.
             * @enum {string}
             */
            object: "chat.completion.chunk";
            /** @description An optional field that will only be present when you set
             *     `stream_options: {"include_usage": true}` in your request. When present, it
             *     contains a null value **except for the last chunk** which contains the
             *     token usage statistics for the entire request.
             *
             *     **NOTE:** If the stream is interrupted or cancelled, you may not
             *     receive the final usage chunk which contains the total token usage for
             *     the request.
             *      */
            usage?: components["schemas"]["CompletionUsage"];
        };
        CreateCompletionRequest: {
            /** @description ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
             *      */
            model: string | ("gpt-3.5-turbo-instruct" | "davinci-002" | "babbage-002");
            /** @description The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
             *
             *     Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
             *      */
            prompt: (string | string[] | number[] | number[][]) | null;
            /**
             * @description Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
             *
             *     When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
             *
             *     **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
             *
             * @default 1
             */
            best_of: number | null;
            /**
             * @description Echo back the prompt in addition to the completion
             *
             * @default false
             */
            echo: boolean | null;
            /**
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
             *
             *     [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)
             *
             * @default 0
             */
            frequency_penalty: number | null;
            /**
             * @description Modify the likelihood of specified tokens appearing in the completion.
             *
             *     Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
             *
             *     As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
             *
             * @default null
             */
            logit_bias: {
                [key: string]: number;
            } | null;
            /**
             * @description Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
             *
             *     The maximum value for `logprobs` is 5.
             *
             * @default null
             */
            logprobs: number | null;
            /**
             * @description The maximum number of [tokens](/tokenizer) that can be generated in the completion.
             *
             *     The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
             *
             * @default 16
             * @example 16
             */
            max_tokens: number | null;
            /**
             * @description How many completions to generate for each prompt.
             *
             *     **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
             *
             * @default 1
             * @example 1
             */
            n: number | null;
            /**
             * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
             *
             *     [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/text-generation)
             *
             * @default 0
             */
            presence_penalty: number | null;
            /**
             * Format: int64
             * @description If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
             *
             *     Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
             *
             */
            seed?: number | null;
            stop?: components["schemas"]["StopConfiguration"];
            /**
             * @description Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
             *
             * @default false
             */
            stream: boolean | null;
            stream_options?: components["schemas"]["ChatCompletionStreamOptions"];
            /**
             * @description The suffix that comes after a completion of inserted text.
             *
             *     This parameter is only supported for `gpt-3.5-turbo-instruct`.
             *
             * @default null
             * @example test.
             */
            suffix: string | null;
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             *     We generally recommend altering this or `top_p` but not both.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or `temperature` but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            /**
             * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
        };
        /** @description Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
         *      */
        CreateCompletionResponse: {
            /** @description A unique identifier for the completion. */
            id: string;
            /** @description The list of completion choices the model generated for the input prompt. */
            choices: {
                /**
                 * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                 *     `length` if the maximum number of tokens specified in the request was reached,
                 *     or `content_filter` if content was omitted due to a flag from our content filters.
                 *
                 * @enum {string}
                 */
                finish_reason: "stop" | "length" | "content_filter";
                index: number;
                logprobs: {
                    text_offset?: number[];
                    token_logprobs?: number[];
                    tokens?: string[];
                    top_logprobs?: {
                        [key: string]: number;
                    }[];
                } | null;
                text: string;
            }[];
            /** @description The Unix timestamp (in seconds) of when the completion was created. */
            created: number;
            /** @description The model used for completion. */
            model: string;
            /** @description This fingerprint represents the backend configuration that the model runs with.
             *
             *     Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
             *      */
            system_fingerprint?: string;
            /**
             * @description The object type, which is always "text_completion"
             * @enum {string}
             */
            object: "text_completion";
            usage?: components["schemas"]["CompletionUsage"];
        };
        CreateContainerBody: {
            /** @description Name of the container to create. */
            name: string;
            /** @description IDs of files to copy to the container. */
            file_ids?: string[];
            /** @description Container expiration time in seconds relative to the 'anchor' time. */
            expires_after?: {
                /**
                 * @description Time anchor for the expiration time. Currently only 'last_active_at' is supported.
                 * @enum {string}
                 */
                anchor: "last_active_at";
                minutes: number;
            };
        };
        CreateContainerFileBody: {
            /** @description Name of the file to create. */
            file_id?: string;
            /**
             * Format: binary
             * @description The File object (not file name) to be uploaded.
             *
             */
            file?: string;
        };
        CreateEmbeddingRequest: {
            /**
             * @description Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for all embedding models), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. In addition to the per-input token limit, all embedding  models enforce a maximum of 300,000 tokens summed across all inputs in a  single request.
             *
             * @example The quick brown fox jumped over the lazy dog
             */
            input: string | string[] | number[] | number[][];
            /**
             * @description ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
             *
             * @example text-embedding-3-small
             */
            model: string | ("text-embedding-ada-002" | "text-embedding-3-small" | "text-embedding-3-large");
            /**
             * @description The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
             * @default float
             * @example float
             * @enum {string}
             */
            encoding_format: "float" | "base64";
            /** @description The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
             *      */
            dimensions?: number;
            /**
             * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
        };
        CreateEmbeddingResponse: {
            /** @description The list of embeddings generated by the model. */
            data: components["schemas"]["Embedding"][];
            /** @description The name of the model used to generate the embedding. */
            model: string;
            /**
             * @description The object type, which is always "list".
             * @enum {string}
             */
            object: "list";
            /** @description The usage information for the request. */
            usage: {
                /** @description The number of tokens used by the prompt. */
                prompt_tokens: number;
                /** @description The total number of tokens used by the request. */
                total_tokens: number;
            };
        };
        /**
         * CompletionsRunDataSource
         * @description A CompletionsRunDataSource object describing a model sampling configuration.
         *
         */
        CreateEvalCompletionsRunDataSource: {
            /**
             * @description The type of run data source. Always `completions`.
             * @default completions
             * @enum {string}
             */
            type: "completions";
            /** @description Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace. */
            input_messages?: {
                /**
                 * @description The type of input messages. Always `template`.
                 * @enum {string}
                 */
                type: "template";
                /** @description A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}. */
                template: (components["schemas"]["EasyInputMessage"] | components["schemas"]["EvalItem"])[];
            } | {
                /**
                 * @description The type of input messages. Always `item_reference`.
                 * @enum {string}
                 */
                type: "item_reference";
                /** @description A reference to a variable in the `item` namespace. Ie, "item.input_trajectory" */
                item_reference: string;
            };
            sampling_params?: {
                /**
                 * @description A higher temperature increases randomness in the outputs.
                 * @default 1
                 */
                temperature: number;
                /** @description The maximum number of tokens in the generated output. */
                max_completion_tokens?: number;
                /**
                 * @description An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
                 * @default 1
                 */
                top_p: number;
                /**
                 * @description A seed value to initialize the randomness, during sampling.
                 * @default 42
                 */
                seed: number;
                /** @description An object specifying the format that the model must output.
                 *
                 *     Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
                 *     Structured Outputs which ensures the model will match your supplied JSON
                 *     schema. Learn more in the [Structured Outputs
                 *     guide](https://platform.openai.com/docs/guides/structured-outputs).
                 *
                 *     Setting to `{ "type": "json_object" }` enables the older JSON mode, which
                 *     ensures the message the model generates is valid JSON. Using `json_schema`
                 *     is preferred for models that support it.
                 *      */
                response_format?: components["schemas"]["ResponseFormatText"] | components["schemas"]["ResponseFormatJsonSchema"] | components["schemas"]["ResponseFormatJsonObject"];
                /** @description A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
                 *      */
                tools?: components["schemas"]["ChatCompletionTool"][];
            };
            /** @description The name of the model to use for generating completions (e.g. "o3-mini"). */
            model?: string;
            /** @description Determines what populates the `item` namespace in this run's data source. */
            source: components["schemas"]["EvalJsonlFileContentSource"] | components["schemas"]["EvalJsonlFileIdSource"] | components["schemas"]["EvalStoredCompletionsSource"];
        };
        /**
         * CustomDataSourceConfig
         * @description A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.
         *     This schema is used to define the shape of the data that will be:
         *     - Used to define your testing criteria and
         *     - What data is required when creating a run
         *
         */
        CreateEvalCustomDataSourceConfig: {
            /**
             * @description The type of data source. Always `custom`.
             * @default custom
             * @enum {string}
             */
            type: "custom";
            /** @description The json schema for each row in the data source. */
            item_schema: {
                [key: string]: unknown;
            };
            /**
             * @description Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)
             * @default false
             */
            include_sample_schema: boolean;
        };
        /**
         * CreateEvalItem
         * @description A chat message that makes up the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}.
         */
        CreateEvalItem: {
            /** @description The role of the message (e.g. "system", "assistant", "user"). */
            role: string;
            /** @description The content of the message. */
            content: string;
        } | components["schemas"]["EvalItem"];
        /**
         * JsonlRunDataSource
         * @description A JsonlRunDataSource object with that specifies a JSONL file that matches the eval
         *
         */
        CreateEvalJsonlRunDataSource: {
            /**
             * @description The type of data source. Always `jsonl`.
             * @default jsonl
             * @enum {string}
             */
            type: "jsonl";
            /** @description Determines what populates the `item` namespace in the data source. */
            source: components["schemas"]["EvalJsonlFileContentSource"] | components["schemas"]["EvalJsonlFileIdSource"];
        };
        /**
         * LabelModelGrader
         * @description A LabelModelGrader object which uses a model to assign labels to each item
         *     in the evaluation.
         *
         */
        CreateEvalLabelModelGrader: {
            /**
             * @description The object type, which is always `label_model`.
             * @enum {string}
             */
            type: "label_model";
            /** @description The name of the grader. */
            name: string;
            /** @description The model to use for the evaluation. Must support structured outputs. */
            model: string;
            /** @description A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}. */
            input: components["schemas"]["CreateEvalItem"][];
            /** @description The labels to classify to each item in the evaluation. */
            labels: string[];
            /** @description The labels that indicate a passing result. Must be a subset of labels. */
            passing_labels: string[];
        };
        /**
         * LogsDataSourceConfig
         * @description A data source config which specifies the metadata property of your logs query.
         *     This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
         *
         */
        CreateEvalLogsDataSourceConfig: {
            /**
             * @description The type of data source. Always `logs`.
             * @default logs
             * @enum {string}
             */
            type: "logs";
            /** @description Metadata filters for the logs data source. */
            metadata?: {
                [key: string]: unknown;
            };
        };
        /** CreateEvalRequest */
        CreateEvalRequest: {
            /** @description The name of the evaluation. */
            name?: string;
            metadata?: components["schemas"]["Metadata"];
            /** @description The configuration for the data source used for the evaluation runs. Dictates the schema of the data used in the evaluation. */
            data_source_config: components["schemas"]["CreateEvalCustomDataSourceConfig"] | components["schemas"]["CreateEvalLogsDataSourceConfig"] | components["schemas"]["CreateEvalStoredCompletionsDataSourceConfig"];
            /** @description A list of graders for all eval runs in this group. Graders can reference variables in the data source using double curly braces notation, like `{{item.variable_name}}`. To reference the model's output, use the `sample` namespace (ie, `{{sample.output_text}}`). */
            testing_criteria: (components["schemas"]["CreateEvalLabelModelGrader"] | components["schemas"]["EvalGraderStringCheck"] | components["schemas"]["EvalGraderTextSimilarity"] | components["schemas"]["EvalGraderPython"] | components["schemas"]["EvalGraderScoreModel"])[];
        };
        /**
         * ResponsesRunDataSource
         * @description A ResponsesRunDataSource object describing a model sampling configuration.
         *
         */
        CreateEvalResponsesRunDataSource: {
            /**
             * @description The type of run data source. Always `responses`.
             * @default responses
             * @enum {string}
             */
            type: "responses";
            /** @description Used when sampling from a model. Dictates the structure of the messages passed into the model. Can either be a reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template with variable references to the `item` namespace. */
            input_messages?: {
                /**
                 * @description The type of input messages. Always `template`.
                 * @enum {string}
                 */
                type: "template";
                /** @description A list of chat messages forming the prompt or context. May include variable references to the `item` namespace, ie {{item.name}}. */
                template: ({
                    /** @description The role of the message (e.g. "system", "assistant", "user"). */
                    role: string;
                    /** @description The content of the message. */
                    content: string;
                } | components["schemas"]["EvalItem"])[];
            } | {
                /**
                 * @description The type of input messages. Always `item_reference`.
                 * @enum {string}
                 */
                type: "item_reference";
                /** @description A reference to a variable in the `item` namespace. Ie, "item.name" */
                item_reference: string;
            };
            sampling_params?: {
                /**
                 * @description A higher temperature increases randomness in the outputs.
                 * @default 1
                 */
                temperature: number;
                /** @description The maximum number of tokens in the generated output. */
                max_completion_tokens?: number;
                /**
                 * @description An alternative to temperature for nucleus sampling; 1.0 includes all tokens.
                 * @default 1
                 */
                top_p: number;
                /**
                 * @description A seed value to initialize the randomness, during sampling.
                 * @default 42
                 */
                seed: number;
                /** @description An array of tools the model may call while generating a response. You
                 *     can specify which tool to use by setting the `tool_choice` parameter.
                 *
                 *     The two categories of tools you can provide the model are:
                 *
                 *     - **Built-in tools**: Tools that are provided by OpenAI that extend the
                 *       model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)
                 *       or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about
                 *       [built-in tools](https://platform.openai.com/docs/guides/tools).
                 *     - **Function calls (custom tools)**: Functions that are defined by you,
                 *       enabling the model to call your own code. Learn more about
                 *       [function calling](https://platform.openai.com/docs/guides/function-calling).
                 *      */
                tools?: components["schemas"]["Tool"][];
                /** @description Configuration options for a text response from the model. Can be plain
                 *     text or structured JSON data. Learn more:
                 *     - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
                 *     - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)
                 *      */
                text?: {
                    format?: components["schemas"]["TextResponseFormatConfiguration"];
                };
            };
            /** @description The name of the model to use for generating completions (e.g. "o3-mini"). */
            model?: string;
            /** @description Determines what populates the `item` namespace in this run's data source. */
            source: components["schemas"]["EvalJsonlFileContentSource"] | components["schemas"]["EvalJsonlFileIdSource"] | components["schemas"]["EvalResponsesSource"];
        };
        /** CreateEvalRunRequest */
        CreateEvalRunRequest: {
            /** @description The name of the run. */
            name?: string;
            metadata?: components["schemas"]["Metadata"];
            /** @description Details about the run's data source. */
            data_source: components["schemas"]["CreateEvalJsonlRunDataSource"] | components["schemas"]["CreateEvalCompletionsRunDataSource"] | components["schemas"]["CreateEvalResponsesRunDataSource"];
        };
        /**
         * StoredCompletionsDataSourceConfig
         * @deprecated
         * @description Deprecated in favor of LogsDataSourceConfig.
         *
         */
        CreateEvalStoredCompletionsDataSourceConfig: {
            /**
             * @description The type of data source. Always `stored_completions`.
             * @default stored_completions
             * @enum {string}
             */
            type: "stored_completions";
            /** @description Metadata filters for the stored completions data source. */
            metadata?: {
                [key: string]: unknown;
            };
        };
        CreateFileRequest: {
            /**
             * Format: binary
             * @description The File object (not file name) to be uploaded.
             *
             */
            file: string;
            purpose: components["schemas"]["FilePurpose"];
            expires_after?: components["schemas"]["FileExpirationAfter"];
        };
        CreateFineTuningCheckpointPermissionRequest: {
            /** @description The project identifiers to grant access to. */
            project_ids: string[];
        };
        CreateFineTuningJobRequest: {
            /**
             * @description The name of the model to fine-tune. You can select one of the
             *     [supported models](https://platform.openai.com/docs/guides/fine-tuning#which-models-can-be-fine-tuned).
             *
             * @example gpt-4o-mini
             */
            model: string | ("babbage-002" | "davinci-002" | "gpt-3.5-turbo" | "gpt-4o-mini");
            /**
             * @description The ID of an uploaded file that contains training data.
             *
             *     See [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.
             *
             *     Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
             *
             *     The contents of the file should differ depending on if the model uses the [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input), [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input) format.
             *
             *     See the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.
             *
             * @example file-abc123
             */
            training_file: string;
            /**
             * @deprecated
             * @description The hyperparameters used for the fine-tuning job.
             *     This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.
             *
             */
            hyperparameters?: {
                /**
                 * @description Number of examples in each batch. A larger batch size means that model parameters
                 *     are updated less frequently, but with lower variance.
                 *
                 * @default auto
                 */
                batch_size?: "auto" | number;
                /** @description Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                 *     overfitting.
                 *      */
                learning_rate_multiplier?: "auto" | number;
                /**
                 * @description The number of epochs to train the model for. An epoch refers to one full cycle
                 *     through the training dataset.
                 *
                 * @default auto
                 */
                n_epochs?: "auto" | number;
            };
            /**
             * @description A string of up to 64 characters that will be added to your fine-tuned model name.
             *
             *     For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
             *
             * @default null
             */
            suffix: string | null;
            /**
             * @description The ID of an uploaded file that contains validation data.
             *
             *     If you provide this file, the data is used to generate validation
             *     metrics periodically during fine-tuning. These metrics can be viewed in
             *     the fine-tuning results file.
             *     The same data should not be present in both train and validation files.
             *
             *     Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
             *
             *     See the [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization) for more details.
             *
             * @example file-abc123
             */
            validation_file?: string | null;
            /** @description A list of integrations to enable for your fine-tuning job. */
            integrations?: {
                /** @description The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
                 *      */
                type: "wandb";
                /** @description The settings for your integration with Weights and Biases. This payload specifies the project that
                 *     metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
                 *     to your run, and set a default entity (team, username, etc) to be associated with your run.
                 *      */
                wandb: {
                    /**
                     * @description The name of the project that the new run will be created under.
                     *
                     * @example my-wandb-project
                     */
                    project: string;
                    /** @description A display name to set for the run. If not set, we will use the Job ID as the name.
                     *      */
                    name?: string | null;
                    /** @description The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                     *     like associated with the run. If not set, the default entity for the registered WandB API key is used.
                     *      */
                    entity?: string | null;
                    /** @description A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                     *     default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
                     *      */
                    tags?: string[];
                };
            }[] | null;
            /**
             * @description The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
             *     If a seed is not specified, one will be generated for you.
             *
             * @example 42
             */
            seed?: number | null;
            method?: components["schemas"]["FineTuneMethod"];
            metadata?: components["schemas"]["Metadata"];
        };
        CreateImageEditRequest: {
            /** @description The image(s) to edit. Must be a supported image file or an array of images.
             *
             *     For `gpt-image-1`, each image should be a `png`, `webp`, or `jpg` file less
             *     than 50MB. You can provide up to 16 images.
             *
             *     For `dall-e-2`, you can only provide one image, and it should be a square
             *     `png` file less than 4MB.
             *      */
            image: string | string[];
            /**
             * @description A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.
             * @example A cute baby sea otter wearing a beret
             */
            prompt: string;
            /**
             * Format: binary
             * @description An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. If there are multiple images provided, the mask will be applied on the first image. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
             */
            mask?: string;
            /**
             * @description Allows to set transparency for the background of the generated image(s).
             *     This parameter is only supported for `gpt-image-1`. Must be one of
             *     `transparent`, `opaque` or `auto` (default value). When `auto` is used, the
             *     model will automatically determine the best background for the image.
             *
             *     If `transparent`, the output format needs to support transparency, so it
             *     should be set to either `png` (default value) or `webp`.
             *
             * @default auto
             * @example transparent
             * @enum {string|null}
             */
            background: "transparent" | "opaque" | "auto" | null;
            /** @description The model to use for image generation. Only `dall-e-2` and `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used. */
            model?: (string | ("dall-e-2" | "gpt-image-1")) | null;
            /**
             * @description The number of images to generate. Must be between 1 and 10.
             * @default 1
             * @example 1
             */
            n: number | null;
            /**
             * @description The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`.
             * @default 1024x1024
             * @example 1024x1024
             * @enum {string|null}
             */
            size: "256x256" | "512x512" | "1024x1024" | "1536x1024" | "1024x1536" | "auto" | null;
            /**
             * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter is only supported for `dall-e-2`, as `gpt-image-1` will always return base64-encoded images.
             * @default url
             * @example url
             * @enum {string|null}
             */
            response_format: "url" | "b64_json" | null;
            /**
             * @description The format in which the generated images are returned. This parameter is
             *     only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
             *     The default value is `png`.
             *
             * @default png
             * @example png
             * @enum {string|null}
             */
            output_format: "png" | "jpeg" | "webp" | null;
            /**
             * @description The compression level (0-100%) for the generated images. This parameter
             *     is only supported for `gpt-image-1` with the `webp` or `jpeg` output
             *     formats, and defaults to 100.
             *
             * @default 100
             * @example 100
             */
            output_compression: number | null;
            /**
             * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
            input_fidelity?: components["schemas"]["ImageInputFidelity"];
            /**
             * @description Edit the image in streaming mode. Defaults to `false`. See the
             *     [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.
             *
             * @default false
             * @example false
             */
            stream: boolean | null;
            partial_images?: components["schemas"]["PartialImages"];
            /**
             * @description The quality of the image that will be generated. `high`, `medium` and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality. Defaults to `auto`.
             *
             * @default auto
             * @example high
             * @enum {string|null}
             */
            quality: "standard" | "low" | "medium" | "high" | "auto" | null;
        };
        CreateImageRequest: {
            /**
             * @description A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
             * @example A cute baby sea otter
             */
            prompt: string;
            /** @description The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used. */
            model?: (string | ("dall-e-2" | "dall-e-3" | "gpt-image-1")) | null;
            /**
             * @description The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
             * @default 1
             * @example 1
             */
            n: number | null;
            /**
             * @description The quality of the image that will be generated.
             *
             *     - `auto` (default value) will automatically select the best quality for the given model.
             *     - `high`, `medium` and `low` are supported for `gpt-image-1`.
             *     - `hd` and `standard` are supported for `dall-e-3`.
             *     - `standard` is the only option for `dall-e-2`.
             *
             * @default auto
             * @example medium
             * @enum {string|null}
             */
            quality: "standard" | "hd" | "low" | "medium" | "high" | "auto" | null;
            /**
             * @description The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images.
             * @default url
             * @example url
             * @enum {string|null}
             */
            response_format: "url" | "b64_json" | null;
            /**
             * @description The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.
             * @default png
             * @example png
             * @enum {string|null}
             */
            output_format: "png" | "jpeg" | "webp" | null;
            /**
             * @description The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100.
             * @default 100
             * @example 100
             */
            output_compression: number | null;
            /**
             * @description Generate the image in streaming mode. Defaults to `false`. See the
             *     [Image generation guide](https://platform.openai.com/docs/guides/image-generation) for more information.
             *     This parameter is only supported for `gpt-image-1`.
             *
             * @default false
             * @example false
             */
            stream: boolean | null;
            partial_images?: components["schemas"]["PartialImages"];
            /**
             * @description The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
             * @default auto
             * @example 1024x1024
             * @enum {string|null}
             */
            size: "auto" | "1024x1024" | "1536x1024" | "1024x1536" | "256x256" | "512x512" | "1792x1024" | "1024x1792" | null;
            /**
             * @description Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value).
             * @default auto
             * @example low
             * @enum {string|null}
             */
            moderation: "low" | "auto" | null;
            /**
             * @description Allows to set transparency for the background of the generated image(s).
             *     This parameter is only supported for `gpt-image-1`. Must be one of
             *     `transparent`, `opaque` or `auto` (default value). When `auto` is used, the
             *     model will automatically determine the best background for the image.
             *
             *     If `transparent`, the output format needs to support transparency, so it
             *     should be set to either `png` (default value) or `webp`.
             *
             * @default auto
             * @example transparent
             * @enum {string|null}
             */
            background: "transparent" | "opaque" | "auto" | null;
            /**
             * @description The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images.
             * @default vivid
             * @example vivid
             * @enum {string|null}
             */
            style: "vivid" | "natural" | null;
            /**
             * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
        };
        CreateImageVariationRequest: {
            /**
             * Format: binary
             * @description The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
             */
            image: string;
            /** @description The model to use for image generation. Only `dall-e-2` is supported at this time. */
            model?: (string | "dall-e-2") | null;
            /**
             * @description The number of images to generate. Must be between 1 and 10.
             * @default 1
             * @example 1
             */
            n: number | null;
            /**
             * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
             * @default url
             * @example url
             * @enum {string|null}
             */
            response_format: "url" | "b64_json" | null;
            /**
             * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
             * @default 1024x1024
             * @example 1024x1024
             * @enum {string|null}
             */
            size: "256x256" | "512x512" | "1024x1024" | null;
            /**
             * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).
             *
             * @example user-1234
             */
            user?: string;
        };
        CreateMessageRequest: {
            /**
             * @description The role of the entity that is creating the message. Allowed values include:
             *     - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
             *     - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
             *
             * @enum {string}
             */
            role: "user" | "assistant";
            content: string | (components["schemas"]["MessageContentImageFileObject"] | components["schemas"]["MessageContentImageUrlObject"] | components["schemas"]["MessageRequestContentTextObject"])[];
            /** @description A list of files attached to the message, and the tools they should be added to. */
            attachments?: {
                /** @description The ID of the file to attach to the message. */
                file_id?: string;
                /** @description The tools to add this file to. */
                tools?: (components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsFileSearchTypeOnly"])[];
            }[] | null;
            metadata?: components["schemas"]["Metadata"];
        };
        CreateModelResponseProperties: components["schemas"]["ModelResponseProperties"] & {
            /** @description An integer between 0 and 20 specifying the number of most likely tokens to
             *     return at each token position, each with an associated log probability.
             *      */
            top_logprobs?: number;
        };
        CreateModerationRequest: {
            /** @description Input (or inputs) to classify. Can be a single string, an array of strings, or
             *     an array of multi-modal input objects similar to other models.
             *      */
            input: string | string[] | (components["schemas"]["ModerationImageURLInput"] | components["schemas"]["ModerationTextInput"])[];
            /** @description The content moderation model you would like to use. Learn more in
             *     [the moderation guide](https://platform.openai.com/docs/guides/moderation), and learn about
             *     available models [here](https://platform.openai.com/docs/models#moderation).
             *      */
            model?: string | ("omni-moderation-latest" | "omni-moderation-2024-09-26" | "text-moderation-latest" | "text-moderation-stable");
        };
        /** @description Represents if a given text input is potentially harmful. */
        CreateModerationResponse: {
            /** @description The unique identifier for the moderation request. */
            id: string;
            /** @description The model used to generate the moderation results. */
            model: string;
            /** @description A list of moderation objects. */
            results: {
                /** @description Whether any of the below categories are flagged. */
                flagged: boolean;
                /** @description A list of the categories, and whether they are flagged or not. */
                categories: {
                    /** @description Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment. */
                    hate: boolean;
                    /** @description Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. */
                    "hate/threatening": boolean;
                    /** @description Content that expresses, incites, or promotes harassing language towards any target. */
                    harassment: boolean;
                    /** @description Harassment content that also includes violence or serious harm towards any target. */
                    "harassment/threatening": boolean;
                    /** @description Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category. */
                    illicit: boolean | null;
                    /** @description Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon. */
                    "illicit/violent": boolean | null;
                    /** @description Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders. */
                    "self-harm": boolean;
                    /** @description Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders. */
                    "self-harm/intent": boolean;
                    /** @description Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts. */
                    "self-harm/instructions": boolean;
                    /** @description Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness). */
                    sexual: boolean;
                    /** @description Sexual content that includes an individual who is under 18 years old. */
                    "sexual/minors": boolean;
                    /** @description Content that depicts death, violence, or physical injury. */
                    violence: boolean;
                    /** @description Content that depicts death, violence, or physical injury in graphic detail. */
                    "violence/graphic": boolean;
                };
                /** @description A list of the categories along with their scores as predicted by model. */
                category_scores: {
                    /** @description The score for the category 'hate'. */
                    hate: number;
                    /** @description The score for the category 'hate/threatening'. */
                    "hate/threatening": number;
                    /** @description The score for the category 'harassment'. */
                    harassment: number;
                    /** @description The score for the category 'harassment/threatening'. */
                    "harassment/threatening": number;
                    /** @description The score for the category 'illicit'. */
                    illicit: number;
                    /** @description The score for the category 'illicit/violent'. */
                    "illicit/violent": number;
                    /** @description The score for the category 'self-harm'. */
                    "self-harm": number;
                    /** @description The score for the category 'self-harm/intent'. */
                    "self-harm/intent": number;
                    /** @description The score for the category 'self-harm/instructions'. */
                    "self-harm/instructions": number;
                    /** @description The score for the category 'sexual'. */
                    sexual: number;
                    /** @description The score for the category 'sexual/minors'. */
                    "sexual/minors": number;
                    /** @description The score for the category 'violence'. */
                    violence: number;
                    /** @description The score for the category 'violence/graphic'. */
                    "violence/graphic": number;
                };
                /** @description A list of the categories along with the input type(s) that the score applies to. */
                category_applied_input_types: {
                    /** @description The applied input type(s) for the category 'hate'. */
                    hate: "text"[];
                    /** @description The applied input type(s) for the category 'hate/threatening'. */
                    "hate/threatening": "text"[];
                    /** @description The applied input type(s) for the category 'harassment'. */
                    harassment: "text"[];
                    /** @description The applied input type(s) for the category 'harassment/threatening'. */
                    "harassment/threatening": "text"[];
                    /** @description The applied input type(s) for the category 'illicit'. */
                    illicit: "text"[];
                    /** @description The applied input type(s) for the category 'illicit/violent'. */
                    "illicit/violent": "text"[];
                    /** @description The applied input type(s) for the category 'self-harm'. */
                    "self-harm": ("text" | "image")[];
                    /** @description The applied input type(s) for the category 'self-harm/intent'. */
                    "self-harm/intent": ("text" | "image")[];
                    /** @description The applied input type(s) for the category 'self-harm/instructions'. */
                    "self-harm/instructions": ("text" | "image")[];
                    /** @description The applied input type(s) for the category 'sexual'. */
                    sexual: ("text" | "image")[];
                    /** @description The applied input type(s) for the category 'sexual/minors'. */
                    "sexual/minors": "text"[];
                    /** @description The applied input type(s) for the category 'violence'. */
                    violence: ("text" | "image")[];
                    /** @description The applied input type(s) for the category 'violence/graphic'. */
                    "violence/graphic": ("text" | "image")[];
                };
            }[];
        };
        CreateResponse: components["schemas"]["CreateModelResponseProperties"] & components["schemas"]["ResponseProperties"] & {
            /** @description Text, image, or file inputs to the model, used to generate a response.
             *
             *     Learn more:
             *     - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
             *     - [Image inputs](https://platform.openai.com/docs/guides/images)
             *     - [File inputs](https://platform.openai.com/docs/guides/pdf-files)
             *     - [Conversation state](https://platform.openai.com/docs/guides/conversation-state)
             *     - [Function calling](https://platform.openai.com/docs/guides/function-calling)
             *      */
            input?: string | components["schemas"]["InputItem"][];
            /** @description Specify additional output data to include in the model response. Currently
             *     supported values are:
             *     - `code_interpreter_call.outputs`: Includes the outputs of python code execution
             *       in code interpreter tool call items.
             *     - `computer_call_output.output.image_url`: Include image urls from the computer call output.
             *     - `file_search_call.results`: Include the search results of
             *       the file search tool call.
             *     - `message.input_image.image_url`: Include image urls from the input message.
             *     - `message.output_text.logprobs`: Include logprobs with assistant messages.
             *     - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
             *       tokens in reasoning item outputs. This enables reasoning items to be used in
             *       multi-turn conversations when using the Responses API statelessly (like
             *       when the `store` parameter is set to `false`, or when an organization is
             *       enrolled in the zero data retention program).
             *      */
            include?: components["schemas"]["Includable"][] | null;
            /**
             * @description Whether to allow the model to run tool calls in parallel.
             *
             * @default true
             */
            parallel_tool_calls: boolean | null;
            /**
             * @description Whether to store the generated model response for later retrieval via
             *     API.
             *
             * @default true
             */
            store: boolean | null;
            /** @description A system (or developer) message inserted into the model's context.
             *
             *     When using along with `previous_response_id`, the instructions from a previous
             *     response will not be carried over to the next response. This makes it simple
             *     to swap out system (or developer) messages in new responses.
             *      */
            instructions?: string | null;
            /**
             * @description If set to true, the model response data will be streamed to the client
             *     as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
             *     See the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)
             *     for more information.
             *
             * @default false
             */
            stream: boolean | null;
            stream_options?: components["schemas"]["ResponseStreamOptions"];
        };
        CreateRunRequest: {
            /** @description The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run. */
            assistant_id: string;
            /** @description The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used. */
            model?: (string | components["schemas"]["AssistantSupportedModels"]) | null;
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /** @description Overrides the [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis. */
            instructions?: string | null;
            /** @description Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions. */
            additional_instructions?: string | null;
            /** @description Adds additional messages to the thread before creating the run. */
            additional_messages?: components["schemas"]["CreateMessageRequest"][] | null;
            /** @description Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis. */
            tools?: components["schemas"]["AssistantTool"][] | null;
            metadata?: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            /** @description If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
             *      */
            stream?: boolean | null;
            /** @description The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_prompt_tokens?: number | null;
            /** @description The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_completion_tokens?: number | null;
            truncation_strategy?: components["schemas"]["TruncationObject"] & unknown;
            tool_choice?: components["schemas"]["AssistantsApiToolChoiceOption"] & unknown;
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        CreateSpeechRequest: {
            /** @description One of the available [TTS models](https://platform.openai.com/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.
             *      */
            model: string | ("tts-1" | "tts-1-hd" | "gpt-4o-mini-tts");
            /** @description The text to generate audio for. The maximum length is 4096 characters. */
            input: string;
            /** @description Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`. */
            instructions?: string;
            /** @description The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and `verse`. Previews of the voices are available in the [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options). */
            voice: components["schemas"]["VoiceIdsShared"];
            /**
             * @description The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
             * @default mp3
             * @enum {string}
             */
            response_format: "mp3" | "opus" | "aac" | "flac" | "wav" | "pcm";
            /**
             * @description The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
             * @default 1
             */
            speed: number;
            /**
             * @description The format to stream the audio in. Supported formats are `sse` and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.
             * @default audio
             * @enum {string}
             */
            stream_format: "sse" | "audio";
        };
        CreateSpeechResponseStreamEvent: components["schemas"]["SpeechAudioDeltaEvent"] | components["schemas"]["SpeechAudioDoneEvent"];
        CreateThreadAndRunRequest: {
            /** @description The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run. */
            assistant_id: string;
            thread?: components["schemas"]["CreateThreadRequest"];
            /** @description The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used. */
            model?: (string | ("gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gpt-5-2025-08-07" | "gpt-5-mini-2025-08-07" | "gpt-5-nano-2025-08-07" | "gpt-4.1" | "gpt-4.1-mini" | "gpt-4.1-nano" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "gpt-4.1-nano-2025-04-14" | "gpt-4o" | "gpt-4o-2024-11-20" | "gpt-4o-2024-08-06" | "gpt-4o-2024-05-13" | "gpt-4o-mini" | "gpt-4o-mini-2024-07-18" | "gpt-4.5-preview" | "gpt-4.5-preview-2025-02-27" | "gpt-4-turbo" | "gpt-4-turbo-2024-04-09" | "gpt-4-0125-preview" | "gpt-4-turbo-preview" | "gpt-4-1106-preview" | "gpt-4-vision-preview" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-1106" | "gpt-3.5-turbo-0125" | "gpt-3.5-turbo-16k-0613")) | null;
            /** @description Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis. */
            instructions?: string | null;
            /** @description Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis. */
            tools?: components["schemas"]["AssistantTool"][] | null;
            /** @description A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                     *      */
                    vector_store_ids?: string[];
                };
            } | null;
            metadata?: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            /** @description If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
             *      */
            stream?: boolean | null;
            /** @description The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_prompt_tokens?: number | null;
            /** @description The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_completion_tokens?: number | null;
            truncation_strategy?: components["schemas"]["TruncationObject"] & unknown;
            tool_choice?: components["schemas"]["AssistantsApiToolChoiceOption"] & unknown;
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        /** @description Options to create a new thread. If no thread is provided when running a
         *     request, an empty thread will be created.
         *      */
        CreateThreadRequest: {
            /** @description A list of [messages](https://platform.openai.com/docs/api-reference/messages) to start the thread with. */
            messages?: components["schemas"]["CreateMessageRequest"][];
            /** @description A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                     *      */
                    vector_store_ids?: string[];
                    /** @description A helper to create a [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
                     *      */
                    vector_stores?: {
                        /** @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
                         *      */
                        file_ids?: string[];
                        /** @description The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. */
                        chunking_strategy?: {
                            /**
                             * @description Always `auto`.
                             * @enum {string}
                             */
                            type: "auto";
                        } | {
                            /**
                             * @description Always `static`.
                             * @enum {string}
                             */
                            type: "static";
                            static: {
                                /** @description The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`. */
                                max_chunk_size_tokens: number;
                                /** @description The number of tokens that overlap between chunks. The default value is `400`.
                                 *
                                 *     Note that the overlap must not exceed half of `max_chunk_size_tokens`.
                                 *      */
                                chunk_overlap_tokens: number;
                            };
                        };
                        metadata?: components["schemas"]["Metadata"];
                    }[];
                } | unknown | unknown;
            } | null;
            metadata?: components["schemas"]["Metadata"];
        };
        CreateTranscriptionRequest: {
            /**
             * Format: binary
             * @description The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
             *
             */
            file: string;
            /**
             * @description ID of the model to use. The options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source Whisper V2 model).
             *
             * @example gpt-4o-transcribe
             */
            model: string | ("whisper-1" | "gpt-4o-transcribe" | "gpt-4o-mini-transcribe");
            /** @description The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.
             *      */
            language?: string;
            /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match the audio language.
             *      */
            prompt?: string;
            response_format?: components["schemas"]["AudioResponseFormat"];
            /**
             * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
             *
             * @default 0
             */
            temperature: number;
            /**
             * @description If set to true, the model response data will be streamed to the client
             *     as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
             *     See the [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)
             *     for more information.
             *
             *     Note: Streaming is not supported for the `whisper-1` model and will be ignored.
             *
             * @default false
             */
            stream: boolean | null;
            chunking_strategy?: components["schemas"]["TranscriptionChunkingStrategy"];
            /**
             * @description The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.
             *
             * @default [
             *       "segment"
             *     ]
             */
            timestamp_granularities: ("word" | "segment")[];
            /** @description Additional information to include in the transcription response.
             *     `logprobs` will return the log probabilities of the tokens in the
             *     response to understand the model's confidence in the transcription.
             *     `logprobs` only works with response_format set to `json` and only with
             *     the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.
             *      */
            include?: components["schemas"]["TranscriptionInclude"][];
        };
        /** @description Represents a transcription response returned by model, based on the provided input. */
        CreateTranscriptionResponseJson: {
            /** @description The transcribed text. */
            text: string;
            /** @description The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array.
             *      */
            logprobs?: {
                /** @description The token in the transcription. */
                token?: string;
                /** @description The log probability of the token. */
                logprob?: number;
                /** @description The bytes of the token. */
                bytes?: number[];
            }[];
            /** @description Token usage statistics for the request. */
            usage?: components["schemas"]["TranscriptTextUsageTokens"] | components["schemas"]["TranscriptTextUsageDuration"];
        };
        CreateTranscriptionResponseStreamEvent: components["schemas"]["TranscriptTextDeltaEvent"] | components["schemas"]["TranscriptTextDoneEvent"];
        /** @description Represents a verbose json transcription response returned by model, based on the provided input. */
        CreateTranscriptionResponseVerboseJson: {
            /** @description The language of the input audio. */
            language: string;
            /** @description The duration of the input audio. */
            duration: number;
            /** @description The transcribed text. */
            text: string;
            /** @description Extracted words and their corresponding timestamps. */
            words?: components["schemas"]["TranscriptionWord"][];
            /** @description Segments of the transcribed text and their corresponding details. */
            segments?: components["schemas"]["TranscriptionSegment"][];
            usage?: components["schemas"]["TranscriptTextUsageDuration"];
        };
        CreateTranslationRequest: {
            /**
             * Format: binary
             * @description The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
             *
             */
            file: string;
            /**
             * @description ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
             *
             * @example whisper-1
             */
            model: string | "whisper-1";
            /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should be in English.
             *      */
            prompt?: string;
            /**
             * @description The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
             *
             * @default json
             * @enum {string}
             */
            response_format: "json" | "text" | "srt" | "verbose_json" | "vtt";
            /**
             * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
             *
             * @default 0
             */
            temperature: number;
        };
        CreateTranslationResponseJson: {
            text: string;
        };
        CreateTranslationResponseVerboseJson: {
            /** @description The language of the output translation (always `english`). */
            language: string;
            /** @description The duration of the input audio. */
            duration: number;
            /** @description The translated text. */
            text: string;
            /** @description Segments of the translated text and their corresponding details. */
            segments?: components["schemas"]["TranscriptionSegment"][];
        };
        CreateUploadRequest: {
            /** @description The name of the file to upload.
             *      */
            filename: string;
            /**
             * @description The intended purpose of the uploaded file.
             *
             *     See the [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).
             *
             * @enum {string}
             */
            purpose: "assistants" | "batch" | "fine-tune" | "vision";
            /** @description The number of bytes in the file you are uploading.
             *      */
            bytes: number;
            /** @description The MIME type of the file.
             *
             *     This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
             *      */
            mime_type: string;
            expires_after?: components["schemas"]["FileExpirationAfter"];
        };
        CreateVectorStoreFileBatchRequest: {
            /** @description A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files. */
            file_ids: string[];
            chunking_strategy?: components["schemas"]["ChunkingStrategyRequestParam"];
            attributes?: components["schemas"]["VectorStoreFileAttributes"];
        };
        CreateVectorStoreFileRequest: {
            /** @description A [File](https://platform.openai.com/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files. */
            file_id: string;
            chunking_strategy?: components["schemas"]["ChunkingStrategyRequestParam"];
            attributes?: components["schemas"]["VectorStoreFileAttributes"];
        };
        CreateVectorStoreRequest: {
            /** @description A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files. */
            file_ids?: string[];
            /** @description The name of the vector store. */
            name?: string;
            expires_after?: components["schemas"]["VectorStoreExpirationAfter"];
            chunking_strategy?: components["schemas"]["ChunkingStrategyRequestParam"];
            metadata?: components["schemas"]["Metadata"];
        };
        /**
         * Custom tool
         * @description A custom tool that processes input using a specified format. Learn more about
         *     [custom tools](https://platform.openai.com/docs/guides/function-calling#custom-tools).
         *
         */
        CustomTool: {
            /**
             * @description The type of the custom tool. Always `custom`.
             * @enum {string}
             */
            type: "custom";
            /** @description The name of the custom tool, used to identify it in tool calls. */
            name: string;
            /** @description Optional description of the custom tool, used to provide more context.
             *      */
            description?: string;
            /** @description The input format for the custom tool. Default is unconstrained text.
             *      */
            format?: {
                /**
                 * @description Unconstrained text format. Always `text`.
                 * @enum {string}
                 */
                type: "text";
            } | {
                /**
                 * @description Grammar format. Always `grammar`.
                 * @enum {string}
                 */
                type: "grammar";
                /** @description The grammar definition. */
                definition: string;
                /**
                 * @description The syntax of the grammar definition. One of `lark` or `regex`.
                 * @enum {string}
                 */
                syntax: "lark" | "regex";
            };
        };
        /**
         * Custom tool call
         * @description A call to a custom tool created by the model.
         *
         */
        CustomToolCall: {
            /**
             * @description The type of the custom tool call. Always `custom_tool_call`.
             *
             * @enum {string}
             */
            type: "custom_tool_call";
            /** @description The unique ID of the custom tool call in the OpenAI platform.
             *      */
            id?: string;
            /** @description An identifier used to map this custom tool call to a tool call output.
             *      */
            call_id: string;
            /** @description The name of the custom tool being called.
             *      */
            name: string;
            /** @description The input for the custom tool call generated by the model.
             *      */
            input: string;
        };
        /**
         * Custom tool call output
         * @description The output of a custom tool call from your code, being sent back to the model.
         *
         */
        CustomToolCallOutput: {
            /**
             * @description The type of the custom tool call output. Always `custom_tool_call_output`.
             *
             * @enum {string}
             */
            type: "custom_tool_call_output";
            /** @description The unique ID of the custom tool call output in the OpenAI platform.
             *      */
            id?: string;
            /** @description The call ID, used to map this custom tool call output to a custom tool call.
             *      */
            call_id: string;
            /** @description The output from the custom tool call generated by your code.
             *      */
            output: string;
        };
        /**
         * Custom tool
         * @description A custom tool that processes input using a specified format.
         *
         */
        CustomToolChatCompletions: {
            /**
             * @description The type of the custom tool. Always `custom`.
             * @enum {string}
             */
            type: "custom";
            /**
             * Custom tool properties
             * @description Properties of the custom tool.
             *
             */
            custom: {
                /** @description The name of the custom tool, used to identify it in tool calls. */
                name: string;
                /** @description Optional description of the custom tool, used to provide more context.
                 *      */
                description?: string;
                /** @description The input format for the custom tool. Default is unconstrained text.
                 *      */
                format?: {
                    /**
                     * @description Unconstrained text format. Always `text`.
                     * @enum {string}
                     */
                    type: "text";
                } | {
                    /**
                     * @description Grammar format. Always `grammar`.
                     * @enum {string}
                     */
                    type: "grammar";
                    /**
                     * Grammar format
                     * @description Your chosen grammar.
                     */
                    grammar: {
                        /** @description The grammar definition. */
                        definition: string;
                        /**
                         * @description The syntax of the grammar definition. One of `lark` or `regex`.
                         * @enum {string}
                         */
                        syntax: "lark" | "regex";
                    };
                };
            };
        };
        DeleteAssistantResponse: {
            id: string;
            deleted: boolean;
            /** @enum {string} */
            object: "assistant.deleted";
        };
        DeleteCertificateResponse: {
            /**
             * @description The object type, must be `certificate.deleted`.
             * @constant
             */
            object: "certificate.deleted";
            /** @description The ID of the certificate that was deleted. */
            id: string;
        };
        DeleteFileResponse: {
            id: string;
            /** @enum {string} */
            object: "file";
            deleted: boolean;
        };
        DeleteFineTuningCheckpointPermissionResponse: {
            /** @description The ID of the fine-tuned model checkpoint permission that was deleted. */
            id: string;
            /**
             * @description The object type, which is always "checkpoint.permission".
             * @enum {string}
             */
            object: "checkpoint.permission";
            /** @description Whether the fine-tuned model checkpoint permission was successfully deleted. */
            deleted: boolean;
        };
        DeleteMessageResponse: {
            id: string;
            deleted: boolean;
            /** @enum {string} */
            object: "thread.message.deleted";
        };
        DeleteModelResponse: {
            id: string;
            deleted: boolean;
            object: string;
        };
        DeleteThreadResponse: {
            id: string;
            deleted: boolean;
            /** @enum {string} */
            object: "thread.deleted";
        };
        DeleteVectorStoreFileResponse: {
            id: string;
            deleted: boolean;
            /** @enum {string} */
            object: "vector_store.file.deleted";
        };
        DeleteVectorStoreResponse: {
            id: string;
            deleted: boolean;
            /** @enum {string} */
            object: "vector_store.deleted";
        };
        /** @description Occurs when a stream ends. */
        DoneEvent: {
            /** @enum {string} */
            event: "done";
            /** @enum {string} */
            data: "[DONE]";
        };
        /**
         * DoubleClick
         * @description A double click action.
         *
         */
        DoubleClick: {
            /**
             * @description Specifies the event type. For a double click action, this property is
             *     always set to `double_click`.
             *
             * @default double_click
             * @enum {string}
             */
            type: "double_click";
            /** @description The x-coordinate where the double click occurred.
             *      */
            x: number;
            /** @description The y-coordinate where the double click occurred.
             *      */
            y: number;
        };
        /**
         * Drag
         * @description A drag action.
         *
         */
        Drag: {
            /**
             * @description Specifies the event type. For a drag action, this property is
             *     always set to `drag`.
             *
             * @default drag
             * @enum {string}
             */
            type: "drag";
            /** @description An array of coordinates representing the path of the drag action. Coordinates will appear as an array
             *     of objects, eg
             *     ```
             *     [
             *       { x: 100, y: 200 },
             *       { x: 200, y: 300 }
             *     ]
             *     ```
             *      */
            path: components["schemas"]["Coordinate"][];
        };
        /**
         * Input message
         * @description A message input to the model with a role indicating instruction following
         *     hierarchy. Instructions given with the `developer` or `system` role take
         *     precedence over instructions given with the `user` role. Messages with the
         *     `assistant` role are presumed to have been generated by the model in previous
         *     interactions.
         *
         */
        EasyInputMessage: {
            /**
             * @description The role of the message input. One of `user`, `assistant`, `system`, or
             *     `developer`.
             *
             * @enum {string}
             */
            role: "user" | "assistant" | "system" | "developer";
            /** @description Text, image, or audio input to the model, used to generate a response.
             *     Can also contain previous assistant responses.
             *      */
            content: string | components["schemas"]["InputMessageContentList"];
            /**
             * @description The type of the message input. Always `message`.
             *
             * @enum {string}
             */
            type?: "message";
        };
        /** @description Represents an embedding vector returned by embedding endpoint.
         *      */
        Embedding: {
            /** @description The index of the embedding in the list of embeddings. */
            index: number;
            /** @description The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](https://platform.openai.com/docs/guides/embeddings).
             *      */
            embedding: number[];
            /**
             * @description The object type, which is always "embedding".
             * @enum {string}
             */
            object: "embedding";
        };
        Error: {
            code: string | null;
            message: string;
            param: string | null;
            type: string;
        };
        /** @description Occurs when an [error](https://platform.openai.com/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout. */
        ErrorEvent: {
            /** @enum {string} */
            event: "error";
            data: components["schemas"]["Error"];
        };
        ErrorResponse: {
            error: components["schemas"]["Error"];
        };
        /**
         * Eval
         * @description An Eval object with a data source config and testing criteria.
         *     An Eval represents a task to be done for your LLM integration.
         *     Like:
         *      - Improve the quality of my chatbot
         *      - See how well my chatbot handles customer support
         *      - Check if o4-mini is better at my usecase than gpt-4o
         *
         */
        Eval: {
            /**
             * @description The object type.
             * @default eval
             * @enum {string}
             */
            object: "eval";
            /** @description Unique identifier for the evaluation. */
            id: string;
            /**
             * @description The name of the evaluation.
             * @example Chatbot effectiveness Evaluation
             */
            name: string;
            /** @description Configuration of data sources used in runs of the evaluation. */
            data_source_config: components["schemas"]["EvalCustomDataSourceConfig"] | components["schemas"]["EvalLogsDataSourceConfig"] | components["schemas"]["EvalStoredCompletionsDataSourceConfig"];
            /** @description A list of testing criteria. */
            testing_criteria: (components["schemas"]["EvalGraderLabelModel"] | components["schemas"]["EvalGraderStringCheck"] | components["schemas"]["EvalGraderTextSimilarity"] | components["schemas"]["EvalGraderPython"] | components["schemas"]["EvalGraderScoreModel"])[];
            /** @description The Unix timestamp (in seconds) for when the eval was created. */
            created_at: number;
            metadata: components["schemas"]["Metadata"];
        };
        /**
         * EvalApiError
         * @description An object representing an error response from the Eval API.
         *
         */
        EvalApiError: {
            /** @description The error code. */
            code: string;
            /** @description The error message. */
            message: string;
        };
        /**
         * CustomDataSourceConfig
         * @description A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.
         *     The response schema defines the shape of the data that will be:
         *     - Used to define your testing criteria and
         *     - What data is required when creating a run
         *
         */
        EvalCustomDataSourceConfig: {
            /**
             * @description The type of data source. Always `custom`.
             * @default custom
             * @enum {string}
             */
            type: "custom";
            /** @description The json schema for the run data source items.
             *     Learn how to build JSON schemas [here](https://json-schema.org/).
             *      */
            schema: {
                [key: string]: unknown;
            };
        };
        /** LabelModelGrader */
        EvalGraderLabelModel: components["schemas"]["GraderLabelModel"];
        /** PythonGrader */
        EvalGraderPython: components["schemas"]["GraderPython"] & {
            /** @description The threshold for the score. */
            pass_threshold?: number;
        };
        /** ScoreModelGrader */
        EvalGraderScoreModel: components["schemas"]["GraderScoreModel"] & {
            /** @description The threshold for the score. */
            pass_threshold?: number;
        };
        /** StringCheckGrader */
        EvalGraderStringCheck: components["schemas"]["GraderStringCheck"];
        /** TextSimilarityGrader */
        EvalGraderTextSimilarity: components["schemas"]["GraderTextSimilarity"] & {
            /** @description The threshold for the score. */
            pass_threshold: number;
        };
        /**
         * Eval message object
         * @description A message input to the model with a role indicating instruction following
         *     hierarchy. Instructions given with the `developer` or `system` role take
         *     precedence over instructions given with the `user` role. Messages with the
         *     `assistant` role are presumed to have been generated by the model in previous
         *     interactions.
         *
         */
        EvalItem: {
            /**
             * @description The role of the message input. One of `user`, `assistant`, `system`, or
             *     `developer`.
             *
             * @enum {string}
             */
            role: "user" | "assistant" | "system" | "developer";
            /** @description Inputs to the model - can contain template strings.
             *      */
            content: string | components["schemas"]["InputTextContent"] | {
                /**
                 * @description The type of the output text. Always `output_text`.
                 *
                 * @enum {string}
                 */
                type: "output_text";
                /** @description The text output from the model.
                 *      */
                text: string;
            } | {
                /**
                 * @description The type of the image input. Always `input_image`.
                 *
                 * @enum {string}
                 */
                type: "input_image";
                /** @description The URL of the image input.
                 *      */
                image_url: string;
                /** @description The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
                 *      */
                detail?: string;
            } | unknown[];
            /**
             * @description The type of the message input. Always `message`.
             *
             * @enum {string}
             */
            type?: "message";
        };
        /** EvalJsonlFileContentSource */
        EvalJsonlFileContentSource: {
            /**
             * @description The type of jsonl source. Always `file_content`.
             * @default file_content
             * @enum {string}
             */
            type: "file_content";
            /** @description The content of the jsonl file. */
            content: {
                item: {
                    [key: string]: unknown;
                };
                sample?: {
                    [key: string]: unknown;
                };
            }[];
        };
        /** EvalJsonlFileIdSource */
        EvalJsonlFileIdSource: {
            /**
             * @description The type of jsonl source. Always `file_id`.
             * @default file_id
             * @enum {string}
             */
            type: "file_id";
            /** @description The identifier of the file. */
            id: string;
        };
        /**
         * EvalList
         * @description An object representing a list of evals.
         *
         */
        EvalList: {
            /**
             * @description The type of this object. It is always set to "list".
             *
             * @default list
             * @enum {string}
             */
            object: "list";
            /** @description An array of eval objects.
             *      */
            data: components["schemas"]["Eval"][];
            /** @description The identifier of the first eval in the data array. */
            first_id: string;
            /** @description The identifier of the last eval in the data array. */
            last_id: string;
            /** @description Indicates whether there are more evals available. */
            has_more: boolean;
        };
        /**
         * LogsDataSourceConfig
         * @description A LogsDataSourceConfig which specifies the metadata property of your logs query.
         *     This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
         *     The schema returned by this data source config is used to defined what variables are available in your evals.
         *     `item` and `sample` are both defined when using this data source config.
         *
         */
        EvalLogsDataSourceConfig: {
            /**
             * @description The type of data source. Always `logs`.
             * @default logs
             * @enum {string}
             */
            type: "logs";
            metadata?: components["schemas"]["Metadata"];
            /** @description The json schema for the run data source items.
             *     Learn how to build JSON schemas [here](https://json-schema.org/).
             *      */
            schema: {
                [key: string]: unknown;
            };
        };
        /**
         * EvalResponsesSource
         * @description A EvalResponsesSource object describing a run data source configuration.
         *
         */
        EvalResponsesSource: {
            /**
             * @description The type of run data source. Always `responses`.
             * @enum {string}
             */
            type: "responses";
            /** @description Metadata filter for the responses. This is a query parameter used to select responses. */
            metadata?: Record<string, never> | null;
            /** @description The name of the model to find responses for. This is a query parameter used to select responses. */
            model?: string | null;
            /** @description Optional string to search the 'instructions' field. This is a query parameter used to select responses. */
            instructions_search?: string | null;
            /** @description Only include items created after this timestamp (inclusive). This is a query parameter used to select responses. */
            created_after?: number | null;
            /** @description Only include items created before this timestamp (inclusive). This is a query parameter used to select responses. */
            created_before?: number | null;
            /** @description Optional reasoning effort parameter. This is a query parameter used to select responses. */
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /** @description Sampling temperature. This is a query parameter used to select responses. */
            temperature?: number | null;
            /** @description Nucleus sampling parameter. This is a query parameter used to select responses. */
            top_p?: number | null;
            /** @description List of user identifiers. This is a query parameter used to select responses. */
            users?: string[] | null;
            /** @description List of tool names. This is a query parameter used to select responses. */
            tools?: string[] | null;
        };
        /**
         * EvalRun
         * @description A schema representing an evaluation run.
         *
         */
        EvalRun: {
            /**
             * @description The type of the object. Always "eval.run".
             * @default eval.run
             * @enum {string}
             */
            object: "eval.run";
            /** @description Unique identifier for the evaluation run. */
            id: string;
            /** @description The identifier of the associated evaluation. */
            eval_id: string;
            /** @description The status of the evaluation run. */
            status: string;
            /** @description The model that is evaluated, if applicable. */
            model: string;
            /** @description The name of the evaluation run. */
            name: string;
            /** @description Unix timestamp (in seconds) when the evaluation run was created. */
            created_at: number;
            /** @description The URL to the rendered evaluation run report on the UI dashboard. */
            report_url: string;
            /** @description Counters summarizing the outcomes of the evaluation run. */
            result_counts: {
                /** @description Total number of executed output items. */
                total: number;
                /** @description Number of output items that resulted in an error. */
                errored: number;
                /** @description Number of output items that failed to pass the evaluation. */
                failed: number;
                /** @description Number of output items that passed the evaluation. */
                passed: number;
            };
            /** @description Usage statistics for each model during the evaluation run. */
            per_model_usage: {
                /** @description The name of the model. */
                model_name: string;
                /** @description The number of invocations. */
                invocation_count: number;
                /** @description The number of prompt tokens used. */
                prompt_tokens: number;
                /** @description The number of completion tokens generated. */
                completion_tokens: number;
                /** @description The total number of tokens used. */
                total_tokens: number;
                /** @description The number of tokens retrieved from cache. */
                cached_tokens: number;
            }[];
            /** @description Results per testing criteria applied during the evaluation run. */
            per_testing_criteria_results: {
                /** @description A description of the testing criteria. */
                testing_criteria: string;
                /** @description Number of tests passed for this criteria. */
                passed: number;
                /** @description Number of tests failed for this criteria. */
                failed: number;
            }[];
            /** @description Information about the run's data source. */
            data_source: components["schemas"]["CreateEvalJsonlRunDataSource"] | components["schemas"]["CreateEvalCompletionsRunDataSource"] | components["schemas"]["CreateEvalResponsesRunDataSource"];
            metadata: components["schemas"]["Metadata"];
            error: components["schemas"]["EvalApiError"];
        };
        /**
         * EvalRunList
         * @description An object representing a list of runs for an evaluation.
         *
         */
        EvalRunList: {
            /**
             * @description The type of this object. It is always set to "list".
             *
             * @default list
             * @enum {string}
             */
            object: "list";
            /** @description An array of eval run objects.
             *      */
            data: components["schemas"]["EvalRun"][];
            /** @description The identifier of the first eval run in the data array. */
            first_id: string;
            /** @description The identifier of the last eval run in the data array. */
            last_id: string;
            /** @description Indicates whether there are more evals available. */
            has_more: boolean;
        };
        /**
         * EvalRunOutputItem
         * @description A schema representing an evaluation run output item.
         *
         */
        EvalRunOutputItem: {
            /**
             * @description The type of the object. Always "eval.run.output_item".
             * @default eval.run.output_item
             * @enum {string}
             */
            object: "eval.run.output_item";
            /** @description Unique identifier for the evaluation run output item. */
            id: string;
            /** @description The identifier of the evaluation run associated with this output item. */
            run_id: string;
            /** @description The identifier of the evaluation group. */
            eval_id: string;
            /** @description Unix timestamp (in seconds) when the evaluation run was created. */
            created_at: number;
            /** @description The status of the evaluation run. */
            status: string;
            /** @description The identifier for the data source item. */
            datasource_item_id: number;
            /** @description Details of the input data source item. */
            datasource_item: {
                [key: string]: unknown;
            };
            /** @description A list of results from the evaluation run. */
            results: {
                [key: string]: unknown;
            }[];
            /** @description A sample containing the input and output of the evaluation run. */
            sample: {
                /** @description An array of input messages. */
                input: {
                    /** @description The role of the message sender (e.g., system, user, developer). */
                    role: string;
                    /** @description The content of the message. */
                    content: string;
                }[];
                /** @description An array of output messages. */
                output: {
                    /** @description The role of the message (e.g. "system", "assistant", "user"). */
                    role?: string;
                    /** @description The content of the message. */
                    content?: string;
                }[];
                /** @description The reason why the sample generation was finished. */
                finish_reason: string;
                /** @description The model used for generating the sample. */
                model: string;
                /** @description Token usage details for the sample. */
                usage: {
                    /** @description The total number of tokens used. */
                    total_tokens: number;
                    /** @description The number of completion tokens generated. */
                    completion_tokens: number;
                    /** @description The number of prompt tokens used. */
                    prompt_tokens: number;
                    /** @description The number of tokens retrieved from cache. */
                    cached_tokens: number;
                };
                error: components["schemas"]["EvalApiError"];
                /** @description The sampling temperature used. */
                temperature: number;
                /** @description The maximum number of tokens allowed for completion. */
                max_completion_tokens: number;
                /** @description The top_p value used for sampling. */
                top_p: number;
                /** @description The seed used for generating the sample. */
                seed: number;
            };
        };
        /**
         * EvalRunOutputItemList
         * @description An object representing a list of output items for an evaluation run.
         *
         */
        EvalRunOutputItemList: {
            /**
             * @description The type of this object. It is always set to "list".
             *
             * @default list
             * @enum {string}
             */
            object: "list";
            /** @description An array of eval run output item objects.
             *      */
            data: components["schemas"]["EvalRunOutputItem"][];
            /** @description The identifier of the first eval run output item in the data array. */
            first_id: string;
            /** @description The identifier of the last eval run output item in the data array. */
            last_id: string;
            /** @description Indicates whether there are more eval run output items available. */
            has_more: boolean;
        };
        /**
         * StoredCompletionsDataSourceConfig
         * @deprecated
         * @description Deprecated in favor of LogsDataSourceConfig.
         *
         */
        EvalStoredCompletionsDataSourceConfig: {
            /**
             * @description The type of data source. Always `stored_completions`.
             * @default stored_completions
             * @enum {string}
             */
            type: "stored_completions";
            metadata?: components["schemas"]["Metadata"];
            /** @description The json schema for the run data source items.
             *     Learn how to build JSON schemas [here](https://json-schema.org/).
             *      */
            schema: {
                [key: string]: unknown;
            };
        };
        /**
         * StoredCompletionsRunDataSource
         * @description A StoredCompletionsRunDataSource configuration describing a set of filters
         *
         */
        EvalStoredCompletionsSource: {
            /**
             * @description The type of source. Always `stored_completions`.
             * @default stored_completions
             * @enum {string}
             */
            type: "stored_completions";
            metadata?: components["schemas"]["Metadata"];
            /** @description An optional model to filter by (e.g., 'gpt-4o'). */
            model?: string | null;
            /** @description An optional Unix timestamp to filter items created after this time. */
            created_after?: number | null;
            /** @description An optional Unix timestamp to filter items created before this time. */
            created_before?: number | null;
            /** @description An optional maximum number of items to return. */
            limit?: number | null;
        };
        /**
         * File expiration policy
         * @description The expiration policy for a file. By default, files with `purpose=batch` expire after 30 days and all other files are persisted until they are manually deleted.
         */
        FileExpirationAfter: {
            /**
             * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `created_at`.
             * @enum {string}
             */
            anchor: "created_at";
            /** @description The number of seconds after the anchor time that the file will expire. Must be between 3600 (1 hour) and 2592000 (30 days). */
            seconds: number;
        };
        /**
         * File path
         * @description A path to a file.
         *
         */
        FilePath: {
            /**
             * @description The type of the file path. Always `file_path`.
             *
             * @enum {string}
             */
            type: "file_path";
            /** @description The ID of the file.
             *      */
            file_id: string;
            /** @description The index of the file in the list of files.
             *      */
            index: number;
        };
        /**
         * @description The ranker to use for the file search. If not specified will use the `auto` ranker.
         * @enum {string}
         */
        FileSearchRanker: "auto" | "default_2024_08_21";
        /**
         * File search tool call ranking options
         * @description The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
         *
         *     See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
         *
         */
        FileSearchRankingOptions: {
            ranker?: components["schemas"]["FileSearchRanker"];
            /** @description The score threshold for the file search. All values must be a floating point number between 0 and 1. */
            score_threshold: number;
        };
        /**
         * File search tool call
         * @description The results of a file search tool call. See the
         *     [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
         *
         */
        FileSearchToolCall: {
            /** @description The unique ID of the file search tool call.
             *      */
            id: string;
            /**
             * @description The type of the file search tool call. Always `file_search_call`.
             *
             * @enum {string}
             */
            type: "file_search_call";
            /**
             * @description The status of the file search tool call. One of `in_progress`,
             *     `searching`, `incomplete` or `failed`,
             *
             * @enum {string}
             */
            status: "in_progress" | "searching" | "completed" | "incomplete" | "failed";
            /** @description The queries used to search for files.
             *      */
            queries: string[];
            /** @description The results of the file search tool call.
             *      */
            results?: {
                /** @description The unique ID of the file.
                 *      */
                file_id?: string;
                /** @description The text that was retrieved from the file.
                 *      */
                text?: string;
                /** @description The name of the file.
                 *      */
                filename?: string;
                attributes?: components["schemas"]["VectorStoreFileAttributes"];
                /**
                 * Format: float
                 * @description The relevance score of the file - a value between 0 and 1.
                 *
                 */
                score?: number;
            }[] | null;
        };
        FineTuneChatCompletionRequestAssistantMessage: {
            /**
             * @description Controls whether the assistant message is trained against (0 or 1)
             * @enum {integer}
             */
            weight?: 0 | 1;
        } & WithRequired<components["schemas"]["ChatCompletionRequestAssistantMessage"], "role">;
        /** @description The per-line training example of a fine-tuning input file for chat models using the supervised method.
         *     Input messages may contain text or image content only. Audio and file input messages
         *     are not currently supported for fine-tuning.
         *      */
        FineTuneChatRequestInput: {
            messages?: (components["schemas"]["ChatCompletionRequestSystemMessage"] | components["schemas"]["ChatCompletionRequestUserMessage"] | components["schemas"]["FineTuneChatCompletionRequestAssistantMessage"] | components["schemas"]["ChatCompletionRequestToolMessage"] | components["schemas"]["ChatCompletionRequestFunctionMessage"])[];
            /** @description A list of tools the model may generate JSON inputs for. */
            tools?: components["schemas"]["ChatCompletionTool"][];
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            /**
             * @deprecated
             * @description A list of functions the model may generate JSON inputs for.
             */
            functions?: components["schemas"]["ChatCompletionFunctions"][];
        };
        /** @description The hyperparameters used for the DPO fine-tuning job. */
        FineTuneDPOHyperparameters: {
            /** @description The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.
             *      */
            beta?: "auto" | number;
            /**
             * @description Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
             *
             * @default auto
             */
            batch_size?: "auto" | number;
            /** @description Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
             *      */
            learning_rate_multiplier?: "auto" | number;
            /**
             * @description The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
             *
             * @default auto
             */
            n_epochs?: "auto" | number;
        };
        /** @description Configuration for the DPO fine-tuning method. */
        FineTuneDPOMethod: {
            hyperparameters?: components["schemas"]["FineTuneDPOHyperparameters"];
        };
        /** @description The method used for fine-tuning. */
        FineTuneMethod: {
            /**
             * @description The type of method. Is either `supervised`, `dpo`, or `reinforcement`.
             * @enum {string}
             */
            type: "supervised" | "dpo" | "reinforcement";
            supervised?: components["schemas"]["FineTuneSupervisedMethod"];
            dpo?: components["schemas"]["FineTuneDPOMethod"];
            reinforcement?: components["schemas"]["FineTuneReinforcementMethod"];
        };
        /** @description The per-line training example of a fine-tuning input file for chat models using the dpo method.
         *     Input messages may contain text or image content only. Audio and file input messages
         *     are not currently supported for fine-tuning.
         *      */
        FineTunePreferenceRequestInput: {
            input?: {
                messages?: (components["schemas"]["ChatCompletionRequestSystemMessage"] | components["schemas"]["ChatCompletionRequestUserMessage"] | components["schemas"]["FineTuneChatCompletionRequestAssistantMessage"] | components["schemas"]["ChatCompletionRequestToolMessage"] | components["schemas"]["ChatCompletionRequestFunctionMessage"])[];
                /** @description A list of tools the model may generate JSON inputs for. */
                tools?: components["schemas"]["ChatCompletionTool"][];
                parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            };
            /** @description The preferred completion message for the output. */
            preferred_output?: components["schemas"]["ChatCompletionRequestAssistantMessage"][];
            /** @description The non-preferred completion message for the output. */
            non_preferred_output?: components["schemas"]["ChatCompletionRequestAssistantMessage"][];
        };
        /** @description The hyperparameters used for the reinforcement fine-tuning job. */
        FineTuneReinforcementHyperparameters: {
            /**
             * @description Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
             *
             * @default auto
             */
            batch_size?: "auto" | number;
            /** @description Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
             *      */
            learning_rate_multiplier?: "auto" | number;
            /**
             * @description The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
             *
             * @default auto
             */
            n_epochs?: "auto" | number;
            /**
             * @description Level of reasoning effort.
             *
             * @default default
             * @enum {string}
             */
            reasoning_effort?: "default" | "low" | "medium" | "high";
            /** @description Multiplier on amount of compute used for exploring search space during training.
             *      */
            compute_multiplier?: "auto" | number;
            /**
             * @description The number of training steps between evaluation runs.
             *
             * @default auto
             */
            eval_interval?: "auto" | number;
            /**
             * @description Number of evaluation samples to generate per training step.
             *
             * @default auto
             */
            eval_samples?: "auto" | number;
        };
        /** @description Configuration for the reinforcement fine-tuning method. */
        FineTuneReinforcementMethod: {
            /** @description The grader used for the fine-tuning job. */
            grader: components["schemas"]["GraderStringCheck"] | components["schemas"]["GraderTextSimilarity"] | components["schemas"]["GraderPython"] | components["schemas"]["GraderScoreModel"] | components["schemas"]["GraderMulti"];
            hyperparameters?: components["schemas"]["FineTuneReinforcementHyperparameters"];
        };
        /** @description Per-line training example for reinforcement fine-tuning. Note that `messages` and `tools` are the only reserved keywords.
         *     Any other arbitrary key-value data can be included on training datapoints and will be available to reference during grading under the `{{ item.XXX }}` template variable.
         *     Input messages may contain text or image content only. Audio and file input messages
         *     are not currently supported for fine-tuning.
         *      */
        FineTuneReinforcementRequestInput: {
            messages: (components["schemas"]["ChatCompletionRequestDeveloperMessage"] | components["schemas"]["ChatCompletionRequestUserMessage"] | components["schemas"]["FineTuneChatCompletionRequestAssistantMessage"] | components["schemas"]["ChatCompletionRequestToolMessage"])[];
            /** @description A list of tools the model may generate JSON inputs for. */
            tools?: components["schemas"]["ChatCompletionTool"][];
        };
        /** @description The hyperparameters used for the fine-tuning job. */
        FineTuneSupervisedHyperparameters: {
            /**
             * @description Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
             *
             * @default auto
             */
            batch_size?: "auto" | number;
            /** @description Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.
             *      */
            learning_rate_multiplier?: "auto" | number;
            /**
             * @description The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
             *
             * @default auto
             */
            n_epochs?: "auto" | number;
        };
        /** @description Configuration for the supervised fine-tuning method. */
        FineTuneSupervisedMethod: {
            hyperparameters?: components["schemas"]["FineTuneSupervisedHyperparameters"];
        };
        /**
         * FineTuningCheckpointPermission
         * @description The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint.
         *
         */
        FineTuningCheckpointPermission: {
            /** @description The permission identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The Unix timestamp (in seconds) for when the permission was created. */
            created_at: number;
            /** @description The project identifier that the permission is for. */
            project_id: string;
            /**
             * @description The object type, which is always "checkpoint.permission".
             * @enum {string}
             */
            object: "checkpoint.permission";
        };
        /** Fine-Tuning Job Integration */
        FineTuningIntegration: {
            /**
             * @description The type of the integration being enabled for the fine-tuning job
             * @enum {string}
             */
            type: "wandb";
            /** @description The settings for your integration with Weights and Biases. This payload specifies the project that
             *     metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
             *     to your run, and set a default entity (team, username, etc) to be associated with your run.
             *      */
            wandb: {
                /**
                 * @description The name of the project that the new run will be created under.
                 *
                 * @example my-wandb-project
                 */
                project: string;
                /** @description A display name to set for the run. If not set, we will use the Job ID as the name.
                 *      */
                name?: string | null;
                /** @description The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                 *     like associated with the run. If not set, the default entity for the registered WandB API key is used.
                 *      */
                entity?: string | null;
                /** @description A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                 *     default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
                 *      */
                tags?: string[];
            };
        };
        /**
         * FineTuningJob
         * @description The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
         *
         */
        FineTuningJob: {
            /** @description The object identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The Unix timestamp (in seconds) for when the fine-tuning job was created. */
            created_at: number;
            /** @description For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure. */
            error: {
                /** @description A machine-readable error code. */
                code: string;
                /** @description A human-readable error message. */
                message: string;
                /** @description The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific. */
                param: string | null;
            } | null;
            /** @description The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running. */
            fine_tuned_model: string | null;
            /** @description The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running. */
            finished_at: number | null;
            /** @description The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs. */
            hyperparameters: {
                /** @description Number of examples in each batch. A larger batch size means that model parameters
                 *     are updated less frequently, but with lower variance.
                 *      */
                batch_size?: ("auto" | number) | null;
                /** @description Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
                 *     overfitting.
                 *      */
                learning_rate_multiplier?: "auto" | number;
                /**
                 * @description The number of epochs to train the model for. An epoch refers to one full cycle
                 *     through the training dataset.
                 *
                 * @default auto
                 */
                n_epochs?: "auto" | number;
            };
            /** @description The base model that is being fine-tuned. */
            model: string;
            /**
             * @description The object type, which is always "fine_tuning.job".
             * @enum {string}
             */
            object: "fine_tuning.job";
            /** @description The organization that owns the fine-tuning job. */
            organization_id: string;
            /** @description The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents). */
            result_files: string[];
            /**
             * @description The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
             * @enum {string}
             */
            status: "validating_files" | "queued" | "running" | "succeeded" | "failed" | "cancelled";
            /** @description The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running. */
            trained_tokens: number | null;
            /** @description The file ID used for training. You can retrieve the training data with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents). */
            training_file: string;
            /** @description The file ID used for validation. You can retrieve the validation results with the [Files API](https://platform.openai.com/docs/api-reference/files/retrieve-contents). */
            validation_file: string | null;
            /** @description A list of integrations to enable for this fine-tuning job. */
            integrations?: components["schemas"]["FineTuningIntegration"][] | null;
            /** @description The seed used for the fine-tuning job. */
            seed: number;
            /** @description The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running. */
            estimated_finish?: number | null;
            method?: components["schemas"]["FineTuneMethod"];
            metadata?: components["schemas"]["Metadata"];
        };
        /**
         * FineTuningJobCheckpoint
         * @description The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
         *
         */
        FineTuningJobCheckpoint: {
            /** @description The checkpoint identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The Unix timestamp (in seconds) for when the checkpoint was created. */
            created_at: number;
            /** @description The name of the fine-tuned checkpoint model that is created. */
            fine_tuned_model_checkpoint: string;
            /** @description The step number that the checkpoint was created at. */
            step_number: number;
            /** @description Metrics at the step number during the fine-tuning job. */
            metrics: {
                step?: number;
                train_loss?: number;
                train_mean_token_accuracy?: number;
                valid_loss?: number;
                valid_mean_token_accuracy?: number;
                full_valid_loss?: number;
                full_valid_mean_token_accuracy?: number;
            };
            /** @description The name of the fine-tuning job that this checkpoint was created from. */
            fine_tuning_job_id: string;
            /**
             * @description The object type, which is always "fine_tuning.job.checkpoint".
             * @enum {string}
             */
            object: "fine_tuning.job.checkpoint";
        };
        /** @description Fine-tuning job event object */
        FineTuningJobEvent: {
            /**
             * @description The object type, which is always "fine_tuning.job.event".
             * @enum {string}
             */
            object: "fine_tuning.job.event";
            /** @description The object identifier. */
            id: string;
            /** @description The Unix timestamp (in seconds) for when the fine-tuning job was created. */
            created_at: number;
            /**
             * @description The log level of the event.
             * @enum {string}
             */
            level: "info" | "warn" | "error";
            /** @description The message of the event. */
            message: string;
            /**
             * @description The type of event.
             * @enum {string}
             */
            type?: "message" | "metrics";
            /** @description The data associated with the event. */
            data?: Record<string, never>;
        };
        FunctionObject: {
            /** @description A description of what the function does, used by the model to choose when and how to call the function. */
            description?: string;
            /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
            name: string;
            parameters?: components["schemas"]["FunctionParameters"];
            /**
             * @description Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](https://platform.openai.com/docs/guides/function-calling).
             * @default false
             */
            strict: boolean | null;
        };
        /** @description The parameters the functions accepts, described as a JSON Schema object. See the [guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
         *
         *     Omitting `parameters` defines a function with an empty parameter list. */
        FunctionParameters: {
            [key: string]: unknown;
        };
        /**
         * Function tool call
         * @description A tool call to run a function. See the
         *     [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
         *
         */
        FunctionToolCall: {
            /** @description The unique ID of the function tool call.
             *      */
            id?: string;
            /**
             * @description The type of the function tool call. Always `function_call`.
             *
             * @enum {string}
             */
            type: "function_call";
            /** @description The unique ID of the function tool call generated by the model.
             *      */
            call_id: string;
            /** @description The name of the function to run.
             *      */
            name: string;
            /** @description A JSON string of the arguments to pass to the function.
             *      */
            arguments: string;
            /**
             * @description The status of the item. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when items are returned via API.
             *
             * @enum {string}
             */
            status?: "in_progress" | "completed" | "incomplete";
        };
        /**
         * Function tool call output
         * @description The output of a function tool call.
         *
         */
        FunctionToolCallOutput: {
            /** @description The unique ID of the function tool call output. Populated when this item
             *     is returned via API.
             *      */
            id?: string;
            /**
             * @description The type of the function tool call output. Always `function_call_output`.
             *
             * @enum {string}
             */
            type: "function_call_output";
            /** @description The unique ID of the function tool call generated by the model.
             *      */
            call_id: string;
            /** @description A JSON string of the output of the function tool call.
             *      */
            output: string;
            /**
             * @description The status of the item. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when items are returned via API.
             *
             * @enum {string}
             */
            status?: "in_progress" | "completed" | "incomplete";
        };
        FunctionToolCallOutputResource: components["schemas"]["FunctionToolCallOutput"] & {
            /** @description The unique ID of the function call tool output.
             *      */
            id: string;
        };
        FunctionToolCallResource: components["schemas"]["FunctionToolCall"] & {
            /** @description The unique ID of the function tool call.
             *      */
            id: string;
        };
        /**
         * LabelModelGrader
         * @description A LabelModelGrader object which uses a model to assign labels to each item
         *     in the evaluation.
         *
         */
        GraderLabelModel: {
            /**
             * @description The object type, which is always `label_model`.
             * @enum {string}
             */
            type: "label_model";
            /** @description The name of the grader. */
            name: string;
            /** @description The model to use for the evaluation. Must support structured outputs. */
            model: string;
            input: components["schemas"]["EvalItem"][];
            /** @description The labels to assign to each item in the evaluation. */
            labels: string[];
            /** @description The labels that indicate a passing result. Must be a subset of labels. */
            passing_labels: string[];
        };
        /**
         * MultiGrader
         * @description A MultiGrader object combines the output of multiple graders to produce a single score.
         */
        GraderMulti: {
            /**
             * @description The object type, which is always `multi`.
             * @default multi
             * @enum {string}
             */
            type: "multi";
            /** @description The name of the grader. */
            name: string;
            graders: components["schemas"]["GraderStringCheck"] | components["schemas"]["GraderTextSimilarity"] | components["schemas"]["GraderPython"] | components["schemas"]["GraderScoreModel"] | components["schemas"]["GraderLabelModel"];
            /** @description A formula to calculate the output based on grader results. */
            calculate_output: string;
        };
        /**
         * PythonGrader
         * @description A PythonGrader object that runs a python script on the input.
         *
         */
        GraderPython: {
            /**
             * @description The object type, which is always `python`.
             * @enum {string}
             */
            type: "python";
            /** @description The name of the grader. */
            name: string;
            /** @description The source code of the python script. */
            source: string;
            /** @description The image tag to use for the python script. */
            image_tag?: string;
        };
        /**
         * ScoreModelGrader
         * @description A ScoreModelGrader object that uses a model to assign a score to the input.
         *
         */
        GraderScoreModel: {
            /**
             * @description The object type, which is always `score_model`.
             * @enum {string}
             */
            type: "score_model";
            /** @description The name of the grader. */
            name: string;
            /** @description The model to use for the evaluation. */
            model: string;
            /** @description The sampling parameters for the model. */
            sampling_params?: Record<string, never>;
            /** @description The input text. This may include template strings. */
            input: components["schemas"]["EvalItem"][];
            /** @description The range of the score. Defaults to `[0, 1]`. */
            range?: number[];
        };
        /**
         * StringCheckGrader
         * @description A StringCheckGrader object that performs a string comparison between input and reference using a specified operation.
         *
         */
        GraderStringCheck: {
            /**
             * @description The object type, which is always `string_check`.
             * @enum {string}
             */
            type: "string_check";
            /** @description The name of the grader. */
            name: string;
            /** @description The input text. This may include template strings. */
            input: string;
            /** @description The reference text. This may include template strings. */
            reference: string;
            /**
             * @description The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`.
             * @enum {string}
             */
            operation: "eq" | "ne" | "like" | "ilike";
        };
        /**
         * TextSimilarityGrader
         * @description A TextSimilarityGrader object which grades text based on similarity metrics.
         *
         */
        GraderTextSimilarity: {
            /**
             * @description The type of grader.
             * @default text_similarity
             * @enum {string}
             */
            type: "text_similarity";
            /** @description The name of the grader. */
            name: string;
            /** @description The text being graded. */
            input: string;
            /** @description The text being graded against. */
            reference: string;
            /**
             * @description The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`.
             * @enum {string}
             */
            evaluation_metric: "fuzzy_match" | "bleu" | "gleu" | "meteor" | "rouge_1" | "rouge_2" | "rouge_3" | "rouge_4" | "rouge_5" | "rouge_l";
        };
        /** @description Represents the content or the URL of an image generated by the OpenAI API. */
        Image: {
            /** @description The base64-encoded JSON of the generated image. Default value for `gpt-image-1`, and only present if `response_format` is set to `b64_json` for `dall-e-2` and `dall-e-3`. */
            b64_json?: string;
            /** @description When using `dall-e-2` or `dall-e-3`, the URL of the generated image if `response_format` is set to `url` (default value). Unsupported for `gpt-image-1`. */
            url?: string;
            /** @description For `dall-e-3` only, the revised prompt that was used to generate the image. */
            revised_prompt?: string;
        };
        /** @description Emitted when image editing has completed and the final image is available.
         *      */
        ImageEditCompletedEvent: {
            /**
             * @description The type of the event. Always `image_edit.completed`.
             *
             * @enum {string}
             */
            type: "image_edit.completed";
            /** @description Base64-encoded final edited image data, suitable for rendering as an image.
             *      */
            b64_json: string;
            /** @description The Unix timestamp when the event was created.
             *      */
            created_at: number;
            /**
             * @description The size of the edited image.
             *
             * @enum {string}
             */
            size: "1024x1024" | "1024x1536" | "1536x1024" | "auto";
            /**
             * @description The quality setting for the edited image.
             *
             * @enum {string}
             */
            quality: "low" | "medium" | "high" | "auto";
            /**
             * @description The background setting for the edited image.
             *
             * @enum {string}
             */
            background: "transparent" | "opaque" | "auto";
            /**
             * @description The output format for the edited image.
             *
             * @enum {string}
             */
            output_format: "png" | "webp" | "jpeg";
            usage: components["schemas"]["ImagesUsage"];
        };
        /** @description Emitted when a partial image is available during image editing streaming.
         *      */
        ImageEditPartialImageEvent: {
            /**
             * @description The type of the event. Always `image_edit.partial_image`.
             *
             * @enum {string}
             */
            type: "image_edit.partial_image";
            /** @description Base64-encoded partial image data, suitable for rendering as an image.
             *      */
            b64_json: string;
            /** @description The Unix timestamp when the event was created.
             *      */
            created_at: number;
            /**
             * @description The size of the requested edited image.
             *
             * @enum {string}
             */
            size: "1024x1024" | "1024x1536" | "1536x1024" | "auto";
            /**
             * @description The quality setting for the requested edited image.
             *
             * @enum {string}
             */
            quality: "low" | "medium" | "high" | "auto";
            /**
             * @description The background setting for the requested edited image.
             *
             * @enum {string}
             */
            background: "transparent" | "opaque" | "auto";
            /**
             * @description The output format for the requested edited image.
             *
             * @enum {string}
             */
            output_format: "png" | "webp" | "jpeg";
            /** @description 0-based index for the partial image (streaming).
             *      */
            partial_image_index: number;
        };
        ImageEditStreamEvent: components["schemas"]["ImageEditPartialImageEvent"] | components["schemas"]["ImageEditCompletedEvent"];
        /** @description Emitted when image generation has completed and the final image is available.
         *      */
        ImageGenCompletedEvent: {
            /**
             * @description The type of the event. Always `image_generation.completed`.
             *
             * @enum {string}
             */
            type: "image_generation.completed";
            /** @description Base64-encoded image data, suitable for rendering as an image.
             *      */
            b64_json: string;
            /** @description The Unix timestamp when the event was created.
             *      */
            created_at: number;
            /**
             * @description The size of the generated image.
             *
             * @enum {string}
             */
            size: "1024x1024" | "1024x1536" | "1536x1024" | "auto";
            /**
             * @description The quality setting for the generated image.
             *
             * @enum {string}
             */
            quality: "low" | "medium" | "high" | "auto";
            /**
             * @description The background setting for the generated image.
             *
             * @enum {string}
             */
            background: "transparent" | "opaque" | "auto";
            /**
             * @description The output format for the generated image.
             *
             * @enum {string}
             */
            output_format: "png" | "webp" | "jpeg";
            usage: components["schemas"]["ImagesUsage"];
        };
        /** @description Emitted when a partial image is available during image generation streaming.
         *      */
        ImageGenPartialImageEvent: {
            /**
             * @description The type of the event. Always `image_generation.partial_image`.
             *
             * @enum {string}
             */
            type: "image_generation.partial_image";
            /** @description Base64-encoded partial image data, suitable for rendering as an image.
             *      */
            b64_json: string;
            /** @description The Unix timestamp when the event was created.
             *      */
            created_at: number;
            /**
             * @description The size of the requested image.
             *
             * @enum {string}
             */
            size: "1024x1024" | "1024x1536" | "1536x1024" | "auto";
            /**
             * @description The quality setting for the requested image.
             *
             * @enum {string}
             */
            quality: "low" | "medium" | "high" | "auto";
            /**
             * @description The background setting for the requested image.
             *
             * @enum {string}
             */
            background: "transparent" | "opaque" | "auto";
            /**
             * @description The output format for the requested image.
             *
             * @enum {string}
             */
            output_format: "png" | "webp" | "jpeg";
            /** @description 0-based index for the partial image (streaming).
             *      */
            partial_image_index: number;
        };
        ImageGenStreamEvent: components["schemas"]["ImageGenPartialImageEvent"] | components["schemas"]["ImageGenCompletedEvent"];
        /**
         * Image generation tool
         * @description A tool that generates images using a model like `gpt-image-1`.
         *
         */
        ImageGenTool: {
            /**
             * @description The type of the image generation tool. Always `image_generation`.
             *
             * @enum {string}
             */
            type: "image_generation";
            /**
             * @description The image generation model to use. Default: `gpt-image-1`.
             *
             * @default gpt-image-1
             * @enum {string}
             */
            model: "gpt-image-1";
            /**
             * @description The quality of the generated image. One of `low`, `medium`, `high`,
             *     or `auto`. Default: `auto`.
             *
             * @default auto
             * @enum {string}
             */
            quality: "low" | "medium" | "high" | "auto";
            /**
             * @description The size of the generated image. One of `1024x1024`, `1024x1536`,
             *     `1536x1024`, or `auto`. Default: `auto`.
             *
             * @default auto
             * @enum {string}
             */
            size: "1024x1024" | "1024x1536" | "1536x1024" | "auto";
            /**
             * @description The output format of the generated image. One of `png`, `webp`, or
             *     `jpeg`. Default: `png`.
             *
             * @default png
             * @enum {string}
             */
            output_format: "png" | "webp" | "jpeg";
            /**
             * @description Compression level for the output image. Default: 100.
             *
             * @default 100
             */
            output_compression: number;
            /**
             * @description Moderation level for the generated image. Default: `auto`.
             *
             * @default auto
             * @enum {string}
             */
            moderation: "auto" | "low";
            /**
             * @description Background type for the generated image. One of `transparent`,
             *     `opaque`, or `auto`. Default: `auto`.
             *
             * @default auto
             * @enum {string}
             */
            background: "transparent" | "opaque" | "auto";
            input_fidelity?: components["schemas"]["ImageInputFidelity"];
            /** @description Optional mask for inpainting. Contains `image_url`
             *     (string, optional) and `file_id` (string, optional).
             *      */
            input_image_mask?: {
                /** @description Base64-encoded mask image.
                 *      */
                image_url?: string;
                /** @description File ID for the mask image.
                 *      */
                file_id?: string;
            };
            /**
             * @description Number of partial images to generate in streaming mode, from 0 (default value) to 3.
             *
             * @default 0
             */
            partial_images: number;
        };
        /**
         * Image generation call
         * @description An image generation request made by the model.
         *
         */
        ImageGenToolCall: {
            /**
             * @description The type of the image generation call. Always `image_generation_call`.
             *
             * @enum {string}
             */
            type: "image_generation_call";
            /** @description The unique ID of the image generation call.
             *      */
            id: string;
            /**
             * @description The status of the image generation call.
             *
             * @enum {string}
             */
            status: "in_progress" | "completed" | "generating" | "failed";
            /** @description The generated image encoded in base64.
             *      */
            result: string | null;
        };
        /**
         * @description Control how much effort the model will exert to match the style and features,
         *     especially facial features, of input images. This parameter is only supported
         *     for `gpt-image-1`. Supports `high` and `low`. Defaults to `low`.
         *
         * @default low
         * @enum {string|null}
         */
        ImageInputFidelity: "high" | "low" | null;
        /**
         * Image generation response
         * @description The response from the image generation endpoint.
         */
        ImagesResponse: {
            /** @description The Unix timestamp (in seconds) of when the image was created. */
            created: number;
            /** @description The list of generated images. */
            data?: components["schemas"]["Image"][];
            /**
             * @description The background parameter used for the image generation. Either `transparent` or `opaque`.
             * @enum {string}
             */
            background?: "transparent" | "opaque";
            /**
             * @description The output format of the image generation. Either `png`, `webp`, or `jpeg`.
             * @enum {string}
             */
            output_format?: "png" | "webp" | "jpeg";
            /**
             * @description The size of the image generated. Either `1024x1024`, `1024x1536`, or `1536x1024`.
             * @enum {string}
             */
            size?: "1024x1024" | "1024x1536" | "1536x1024";
            /**
             * @description The quality of the image generated. Either `low`, `medium`, or `high`.
             * @enum {string}
             */
            quality?: "low" | "medium" | "high";
            usage?: components["schemas"]["ImageGenUsage"];
        };
        /** @description For `gpt-image-1` only, the token usage information for the image generation.
         *      */
        ImagesUsage: {
            /** @description The total number of tokens (images and text) used for the image generation.
             *      */
            total_tokens: number;
            /** @description The number of tokens (images and text) in the input prompt. */
            input_tokens: number;
            /** @description The number of image tokens in the output image. */
            output_tokens: number;
            /** @description The input tokens detailed information for the image generation. */
            input_tokens_details: {
                /** @description The number of text tokens in the input prompt. */
                text_tokens: number;
                /** @description The number of image tokens in the input prompt. */
                image_tokens: number;
            };
        };
        /**
         * @description Specify additional output data to include in the model response. Currently
         *     supported values are:
         *     - `code_interpreter_call.outputs`: Includes the outputs of python code execution
         *       in code interpreter tool call items.
         *     - `computer_call_output.output.image_url`: Include image urls from the computer call output.
         *     - `file_search_call.results`: Include the search results of
         *       the file search tool call.
         *     - `message.input_image.image_url`: Include image urls from the input message.
         *     - `message.output_text.logprobs`: Include logprobs with assistant messages.
         *     - `reasoning.encrypted_content`: Includes an encrypted version of reasoning
         *       tokens in reasoning item outputs. This enables reasoning items to be used in
         *       multi-turn conversations when using the Responses API statelessly (like
         *       when the `store` parameter is set to `false`, or when an organization is
         *       enrolled in the zero data retention program).
         *
         * @enum {string}
         */
        Includable: "code_interpreter_call.outputs" | "computer_call_output.output.image_url" | "file_search_call.results" | "message.input_image.image_url" | "message.output_text.logprobs" | "reasoning.encrypted_content";
        /**
         * Audio input
         * @description An audio input to the model.
         *
         */
        InputAudio: {
            /**
             * @description The type of the input item. Always `input_audio`.
             *
             * @enum {string}
             */
            type: "input_audio";
            /** @description Base64-encoded audio data.
             *      */
            data: string;
            /**
             * @description The format of the audio data. Currently supported formats are `mp3` and
             *     `wav`.
             *
             * @enum {string}
             */
            format: "mp3" | "wav";
        };
        InputContent: components["schemas"]["InputTextContent"] | components["schemas"]["InputImageContent"] | components["schemas"]["InputFileContent"];
        InputItem: components["schemas"]["EasyInputMessage"] | components["schemas"]["Item"] | components["schemas"]["ItemReferenceParam"];
        /**
         * Input message
         * @description A message input to the model with a role indicating instruction following
         *     hierarchy. Instructions given with the `developer` or `system` role take
         *     precedence over instructions given with the `user` role.
         *
         */
        InputMessage: {
            /**
             * @description The type of the message input. Always set to `message`.
             *
             * @enum {string}
             */
            type?: "message";
            /**
             * @description The role of the message input. One of `user`, `system`, or `developer`.
             *
             * @enum {string}
             */
            role: "user" | "system" | "developer";
            /**
             * @description The status of item. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when items are returned via API.
             *
             * @enum {string}
             */
            status?: "in_progress" | "completed" | "incomplete";
            content: components["schemas"]["InputMessageContentList"];
        };
        /**
         * Input item content list
         * @description A list of one or many input items to the model, containing different content
         *     types.
         *
         */
        InputMessageContentList: components["schemas"]["InputContent"][];
        InputMessageResource: components["schemas"]["InputMessage"] & {
            /** @description The unique ID of the message input.
             *      */
            id: string;
        };
        /** @description Represents an individual `invite` to the organization. */
        Invite: {
            /**
             * @description The object type, which is always `organization.invite`
             * @enum {string}
             */
            object: "organization.invite";
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            /** @description The email address of the individual to whom the invite was sent */
            email: string;
            /**
             * @description `owner` or `reader`
             * @enum {string}
             */
            role: "owner" | "reader";
            /**
             * @description `accepted`,`expired`, or `pending`
             * @enum {string}
             */
            status: "accepted" | "expired" | "pending";
            /** @description The Unix timestamp (in seconds) of when the invite was sent. */
            invited_at: number;
            /** @description The Unix timestamp (in seconds) of when the invite expires. */
            expires_at: number;
            /** @description The Unix timestamp (in seconds) of when the invite was accepted. */
            accepted_at?: number;
            /** @description The projects that were granted membership upon acceptance of the invite. */
            projects?: {
                /** @description Project's public ID */
                id?: string;
                /**
                 * @description Project membership role
                 * @enum {string}
                 */
                role?: "member" | "owner";
            }[];
        };
        InviteDeleteResponse: {
            /**
             * @description The object type, which is always `organization.invite.deleted`
             * @enum {string}
             */
            object: "organization.invite.deleted";
            id: string;
            deleted: boolean;
        };
        InviteListResponse: {
            /**
             * @description The object type, which is always `list`
             * @enum {string}
             */
            object: "list";
            data: components["schemas"]["Invite"][];
            /** @description The first `invite_id` in the retrieved `list` */
            first_id?: string;
            /** @description The last `invite_id` in the retrieved `list` */
            last_id?: string;
            /** @description The `has_more` property is used for pagination to indicate there are additional results. */
            has_more?: boolean;
        };
        InviteRequest: {
            /** @description Send an email to this address */
            email: string;
            /**
             * @description `owner` or `reader`
             * @enum {string}
             */
            role: "reader" | "owner";
            /** @description An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior. */
            projects?: {
                /** @description Project's public ID */
                id: string;
                /**
                 * @description Project membership role
                 * @enum {string}
                 */
                role: "member" | "owner";
            }[];
        };
        /** @description Content item used to generate a response.
         *      */
        Item: components["schemas"]["InputMessage"] | components["schemas"]["OutputMessage"] | components["schemas"]["FileSearchToolCall"] | components["schemas"]["ComputerToolCall"] | components["schemas"]["ComputerCallOutputItemParam"] | components["schemas"]["WebSearchToolCall"] | components["schemas"]["FunctionToolCall"] | components["schemas"]["FunctionCallOutputItemParam"] | components["schemas"]["ReasoningItem"] | components["schemas"]["ImageGenToolCall"] | components["schemas"]["CodeInterpreterToolCall"] | components["schemas"]["LocalShellToolCall"] | components["schemas"]["LocalShellToolCallOutput"] | components["schemas"]["MCPListTools"] | components["schemas"]["MCPApprovalRequest"] | components["schemas"]["MCPApprovalResponse"] | components["schemas"]["MCPToolCall"] | components["schemas"]["CustomToolCallOutput"] | components["schemas"]["CustomToolCall"];
        /** @description Content item used to generate a response.
         *      */
        ItemResource: components["schemas"]["InputMessageResource"] | components["schemas"]["OutputMessage"] | components["schemas"]["FileSearchToolCall"] | components["schemas"]["ComputerToolCall"] | components["schemas"]["ComputerToolCallOutputResource"] | components["schemas"]["WebSearchToolCall"] | components["schemas"]["FunctionToolCallResource"] | components["schemas"]["FunctionToolCallOutputResource"] | components["schemas"]["ImageGenToolCall"] | components["schemas"]["CodeInterpreterToolCall"] | components["schemas"]["LocalShellToolCall"] | components["schemas"]["LocalShellToolCallOutput"] | components["schemas"]["MCPListTools"] | components["schemas"]["MCPApprovalRequest"] | components["schemas"]["MCPApprovalResponseResource"] | components["schemas"]["MCPToolCall"];
        /**
         * KeyPress
         * @description A collection of keypresses the model would like to perform.
         *
         */
        KeyPress: {
            /**
             * @description Specifies the event type. For a keypress action, this property is
             *     always set to `keypress`.
             *
             * @default keypress
             * @enum {string}
             */
            type: "keypress";
            /** @description The combination of keys the model is requesting to be pressed. This is an
             *     array of strings, each representing a key.
             *      */
            keys: string[];
        };
        ListAssistantsResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["AssistantObject"][];
            /** @example asst_abc123 */
            first_id: string;
            /** @example asst_abc456 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        ListAuditLogsResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["AuditLog"][];
            /** @example audit_log-defb456h8dks */
            first_id: string;
            /** @example audit_log-hnbkd8s93s */
            last_id: string;
            has_more: boolean;
        };
        ListBatchesResponse: {
            data: components["schemas"]["Batch"][];
            /** @example batch_abc123 */
            first_id?: string;
            /** @example batch_abc456 */
            last_id?: string;
            has_more: boolean;
            /** @enum {string} */
            object: "list";
        };
        ListCertificatesResponse: {
            data: components["schemas"]["Certificate"][];
            /** @example cert_abc */
            first_id?: string;
            /** @example cert_abc */
            last_id?: string;
            has_more: boolean;
            /** @enum {string} */
            object: "list";
        };
        ListFilesResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["OpenAIFile"][];
            /** @example file-abc123 */
            first_id: string;
            /** @example file-abc456 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        ListFineTuningCheckpointPermissionResponse: {
            data: components["schemas"]["FineTuningCheckpointPermission"][];
            /** @enum {string} */
            object: "list";
            first_id?: string | null;
            last_id?: string | null;
            has_more: boolean;
        };
        ListFineTuningJobCheckpointsResponse: {
            data: components["schemas"]["FineTuningJobCheckpoint"][];
            /** @enum {string} */
            object: "list";
            first_id?: string | null;
            last_id?: string | null;
            has_more: boolean;
        };
        ListFineTuningJobEventsResponse: {
            data: components["schemas"]["FineTuningJobEvent"][];
            /** @enum {string} */
            object: "list";
            has_more: boolean;
        };
        ListMessagesResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["MessageObject"][];
            /** @example msg_abc123 */
            first_id: string;
            /** @example msg_abc123 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        ListModelsResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["Model"][];
        };
        ListPaginatedFineTuningJobsResponse: {
            data: components["schemas"]["FineTuningJob"][];
            has_more: boolean;
            /** @enum {string} */
            object: "list";
        };
        ListRunStepsResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["RunStepObject"][];
            /** @example step_abc123 */
            first_id: string;
            /** @example step_abc456 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        ListRunsResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["RunObject"][];
            /** @example run_abc123 */
            first_id: string;
            /** @example run_abc456 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        ListVectorStoreFilesResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["VectorStoreFileObject"][];
            /** @example file-abc123 */
            first_id: string;
            /** @example file-abc456 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        ListVectorStoresResponse: {
            /** @example list */
            object: string;
            data: components["schemas"]["VectorStoreObject"][];
            /** @example vs_abc123 */
            first_id: string;
            /** @example vs_abc456 */
            last_id: string;
            /** @example false */
            has_more: boolean;
        };
        /**
         * Local shell exec action
         * @description Execute a shell command on the server.
         *
         */
        LocalShellExecAction: {
            /**
             * @description The type of the local shell action. Always `exec`.
             *
             * @enum {string}
             */
            type: "exec";
            /** @description The command to run.
             *      */
            command: string[];
            /** @description Optional timeout in milliseconds for the command.
             *      */
            timeout_ms?: number | null;
            /** @description Optional working directory to run the command in.
             *      */
            working_directory?: string | null;
            /** @description Environment variables to set for the command.
             *      */
            env: {
                [key: string]: string;
            };
            /** @description Optional user to run the command as.
             *      */
            user?: string | null;
        };
        /**
         * Local shell tool
         * @description A tool that allows the model to execute shell commands in a local environment.
         *
         */
        LocalShellTool: {
            /**
             * @description The type of the local shell tool. Always `local_shell`.
             * @enum {string}
             */
            type: "local_shell";
        };
        /**
         * Local shell call
         * @description A tool call to run a command on the local shell.
         *
         */
        LocalShellToolCall: {
            /**
             * @description The type of the local shell call. Always `local_shell_call`.
             *
             * @enum {string}
             */
            type: "local_shell_call";
            /** @description The unique ID of the local shell call.
             *      */
            id: string;
            /** @description The unique ID of the local shell tool call generated by the model.
             *      */
            call_id: string;
            action: components["schemas"]["LocalShellExecAction"];
            /**
             * @description The status of the local shell call.
             *
             * @enum {string}
             */
            status: "in_progress" | "completed" | "incomplete";
        };
        /**
         * Local shell call output
         * @description The output of a local shell tool call.
         *
         */
        LocalShellToolCallOutput: {
            /**
             * @description The type of the local shell tool call output. Always `local_shell_call_output`.
             *
             * @enum {string}
             */
            type: "local_shell_call_output";
            /** @description The unique ID of the local shell tool call generated by the model.
             *      */
            id: string;
            /** @description A JSON string of the output of the local shell tool call.
             *      */
            output: string;
            /**
             * @description The status of the item. One of `in_progress`, `completed`, or `incomplete`.
             *
             * @enum {string|null}
             */
            status?: "in_progress" | "completed" | "incomplete" | null;
        };
        /** @description A log probability object.
         *      */
        LogProbProperties: {
            /** @description The token that was used to generate the log probability.
             *      */
            token: string;
            /** @description The log probability of the token.
             *      */
            logprob: number;
            /** @description The bytes that were used to generate the log probability.
             *      */
            bytes: number[];
        };
        /**
         * MCP approval request
         * @description A request for human approval of a tool invocation.
         *
         */
        MCPApprovalRequest: {
            /**
             * @description The type of the item. Always `mcp_approval_request`.
             *
             * @enum {string}
             */
            type: "mcp_approval_request";
            /** @description The unique ID of the approval request.
             *      */
            id: string;
            /** @description The label of the MCP server making the request.
             *      */
            server_label: string;
            /** @description The name of the tool to run.
             *      */
            name: string;
            /** @description A JSON string of arguments for the tool.
             *      */
            arguments: string;
        };
        /**
         * MCP approval response
         * @description A response to an MCP approval request.
         *
         */
        MCPApprovalResponse: {
            /**
             * @description The type of the item. Always `mcp_approval_response`.
             *
             * @enum {string}
             */
            type: "mcp_approval_response";
            /** @description The unique ID of the approval response
             *      */
            id?: string | null;
            /** @description The ID of the approval request being answered.
             *      */
            approval_request_id: string;
            /** @description Whether the request was approved.
             *      */
            approve: boolean;
            /** @description Optional reason for the decision.
             *      */
            reason?: string | null;
        };
        /**
         * MCP approval response
         * @description A response to an MCP approval request.
         *
         */
        MCPApprovalResponseResource: {
            /**
             * @description The type of the item. Always `mcp_approval_response`.
             *
             * @enum {string}
             */
            type: "mcp_approval_response";
            /** @description The unique ID of the approval response
             *      */
            id: string;
            /** @description The ID of the approval request being answered.
             *      */
            approval_request_id: string;
            /** @description Whether the request was approved.
             *      */
            approve: boolean;
            /** @description Optional reason for the decision.
             *      */
            reason?: string | null;
        };
        /**
         * MCP list tools
         * @description A list of tools available on an MCP server.
         *
         */
        MCPListTools: {
            /**
             * @description The type of the item. Always `mcp_list_tools`.
             *
             * @enum {string}
             */
            type: "mcp_list_tools";
            /** @description The unique ID of the list.
             *      */
            id: string;
            /** @description The label of the MCP server.
             *      */
            server_label: string;
            /** @description The tools available on the server.
             *      */
            tools: components["schemas"]["MCPListToolsTool"][];
            /** @description Error message if the server could not list tools.
             *      */
            error?: string | null;
        };
        /**
         * MCP list tools tool
         * @description A tool available on an MCP server.
         *
         */
        MCPListToolsTool: {
            /** @description The name of the tool.
             *      */
            name: string;
            /** @description The description of the tool.
             *      */
            description?: string | null;
            /** @description The JSON schema describing the tool's input.
             *      */
            input_schema: Record<string, never>;
            /** @description Additional annotations about the tool.
             *      */
            annotations?: Record<string, never> | null;
        };
        /**
         * MCP tool
         * @description Give the model access to additional tools via remote Model Context Protocol
         *     (MCP) servers. [Learn more about MCP](https://platform.openai.com/docs/guides/tools-remote-mcp).
         *
         */
        MCPTool: {
            /**
             * @description The type of the MCP tool. Always `mcp`.
             * @enum {string}
             */
            type: "mcp";
            /** @description A label for this MCP server, used to identify it in tool calls.
             *      */
            server_label: string;
            /** @description The URL for the MCP server.
             *      */
            server_url: string;
            /** @description Optional description of the MCP server, used to provide more context.
             *      */
            server_description?: string;
            /** @description Optional HTTP headers to send to the MCP server. Use for authentication
             *     or other purposes.
             *      */
            headers?: {
                [key: string]: string;
            } | null;
            /** @description List of allowed tool names or a filter object.
             *      */
            allowed_tools?: (string[] | {
                /**
                 * MCP allowed tools
                 * @description List of allowed tool names.
                 */
                tool_names?: string[];
            }) | null;
            /** @description Specify which of the MCP server's tools require approval. */
            require_approval?: ({
                /** @description A list of tools that always require approval.
                 *      */
                always?: {
                    /** @description List of tools that require approval. */
                    tool_names?: string[];
                };
                /** @description A list of tools that never require approval.
                 *      */
                never?: {
                    /** @description List of tools that do not require approval. */
                    tool_names?: string[];
                };
            } | ("always" | "never")) | null;
        };
        /**
         * MCP tool call
         * @description An invocation of a tool on an MCP server.
         *
         */
        MCPToolCall: {
            /**
             * @description The type of the item. Always `mcp_call`.
             *
             * @enum {string}
             */
            type: "mcp_call";
            /** @description The unique ID of the tool call.
             *      */
            id: string;
            /** @description The label of the MCP server running the tool.
             *      */
            server_label: string;
            /** @description The name of the tool that was run.
             *      */
            name: string;
            /** @description A JSON string of the arguments passed to the tool.
             *      */
            arguments: string;
            /** @description The output from the tool call.
             *      */
            output?: string | null;
            /** @description The error from the tool call, if any.
             *      */
            error?: string | null;
        };
        /**
         * Image file
         * @description References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.
         */
        MessageContentImageFileObject: {
            /**
             * @description Always `image_file`.
             * @enum {string}
             */
            type: "image_file";
            image_file: {
                /** @description The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content. */
                file_id: string;
                /**
                 * @description Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                 * @default auto
                 * @enum {string}
                 */
                detail: "auto" | "low" | "high";
            };
        };
        /**
         * Image URL
         * @description References an image URL in the content of a message.
         */
        MessageContentImageUrlObject: {
            /**
             * @description The type of the content part.
             * @enum {string}
             */
            type: "image_url";
            image_url: {
                /**
                 * Format: uri
                 * @description The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.
                 */
                url: string;
                /**
                 * @description Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
                 * @default auto
                 * @enum {string}
                 */
                detail: "auto" | "low" | "high";
            };
        };
        /**
         * Refusal
         * @description The refusal content generated by the assistant.
         */
        MessageContentRefusalObject: {
            /**
             * @description Always `refusal`.
             * @enum {string}
             */
            type: "refusal";
            refusal: string;
        };
        /**
         * File citation
         * @description A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
         */
        MessageContentTextAnnotationsFileCitationObject: {
            /**
             * @description Always `file_citation`.
             * @enum {string}
             */
            type: "file_citation";
            /** @description The text in the message content that needs to be replaced. */
            text: string;
            file_citation: {
                /** @description The ID of the specific File the citation is from. */
                file_id: string;
            };
            start_index: number;
            end_index: number;
        };
        /**
         * File path
         * @description A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
         */
        MessageContentTextAnnotationsFilePathObject: {
            /**
             * @description Always `file_path`.
             * @enum {string}
             */
            type: "file_path";
            /** @description The text in the message content that needs to be replaced. */
            text: string;
            file_path: {
                /** @description The ID of the file that was generated. */
                file_id: string;
            };
            start_index: number;
            end_index: number;
        };
        /**
         * Text
         * @description The text content that is part of a message.
         */
        MessageContentTextObject: {
            /**
             * @description Always `text`.
             * @enum {string}
             */
            type: "text";
            text: {
                /** @description The data that makes up the text. */
                value: string;
                annotations: components["schemas"]["TextAnnotation"][];
            };
        };
        /**
         * Image file
         * @description References an image [File](https://platform.openai.com/docs/api-reference/files) in the content of a message.
         */
        MessageDeltaContentImageFileObject: {
            /** @description The index of the content part in the message. */
            index: number;
            /**
             * @description Always `image_file`.
             * @enum {string}
             */
            type: "image_file";
            image_file?: {
                /** @description The [File](https://platform.openai.com/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content. */
                file_id?: string;
                /**
                 * @description Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                 * @default auto
                 * @enum {string}
                 */
                detail: "auto" | "low" | "high";
            };
        };
        /**
         * Image URL
         * @description References an image URL in the content of a message.
         */
        MessageDeltaContentImageUrlObject: {
            /** @description The index of the content part in the message. */
            index: number;
            /**
             * @description Always `image_url`.
             * @enum {string}
             */
            type: "image_url";
            image_url?: {
                /** @description The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp. */
                url?: string;
                /**
                 * @description Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
                 * @default auto
                 * @enum {string}
                 */
                detail: "auto" | "low" | "high";
            };
        };
        /**
         * Refusal
         * @description The refusal content that is part of a message.
         */
        MessageDeltaContentRefusalObject: {
            /** @description The index of the refusal part in the message. */
            index: number;
            /**
             * @description Always `refusal`.
             * @enum {string}
             */
            type: "refusal";
            refusal?: string;
        };
        /**
         * File citation
         * @description A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
         */
        MessageDeltaContentTextAnnotationsFileCitationObject: {
            /** @description The index of the annotation in the text content part. */
            index: number;
            /**
             * @description Always `file_citation`.
             * @enum {string}
             */
            type: "file_citation";
            /** @description The text in the message content that needs to be replaced. */
            text?: string;
            file_citation?: {
                /** @description The ID of the specific File the citation is from. */
                file_id?: string;
                /** @description The specific quote in the file. */
                quote?: string;
            };
            start_index?: number;
            end_index?: number;
        };
        /**
         * File path
         * @description A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
         */
        MessageDeltaContentTextAnnotationsFilePathObject: {
            /** @description The index of the annotation in the text content part. */
            index: number;
            /**
             * @description Always `file_path`.
             * @enum {string}
             */
            type: "file_path";
            /** @description The text in the message content that needs to be replaced. */
            text?: string;
            file_path?: {
                /** @description The ID of the file that was generated. */
                file_id?: string;
            };
            start_index?: number;
            end_index?: number;
        };
        /**
         * Text
         * @description The text content that is part of a message.
         */
        MessageDeltaContentTextObject: {
            /** @description The index of the content part in the message. */
            index: number;
            /**
             * @description Always `text`.
             * @enum {string}
             */
            type: "text";
            text?: {
                /** @description The data that makes up the text. */
                value?: string;
                annotations?: components["schemas"]["TextAnnotationDelta"][];
            };
        };
        /**
         * Message delta object
         * @description Represents a message delta i.e. any changed fields on a message during streaming.
         *
         */
        MessageDeltaObject: {
            /** @description The identifier of the message, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `thread.message.delta`.
             * @enum {string}
             */
            object: "thread.message.delta";
            /** @description The delta containing the fields that have changed on the Message. */
            delta: {
                /**
                 * @description The entity that produced the message. One of `user` or `assistant`.
                 * @enum {string}
                 */
                role?: "user" | "assistant";
                /** @description The content of the message in array of text and/or images. */
                content?: components["schemas"]["MessageContentDelta"][];
            };
        };
        /**
         * The message object
         * @description Represents a message within a [thread](https://platform.openai.com/docs/api-reference/threads).
         */
        MessageObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `thread.message`.
             * @enum {string}
             */
            object: "thread.message";
            /** @description The Unix timestamp (in seconds) for when the message was created. */
            created_at: number;
            /** @description The [thread](https://platform.openai.com/docs/api-reference/threads) ID that this message belongs to. */
            thread_id: string;
            /**
             * @description The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
             * @enum {string}
             */
            status: "in_progress" | "incomplete" | "completed";
            /** @description On an incomplete message, details about why the message is incomplete. */
            incomplete_details: {
                /**
                 * @description The reason the message is incomplete.
                 * @enum {string}
                 */
                reason: "content_filter" | "max_tokens" | "run_cancelled" | "run_expired" | "run_failed";
            } | null;
            /** @description The Unix timestamp (in seconds) for when the message was completed. */
            completed_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the message was marked as incomplete. */
            incomplete_at: number | null;
            /**
             * @description The entity that produced the message. One of `user` or `assistant`.
             * @enum {string}
             */
            role: "user" | "assistant";
            /** @description The content of the message in array of text and/or images. */
            content: components["schemas"]["MessageContent"][];
            /** @description If applicable, the ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) that authored this message. */
            assistant_id: string | null;
            /** @description The ID of the [run](https://platform.openai.com/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints. */
            run_id: string | null;
            /** @description A list of files attached to the message, and the tools they were added to. */
            attachments: {
                /** @description The ID of the file to attach to the message. */
                file_id?: string;
                /** @description The tools to add this file to. */
                tools?: (components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsFileSearchTypeOnly"])[];
            }[] | null;
            metadata: components["schemas"]["Metadata"];
        };
        /**
         * Text
         * @description The text content that is part of a message.
         */
        MessageRequestContentTextObject: {
            /**
             * @description Always `text`.
             * @enum {string}
             */
            type: "text";
            /** @description Text content to be sent to the model */
            text: string;
        };
        MessageStreamEvent: {
            /** @enum {string} */
            event: "thread.message.created";
            data: components["schemas"]["MessageObject"];
        } | {
            /** @enum {string} */
            event: "thread.message.in_progress";
            data: components["schemas"]["MessageObject"];
        } | {
            /** @enum {string} */
            event: "thread.message.delta";
            data: components["schemas"]["MessageDeltaObject"];
        } | {
            /** @enum {string} */
            event: "thread.message.completed";
            data: components["schemas"]["MessageObject"];
        } | {
            /** @enum {string} */
            event: "thread.message.incomplete";
            data: components["schemas"]["MessageObject"];
        };
        /** @description Set of 16 key-value pairs that can be attached to an object. This can be
         *     useful for storing additional information about the object in a structured
         *     format, and querying for objects via API or the dashboard.
         *
         *     Keys are strings with a maximum length of 64 characters. Values are strings
         *     with a maximum length of 512 characters.
         *      */
        Metadata: {
            [key: string]: string;
        } | null;
        /**
         * Model
         * @description Describes an OpenAI model offering that can be used with the API.
         */
        Model: {
            /** @description The model identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The Unix timestamp (in seconds) when the model was created. */
            created: number;
            /**
             * @description The object type, which is always "model".
             * @enum {string}
             */
            object: "model";
            /** @description The organization that owns the model. */
            owned_by: string;
        };
        ModelIds: components["schemas"]["ModelIdsShared"] | components["schemas"]["ModelIdsResponses"];
        /** @example gpt-4o */
        ModelIdsResponses: components["schemas"]["ModelIdsShared"] | ("o1-pro" | "o1-pro-2025-03-19" | "o3-pro" | "o3-pro-2025-06-10" | "o3-deep-research" | "o3-deep-research-2025-06-26" | "o4-mini-deep-research" | "o4-mini-deep-research-2025-06-26" | "computer-use-preview" | "computer-use-preview-2025-03-11");
        /** @example gpt-4o */
        ModelIdsShared: string | components["schemas"]["ChatModel"];
        ModelResponseProperties: {
            text?: {
                verbosity?: components["schemas"]["Verbosity"];
            };
            metadata?: components["schemas"]["Metadata"];
            /** @description An integer between 0 and 20 specifying the number of most likely tokens to
             *     return at each token position, each with an associated log probability.
             *      */
            top_logprobs?: number | null;
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *     We generally recommend altering this or `top_p` but not both.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling,
             *     where the model considers the results of the tokens with top_p probability
             *     mass. So 0.1 means only the tokens comprising the top 10% probability mass
             *     are considered.
             *
             *     We generally recommend altering this or `temperature` but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            /**
             * @deprecated
             * @description This field is being replaced by `safety_identifier` and `prompt_cache_key`. Use `prompt_cache_key` instead to maintain caching optimizations.
             *     A stable identifier for your end-users.
             *     Used to boost cache hit rates by better bucketing similar requests and  to help OpenAI detect and prevent abuse. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).
             *
             * @example user-1234
             */
            user?: string;
            /**
             * @description A stable identifier used to help detect users of your application that may be violating OpenAI's usage policies.
             *     The IDs should be a string that uniquely identifies each user. We recommend hashing their username or email address, in order to avoid sending us any identifying information. [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).
             *
             * @example safety-identifier-1234
             */
            safety_identifier?: string;
            /**
             * @description Used by OpenAI to cache responses for similar requests to optimize your cache hit rates. Replaces the `user` field. [Learn more](https://platform.openai.com/docs/guides/prompt-caching).
             *
             * @example prompt-cache-key-1234
             */
            prompt_cache_key?: string;
            service_tier?: components["schemas"]["ServiceTier"];
        };
        ModifyAssistantRequest: {
            /** @description ID of the model to use. You can use the [List models](https://platform.openai.com/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](https://platform.openai.com/docs/models) for descriptions of them.
             *      */
            model?: string | components["schemas"]["AssistantSupportedModels"];
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /** @description The name of the assistant. The maximum length is 256 characters.
             *      */
            name?: string | null;
            /** @description The description of the assistant. The maximum length is 512 characters.
             *      */
            description?: string | null;
            /** @description The system instructions that the assistant uses. The maximum length is 256,000 characters.
             *      */
            instructions?: string | null;
            /**
             * @description A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
             *
             * @default []
             */
            tools: components["schemas"]["AssistantTool"][];
            /** @description A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description Overrides the list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description Overrides the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                     *      */
                    vector_store_ids?: string[];
                };
            } | null;
            metadata?: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        ModifyCertificateRequest: {
            /** @description The updated name for the certificate */
            name: string;
        };
        ModifyMessageRequest: {
            metadata?: components["schemas"]["Metadata"];
        };
        ModifyRunRequest: {
            metadata?: components["schemas"]["Metadata"];
        };
        ModifyThreadRequest: {
            /** @description A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                     *      */
                    vector_store_ids?: string[];
                };
            } | null;
            metadata?: components["schemas"]["Metadata"];
        };
        /**
         * Move
         * @description A mouse move action.
         *
         */
        Move: {
            /**
             * @description Specifies the event type. For a move action, this property is
             *     always set to `move`.
             *
             * @default move
             * @enum {string}
             */
            type: "move";
            /** @description The x-coordinate to move to.
             *      */
            x: number;
            /** @description The y-coordinate to move to.
             *      */
            y: number;
        };
        /**
         * OpenAIFile
         * @description The `File` object represents a document that has been uploaded to OpenAI.
         */
        OpenAIFile: {
            /** @description The file identifier, which can be referenced in the API endpoints. */
            id: string;
            /** @description The size of the file, in bytes. */
            bytes: number;
            /** @description The Unix timestamp (in seconds) for when the file was created. */
            created_at: number;
            /** @description The Unix timestamp (in seconds) for when the file will expire. */
            expires_at?: number;
            /** @description The name of the file. */
            filename: string;
            /**
             * @description The object type, which is always `file`.
             * @enum {string}
             */
            object: "file";
            /**
             * @description The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`, `vision`, and `user_data`.
             * @enum {string}
             */
            purpose: "assistants" | "assistants_output" | "batch" | "batch_output" | "fine-tune" | "fine-tune-results" | "vision" | "user_data";
            /**
             * @deprecated
             * @description Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
             * @enum {string}
             */
            status: "uploaded" | "processed" | "error";
            /**
             * @deprecated
             * @description Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
             */
            status_details?: string;
        };
        /**
         * Other Chunking Strategy
         * @description This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
         */
        OtherChunkingStrategyResponseParam: {
            /**
             * @description Always `other`.
             * @enum {string}
             */
            type: "other";
        };
        /**
         * Output audio
         * @description An audio output from the model.
         *
         */
        OutputAudio: {
            /**
             * @description The type of the output audio. Always `output_audio`.
             *
             * @enum {string}
             */
            type: "output_audio";
            /** @description Base64-encoded audio data from the model.
             *      */
            data: string;
            /** @description The transcript of the audio data from the model.
             *      */
            transcript: string;
        };
        OutputContent: components["schemas"]["OutputTextContent"] | components["schemas"]["RefusalContent"];
        OutputItem: components["schemas"]["OutputMessage"] | components["schemas"]["FileSearchToolCall"] | components["schemas"]["FunctionToolCall"] | components["schemas"]["WebSearchToolCall"] | components["schemas"]["ComputerToolCall"] | components["schemas"]["ReasoningItem"] | components["schemas"]["ImageGenToolCall"] | components["schemas"]["CodeInterpreterToolCall"] | components["schemas"]["LocalShellToolCall"] | components["schemas"]["MCPToolCall"] | components["schemas"]["MCPListTools"] | components["schemas"]["MCPApprovalRequest"] | components["schemas"]["CustomToolCall"];
        /**
         * Output message
         * @description An output message from the model.
         *
         */
        OutputMessage: {
            /** @description The unique ID of the output message.
             *      */
            id: string;
            /**
             * @description The type of the output message. Always `message`.
             *
             * @enum {string}
             */
            type: "message";
            /**
             * @description The role of the output message. Always `assistant`.
             *
             * @enum {string}
             */
            role: "assistant";
            /** @description The content of the output message.
             *      */
            content: components["schemas"]["OutputContent"][];
            /**
             * @description The status of the message input. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when input items are returned via API.
             *
             * @enum {string}
             */
            status: "in_progress" | "completed" | "incomplete";
        };
        /**
         * @description Whether to enable [parallel function calling](https://platform.openai.com/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
         * @default true
         */
        ParallelToolCalls: boolean;
        /**
         * @description The number of partial images to generate. This parameter is used for
         *     streaming responses that return partial images. Value must be between 0 and 3.
         *     When set to 0, the response will be a single image sent in one streaming event.
         *
         *     Note that the final image may be sent before the full number of partial images
         *     are generated if the full image is generated more quickly.
         *
         * @default 0
         * @example 1
         */
        PartialImages: number | null;
        /**
         * Static Content
         * @description Static predicted output content, such as the content of a text file that is
         *     being regenerated.
         *
         */
        PredictionContent: {
            /**
             * @description The type of the predicted content you want to provide. This type is
             *     currently always `content`.
             *
             * @enum {string}
             */
            type: "content";
            /** @description The content that should be matched when generating a model response.
             *     If generated tokens would match this content, the entire model response
             *     can be returned much more quickly.
             *      */
            content: string | components["schemas"]["ChatCompletionRequestMessageContentPartText"][];
        };
        /** @description Represents an individual project. */
        Project: {
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            /**
             * @description The object type, which is always `organization.project`
             * @enum {string}
             */
            object: "organization.project";
            /** @description The name of the project. This appears in reporting. */
            name: string;
            /** @description The Unix timestamp (in seconds) of when the project was created. */
            created_at: number;
            /** @description The Unix timestamp (in seconds) of when the project was archived or `null`. */
            archived_at?: number | null;
            /**
             * @description `active` or `archived`
             * @enum {string}
             */
            status: "active" | "archived";
        };
        /** @description Represents an individual API key in a project. */
        ProjectApiKey: {
            /**
             * @description The object type, which is always `organization.project.api_key`
             * @enum {string}
             */
            object: "organization.project.api_key";
            /** @description The redacted value of the API key */
            redacted_value: string;
            /** @description The name of the API key */
            name: string;
            /** @description The Unix timestamp (in seconds) of when the API key was created */
            created_at: number;
            /** @description The Unix timestamp (in seconds) of when the API key was last used. */
            last_used_at: number;
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            owner: {
                /**
                 * @description `user` or `service_account`
                 * @enum {string}
                 */
                type?: "user" | "service_account";
                user?: components["schemas"]["ProjectUser"];
                service_account?: components["schemas"]["ProjectServiceAccount"];
            };
        };
        ProjectApiKeyDeleteResponse: {
            /** @enum {string} */
            object: "organization.project.api_key.deleted";
            id: string;
            deleted: boolean;
        };
        ProjectApiKeyListResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["ProjectApiKey"][];
            first_id: string;
            last_id: string;
            has_more: boolean;
        };
        ProjectCreateRequest: {
            /** @description The friendly name of the project, this name appears in reports. */
            name: string;
        };
        ProjectListResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["Project"][];
            first_id: string;
            last_id: string;
            has_more: boolean;
        };
        /** @description Represents a project rate limit config. */
        ProjectRateLimit: {
            /**
             * @description The object type, which is always `project.rate_limit`
             * @enum {string}
             */
            object: "project.rate_limit";
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /** @description The model this rate limit applies to. */
            model: string;
            /** @description The maximum requests per minute. */
            max_requests_per_1_minute: number;
            /** @description The maximum tokens per minute. */
            max_tokens_per_1_minute: number;
            /** @description The maximum images per minute. Only present for relevant models. */
            max_images_per_1_minute?: number;
            /** @description The maximum audio megabytes per minute. Only present for relevant models. */
            max_audio_megabytes_per_1_minute?: number;
            /** @description The maximum requests per day. Only present for relevant models. */
            max_requests_per_1_day?: number;
            /** @description The maximum batch input tokens per day. Only present for relevant models. */
            batch_1_day_max_input_tokens?: number;
        };
        ProjectRateLimitListResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["ProjectRateLimit"][];
            first_id: string;
            last_id: string;
            has_more: boolean;
        };
        ProjectRateLimitUpdateRequest: {
            /** @description The maximum requests per minute. */
            max_requests_per_1_minute?: number;
            /** @description The maximum tokens per minute. */
            max_tokens_per_1_minute?: number;
            /** @description The maximum images per minute. Only relevant for certain models. */
            max_images_per_1_minute?: number;
            /** @description The maximum audio megabytes per minute. Only relevant for certain models. */
            max_audio_megabytes_per_1_minute?: number;
            /** @description The maximum requests per day. Only relevant for certain models. */
            max_requests_per_1_day?: number;
            /** @description The maximum batch input tokens per day. Only relevant for certain models. */
            batch_1_day_max_input_tokens?: number;
        };
        /** @description Represents an individual service account in a project. */
        ProjectServiceAccount: {
            /**
             * @description The object type, which is always `organization.project.service_account`
             * @enum {string}
             */
            object: "organization.project.service_account";
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            /** @description The name of the service account */
            name: string;
            /**
             * @description `owner` or `member`
             * @enum {string}
             */
            role: "owner" | "member";
            /** @description The Unix timestamp (in seconds) of when the service account was created */
            created_at: number;
        };
        ProjectServiceAccountApiKey: {
            /**
             * @description The object type, which is always `organization.project.service_account.api_key`
             * @enum {string}
             */
            object: "organization.project.service_account.api_key";
            value: string;
            name: string;
            created_at: number;
            id: string;
        };
        ProjectServiceAccountCreateRequest: {
            /** @description The name of the service account being created. */
            name: string;
        };
        ProjectServiceAccountCreateResponse: {
            /** @enum {string} */
            object: "organization.project.service_account";
            id: string;
            name: string;
            /**
             * @description Service accounts can only have one role of type `member`
             * @enum {string}
             */
            role: "member";
            created_at: number;
            api_key: components["schemas"]["ProjectServiceAccountApiKey"];
        };
        ProjectServiceAccountDeleteResponse: {
            /** @enum {string} */
            object: "organization.project.service_account.deleted";
            id: string;
            deleted: boolean;
        };
        ProjectServiceAccountListResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["ProjectServiceAccount"][];
            first_id: string;
            last_id: string;
            has_more: boolean;
        };
        ProjectUpdateRequest: {
            /** @description The updated name of the project, this name appears in reports. */
            name: string;
        };
        /** @description Represents an individual user in a project. */
        ProjectUser: {
            /**
             * @description The object type, which is always `organization.project.user`
             * @enum {string}
             */
            object: "organization.project.user";
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            /** @description The name of the user */
            name: string;
            /** @description The email address of the user */
            email: string;
            /**
             * @description `owner` or `member`
             * @enum {string}
             */
            role: "owner" | "member";
            /** @description The Unix timestamp (in seconds) of when the project was added. */
            added_at: number;
        };
        ProjectUserCreateRequest: {
            /** @description The ID of the user. */
            user_id: string;
            /**
             * @description `owner` or `member`
             * @enum {string}
             */
            role: "owner" | "member";
        };
        ProjectUserDeleteResponse: {
            /** @enum {string} */
            object: "organization.project.user.deleted";
            id: string;
            deleted: boolean;
        };
        ProjectUserListResponse: {
            object: string;
            data: components["schemas"]["ProjectUser"][];
            first_id: string;
            last_id: string;
            has_more: boolean;
        };
        ProjectUserUpdateRequest: {
            /**
             * @description `owner` or `member`
             * @enum {string}
             */
            role: "owner" | "member";
        };
        /** @description Reference to a prompt template and its variables.
         *     [Learn more](https://platform.openai.com/docs/guides/text?api-mode=responses#reusable-prompts).
         *      */
        Prompt: {
            /** @description The unique identifier of the prompt template to use. */
            id: string;
            /** @description Optional version of the prompt template. */
            version?: string | null;
            variables?: components["schemas"]["ResponsePromptVariables"];
        } | null;
        /** @description A realtime client event.
         *      */
        RealtimeClientEvent: components["schemas"]["RealtimeClientEventConversationItemCreate"] | components["schemas"]["RealtimeClientEventConversationItemDelete"] | components["schemas"]["RealtimeClientEventConversationItemRetrieve"] | components["schemas"]["RealtimeClientEventConversationItemTruncate"] | components["schemas"]["RealtimeClientEventInputAudioBufferAppend"] | components["schemas"]["RealtimeClientEventInputAudioBufferClear"] | components["schemas"]["RealtimeClientEventOutputAudioBufferClear"] | components["schemas"]["RealtimeClientEventInputAudioBufferCommit"] | components["schemas"]["RealtimeClientEventResponseCancel"] | components["schemas"]["RealtimeClientEventResponseCreate"] | components["schemas"]["RealtimeClientEventSessionUpdate"] | components["schemas"]["RealtimeClientEventTranscriptionSessionUpdate"];
        /** @description Add a new Item to the Conversation's context, including messages, function
         *     calls, and function call responses. This event can be used both to populate a
         *     "history" of the conversation and to add new items mid-stream, but has the
         *     current limitation that it cannot populate assistant audio messages.
         *
         *     If successful, the server will respond with a `conversation.item.created`
         *     event, otherwise an `error` event will be sent.
         *      */
        RealtimeClientEventConversationItemCreate: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `conversation.item.create`.
             * @constant
             */
            type: "conversation.item.create";
            /** @description The ID of the preceding item after which the new item will be inserted.
             *     If not set, the new item will be appended to the end of the conversation.
             *     If set to `root`, the new item will be added to the beginning of the conversation.
             *     If set to an existing ID, it allows an item to be inserted mid-conversation. If the
             *     ID cannot be found, an error will be returned and the item will not be added.
             *      */
            previous_item_id?: string;
            item: components["schemas"]["RealtimeConversationItem"];
        };
        /** @description Send this event when you want to remove any item from the conversation
         *     history. The server will respond with a `conversation.item.deleted` event,
         *     unless the item does not exist in the conversation history, in which case the
         *     server will respond with an error.
         *      */
        RealtimeClientEventConversationItemDelete: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `conversation.item.delete`.
             * @constant
             */
            type: "conversation.item.delete";
            /** @description The ID of the item to delete. */
            item_id: string;
        };
        /** @description Send this event when you want to retrieve the server's representation of a specific item in the conversation history. This is useful, for example, to inspect user audio after noise cancellation and VAD.
         *     The server will respond with a `conversation.item.retrieved` event,
         *     unless the item does not exist in the conversation history, in which case the
         *     server will respond with an error.
         *      */
        RealtimeClientEventConversationItemRetrieve: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `conversation.item.retrieve`.
             * @constant
             */
            type: "conversation.item.retrieve";
            /** @description The ID of the item to retrieve. */
            item_id: string;
        };
        /** @description Send this event to truncate a previous assistant message’s audio. The server
         *     will produce audio faster than realtime, so this event is useful when the user
         *     interrupts to truncate audio that has already been sent to the client but not
         *     yet played. This will synchronize the server's understanding of the audio with
         *     the client's playback.
         *
         *     Truncating audio will delete the server-side text transcript to ensure there
         *     is not text in the context that hasn't been heard by the user.
         *
         *     If successful, the server will respond with a `conversation.item.truncated`
         *     event.
         *      */
        RealtimeClientEventConversationItemTruncate: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `conversation.item.truncate`.
             * @constant
             */
            type: "conversation.item.truncate";
            /** @description The ID of the assistant message item to truncate. Only assistant message
             *     items can be truncated.
             *      */
            item_id: string;
            /** @description The index of the content part to truncate. Set this to 0. */
            content_index: number;
            /** @description Inclusive duration up to which audio is truncated, in milliseconds. If
             *     the audio_end_ms is greater than the actual audio duration, the server
             *     will respond with an error.
             *      */
            audio_end_ms: number;
        };
        /** @description Send this event to append audio bytes to the input audio buffer. The audio
         *     buffer is temporary storage you can write to and later commit. In Server VAD
         *     mode, the audio buffer is used to detect speech and the server will decide
         *     when to commit. When Server VAD is disabled, you must commit the audio buffer
         *     manually.
         *
         *     The client may choose how much audio to place in each event up to a maximum
         *     of 15 MiB, for example streaming smaller chunks from the client may allow the
         *     VAD to be more responsive. Unlike made other client events, the server will
         *     not send a confirmation response to this event.
         *      */
        RealtimeClientEventInputAudioBufferAppend: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `input_audio_buffer.append`.
             * @constant
             */
            type: "input_audio_buffer.append";
            /** @description Base64-encoded audio bytes. This must be in the format specified by the
             *     `input_audio_format` field in the session configuration.
             *      */
            audio: string;
        };
        /** @description Send this event to clear the audio bytes in the buffer. The server will
         *     respond with an `input_audio_buffer.cleared` event.
         *      */
        RealtimeClientEventInputAudioBufferClear: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `input_audio_buffer.clear`.
             * @constant
             */
            type: "input_audio_buffer.clear";
        };
        /** @description Send this event to commit the user input audio buffer, which will create a
         *     new user message item in the conversation. This event will produce an error
         *     if the input audio buffer is empty. When in Server VAD mode, the client does
         *     not need to send this event, the server will commit the audio buffer
         *     automatically.
         *
         *     Committing the input audio buffer will trigger input audio transcription
         *     (if enabled in session configuration), but it will not create a response
         *     from the model. The server will respond with an `input_audio_buffer.committed`
         *     event.
         *      */
        RealtimeClientEventInputAudioBufferCommit: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `input_audio_buffer.commit`.
             * @constant
             */
            type: "input_audio_buffer.commit";
        };
        /** @description **WebRTC Only:** Emit to cut off the current audio response. This will trigger the server to
         *     stop generating audio and emit a `output_audio_buffer.cleared` event. This
         *     event should be preceded by a `response.cancel` client event to stop the
         *     generation of the current response.
         *     [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
         *      */
        RealtimeClientEventOutputAudioBufferClear: {
            /** @description The unique ID of the client event used for error handling. */
            event_id?: string;
            /**
             * @description The event type, must be `output_audio_buffer.clear`.
             * @constant
             */
            type: "output_audio_buffer.clear";
        };
        /** @description Send this event to cancel an in-progress response. The server will respond
         *     with a `response.done` event with a status of `response.status=cancelled`. If
         *     there is no response to cancel, the server will respond with an error.
         *      */
        RealtimeClientEventResponseCancel: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `response.cancel`.
             * @constant
             */
            type: "response.cancel";
            /** @description A specific response ID to cancel - if not provided, will cancel an
             *     in-progress response in the default conversation.
             *      */
            response_id?: string;
        };
        /** @description This event instructs the server to create a Response, which means triggering
         *     model inference. When in Server VAD mode, the server will create Responses
         *     automatically.
         *
         *     A Response will include at least one Item, and may have two, in which case
         *     the second will be a function call. These Items will be appended to the
         *     conversation history.
         *
         *     The server will respond with a `response.created` event, events for Items
         *     and content created, and finally a `response.done` event to indicate the
         *     Response is complete.
         *
         *     The `response.create` event includes inference configuration like
         *     `instructions`, and `temperature`. These fields will override the Session's
         *     configuration for this Response only.
         *      */
        RealtimeClientEventResponseCreate: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `response.create`.
             * @constant
             */
            type: "response.create";
            response?: components["schemas"]["RealtimeResponseCreateParams"];
        };
        /** @description Send this event to update the session’s default configuration.
         *     The client may send this event at any time to update any field,
         *     except for `voice`. However, note that once a session has been
         *     initialized with a particular `model`, it can’t be changed to
         *     another model using `session.update`.
         *
         *     When the server receives a `session.update`, it will respond
         *     with a `session.updated` event showing the full, effective configuration.
         *     Only the fields that are present are updated. To clear a field like
         *     `instructions`, pass an empty string.
         *      */
        RealtimeClientEventSessionUpdate: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `session.update`.
             * @constant
             */
            type: "session.update";
            session: components["schemas"]["RealtimeSessionCreateRequest"];
        };
        /** @description Send this event to update a transcription session.
         *      */
        RealtimeClientEventTranscriptionSessionUpdate: {
            /** @description Optional client-generated ID used to identify this event. */
            event_id?: string;
            /**
             * @description The event type, must be `transcription_session.update`.
             * @constant
             */
            type: "transcription_session.update";
            session: components["schemas"]["RealtimeTranscriptionSessionCreateRequest"];
        };
        /** @description The item to add to the conversation. */
        RealtimeConversationItem: {
            /** @description The unique ID of the item, this can be generated by the client to help
             *     manage server-side context, but is not required because the server will
             *     generate one if not provided.
             *      */
            id?: string;
            /**
             * @description The type of the item (`message`, `function_call`, `function_call_output`).
             *
             * @enum {string}
             */
            type?: "message" | "function_call" | "function_call_output";
            /**
             * @description Identifier for the API object being returned - always `realtime.item`.
             *
             * @enum {string}
             */
            object?: "realtime.item";
            /**
             * @description The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect
             *     on the conversation, but are accepted for consistency with the
             *     `conversation.item.created` event.
             *
             * @enum {string}
             */
            status?: "completed" | "incomplete" | "in_progress";
            /**
             * @description The role of the message sender (`user`, `assistant`, `system`), only
             *     applicable for `message` items.
             *
             * @enum {string}
             */
            role?: "user" | "assistant" | "system";
            /** @description The content of the message, applicable for `message` items.
             *     - Message items of role `system` support only `input_text` content
             *     - Message items of role `user` support `input_text` and `input_audio`
             *       content
             *     - Message items of role `assistant` support `text` content.
             *      */
            content?: components["schemas"]["RealtimeConversationItemContent"][];
            /** @description The ID of the function call (for `function_call` and
             *     `function_call_output` items). If passed on a `function_call_output`
             *     item, the server will check that a `function_call` item with the same
             *     ID exists in the conversation history.
             *      */
            call_id?: string;
            /** @description The name of the function being called (for `function_call` items).
             *      */
            name?: string;
            /** @description The arguments of the function call (for `function_call` items).
             *      */
            arguments?: string;
            /** @description The output of the function call (for `function_call_output` items).
             *      */
            output?: string;
        };
        /** @description The item to add to the conversation. */
        RealtimeConversationItemWithReference: {
            /** @description For an item of type (`message` | `function_call` | `function_call_output`)
             *     this field allows the client to assign the unique ID of the item. It is
             *     not required because the server will generate one if not provided.
             *
             *     For an item of type `item_reference`, this field is required and is a
             *     reference to any item that has previously existed in the conversation.
             *      */
            id?: string;
            /**
             * @description The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).
             *
             * @enum {string}
             */
            type?: "message" | "function_call" | "function_call_output" | "item_reference";
            /**
             * @description Identifier for the API object being returned - always `realtime.item`.
             *
             * @enum {string}
             */
            object?: "realtime.item";
            /**
             * @description The status of the item (`completed`, `incomplete`, `in_progress`). These have no effect
             *     on the conversation, but are accepted for consistency with the
             *     `conversation.item.created` event.
             *
             * @enum {string}
             */
            status?: "completed" | "incomplete" | "in_progress";
            /**
             * @description The role of the message sender (`user`, `assistant`, `system`), only
             *     applicable for `message` items.
             *
             * @enum {string}
             */
            role?: "user" | "assistant" | "system";
            /** @description The content of the message, applicable for `message` items.
             *     - Message items of role `system` support only `input_text` content
             *     - Message items of role `user` support `input_text` and `input_audio`
             *       content
             *     - Message items of role `assistant` support `text` content.
             *      */
            content?: {
                /**
                 * @description The content type (`input_text`, `input_audio`, `item_reference`, `text`).
                 *
                 * @enum {string}
                 */
                type?: "input_text" | "input_audio" | "item_reference" | "text";
                /** @description The text content, used for `input_text` and `text` content types.
                 *      */
                text?: string;
                /** @description ID of a previous conversation item to reference (for `item_reference`
                 *     content types in `response.create` events). These can reference both
                 *     client and server created items.
                 *      */
                id?: string;
                /** @description Base64-encoded audio bytes, used for `input_audio` content type.
                 *      */
                audio?: string;
                /** @description The transcript of the audio, used for `input_audio` content type.
                 *      */
                transcript?: string;
            }[];
            /** @description The ID of the function call (for `function_call` and
             *     `function_call_output` items). If passed on a `function_call_output`
             *     item, the server will check that a `function_call` item with the same
             *     ID exists in the conversation history.
             *      */
            call_id?: string;
            /** @description The name of the function being called (for `function_call` items).
             *      */
            name?: string;
            /** @description The arguments of the function call (for `function_call` items).
             *      */
            arguments?: string;
            /** @description The output of the function call (for `function_call_output` items).
             *      */
            output?: string;
        };
        /** @description The response resource. */
        RealtimeResponse: {
            /** @description The unique ID of the response. */
            id?: string;
            /**
             * @description The object type, must be `realtime.response`.
             * @constant
             */
            object?: "realtime.response";
            /**
             * @description The final status of the response (`completed`, `cancelled`, `failed`, or
             *     `incomplete`, `in_progress`).
             *
             * @enum {string}
             */
            status?: "completed" | "cancelled" | "failed" | "incomplete" | "in_progress";
            /** @description Additional details about the status. */
            status_details?: {
                /**
                 * @description The type of error that caused the response to fail, corresponding
                 *     with the `status` field (`completed`, `cancelled`, `incomplete`,
                 *     `failed`).
                 *
                 * @enum {string}
                 */
                type?: "completed" | "cancelled" | "incomplete" | "failed";
                /**
                 * @description The reason the Response did not complete. For a `cancelled` Response,
                 *     one of `turn_detected` (the server VAD detected a new start of speech)
                 *     or `client_cancelled` (the client sent a cancel event). For an
                 *     `incomplete` Response, one of `max_output_tokens` or `content_filter`
                 *     (the server-side safety filter activated and cut off the response).
                 *
                 * @enum {string}
                 */
                reason?: "turn_detected" | "client_cancelled" | "max_output_tokens" | "content_filter";
                /** @description A description of the error that caused the response to fail,
                 *     populated when the `status` is `failed`.
                 *      */
                error?: {
                    /** @description The type of error. */
                    type?: string;
                    /** @description Error code, if any. */
                    code?: string;
                };
            };
            /** @description The list of output items generated by the response. */
            output?: components["schemas"]["RealtimeConversationItem"][];
            metadata?: components["schemas"]["Metadata"];
            /** @description Usage statistics for the Response, this will correspond to billing. A
             *     Realtime API session will maintain a conversation context and append new
             *     Items to the Conversation, thus output from previous turns (text and
             *     audio tokens) will become the input for later turns.
             *      */
            usage?: {
                /** @description The total number of tokens in the Response including input and output
                 *     text and audio tokens.
                 *      */
                total_tokens?: number;
                /** @description The number of input tokens used in the Response, including text and
                 *     audio tokens.
                 *      */
                input_tokens?: number;
                /** @description The number of output tokens sent in the Response, including text and
                 *     audio tokens.
                 *      */
                output_tokens?: number;
                /** @description Details about the input tokens used in the Response. */
                input_token_details?: {
                    /** @description The number of cached tokens used in the Response. */
                    cached_tokens?: number;
                    /** @description The number of text tokens used in the Response. */
                    text_tokens?: number;
                    /** @description The number of audio tokens used in the Response. */
                    audio_tokens?: number;
                };
                /** @description Details about the output tokens used in the Response. */
                output_token_details?: {
                    /** @description The number of text tokens used in the Response. */
                    text_tokens?: number;
                    /** @description The number of audio tokens used in the Response. */
                    audio_tokens?: number;
                };
            };
            /** @description Which conversation the response is added to, determined by the `conversation`
             *     field in the `response.create` event. If `auto`, the response will be added to
             *     the default conversation and the value of `conversation_id` will be an id like
             *     `conv_1234`. If `none`, the response will not be added to any conversation and
             *     the value of `conversation_id` will be `null`. If responses are being triggered
             *     by server VAD, the response will be added to the default conversation, thus
             *     the `conversation_id` will be an id like `conv_1234`.
             *      */
            conversation_id?: string;
            /** @description The voice the model used to respond.
             *     Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
             *     `shimmer`, and `verse`.
             *      */
            voice?: components["schemas"]["VoiceIdsShared"];
            /** @description The set of modalities the model used to respond. If there are multiple modalities,
             *     the model will pick one, for example if `modalities` is `["text", "audio"]`, the model
             *     could be responding in either text or audio.
             *      */
            modalities?: ("text" | "audio")[];
            /**
             * @description The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *
             * @enum {string}
             */
            output_audio_format?: "pcm16" | "g711_ulaw" | "g711_alaw";
            /** @description Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
             *      */
            temperature?: number;
            /** @description Maximum number of output tokens for a single assistant response,
             *     inclusive of tool calls, that was used in this response.
             *      */
            max_output_tokens?: number | "inf";
        };
        /** @description Create a new Realtime response with these parameters */
        RealtimeResponseCreateParams: {
            /** @description The set of modalities the model can respond with. To disable audio,
             *     set this to ["text"].
             *      */
            modalities?: ("text" | "audio")[];
            /** @description The default system instructions (i.e. system message) prepended to model
             *     calls. This field allows the client to guide the model on desired
             *     responses. The model can be instructed on response content and format,
             *     (e.g. "be extremely succinct", "act friendly", "here are examples of good
             *     responses") and on audio behavior (e.g. "talk quickly", "inject emotion
             *     into your voice", "laugh frequently"). The instructions are not guaranteed
             *     to be followed by the model, but they provide guidance to the model on the
             *     desired behavior.
             *
             *     Note that the server sets default instructions which will be used if this
             *     field is not set and are visible in the `session.created` event at the
             *     start of the session.
             *      */
            instructions?: string;
            /** @description The voice the model uses to respond. Voice cannot be changed during the
             *     session once the model has responded with audio at least once. Current
             *     voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
             *     `shimmer`, and `verse`.
             *      */
            voice?: components["schemas"]["VoiceIdsShared"];
            /**
             * @description The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *
             * @enum {string}
             */
            output_audio_format?: "pcm16" | "g711_ulaw" | "g711_alaw";
            /** @description Tools (functions) available to the model. */
            tools?: {
                /**
                 * @description The type of the tool, i.e. `function`.
                 * @enum {string}
                 */
                type?: "function";
                /** @description The name of the function. */
                name?: string;
                /** @description The description of the function, including guidance on when and how
                 *     to call it, and guidance about what to tell the user when calling
                 *     (if anything).
                 *      */
                description?: string;
                /** @description Parameters of the function in JSON Schema. */
                parameters?: Record<string, never>;
            }[];
            /** @description How the model chooses tools. Options are `auto`, `none`, `required`, or
             *     specify a function, like `{"type": "function", "function": {"name": "my_function"}}`.
             *      */
            tool_choice?: string;
            /** @description Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
             *      */
            temperature?: number;
            /** @description Maximum number of output tokens for a single assistant response,
             *     inclusive of tool calls. Provide an integer between 1 and 4096 to
             *     limit output tokens, or `inf` for the maximum available tokens for a
             *     given model. Defaults to `inf`.
             *      */
            max_response_output_tokens?: number | "inf";
            /** @description Controls which conversation the response is added to. Currently supports
             *     `auto` and `none`, with `auto` as the default value. The `auto` value
             *     means that the contents of the response will be added to the default
             *     conversation. Set this to `none` to create an out-of-band response which
             *     will not add items to default conversation.
             *      */
            conversation?: string | ("auto" | "none");
            metadata?: components["schemas"]["Metadata"];
            /** @description Input items to include in the prompt for the model. Using this field
             *     creates a new context for this Response instead of using the default
             *     conversation. An empty array `[]` will clear the context for this Response.
             *     Note that this can include references to items from the default conversation.
             *      */
            input?: components["schemas"]["RealtimeConversationItemWithReference"][];
        };
        /** @description A realtime server event.
         *      */
        RealtimeServerEvent: components["schemas"]["RealtimeServerEventConversationCreated"] | components["schemas"]["RealtimeServerEventConversationItemCreated"] | components["schemas"]["RealtimeServerEventConversationItemDeleted"] | components["schemas"]["RealtimeServerEventConversationItemInputAudioTranscriptionCompleted"] | components["schemas"]["RealtimeServerEventConversationItemInputAudioTranscriptionDelta"] | components["schemas"]["RealtimeServerEventConversationItemInputAudioTranscriptionFailed"] | components["schemas"]["RealtimeServerEventConversationItemRetrieved"] | components["schemas"]["RealtimeServerEventConversationItemTruncated"] | components["schemas"]["RealtimeServerEventError"] | components["schemas"]["RealtimeServerEventInputAudioBufferCleared"] | components["schemas"]["RealtimeServerEventInputAudioBufferCommitted"] | components["schemas"]["RealtimeServerEventInputAudioBufferSpeechStarted"] | components["schemas"]["RealtimeServerEventInputAudioBufferSpeechStopped"] | components["schemas"]["RealtimeServerEventRateLimitsUpdated"] | components["schemas"]["RealtimeServerEventResponseAudioDelta"] | components["schemas"]["RealtimeServerEventResponseAudioDone"] | components["schemas"]["RealtimeServerEventResponseAudioTranscriptDelta"] | components["schemas"]["RealtimeServerEventResponseAudioTranscriptDone"] | components["schemas"]["RealtimeServerEventResponseContentPartAdded"] | components["schemas"]["RealtimeServerEventResponseContentPartDone"] | components["schemas"]["RealtimeServerEventResponseCreated"] | components["schemas"]["RealtimeServerEventResponseDone"] | components["schemas"]["RealtimeServerEventResponseFunctionCallArgumentsDelta"] | components["schemas"]["RealtimeServerEventResponseFunctionCallArgumentsDone"] | components["schemas"]["RealtimeServerEventResponseOutputItemAdded"] | components["schemas"]["RealtimeServerEventResponseOutputItemDone"] | components["schemas"]["RealtimeServerEventResponseTextDelta"] | components["schemas"]["RealtimeServerEventResponseTextDone"] | components["schemas"]["RealtimeServerEventSessionCreated"] | components["schemas"]["RealtimeServerEventSessionUpdated"] | components["schemas"]["RealtimeServerEventTranscriptionSessionUpdated"] | components["schemas"]["RealtimeServerEventOutputAudioBufferStarted"] | components["schemas"]["RealtimeServerEventOutputAudioBufferStopped"] | components["schemas"]["RealtimeServerEventOutputAudioBufferCleared"];
        /** @description Returned when a conversation is created. Emitted right after session creation.
         *      */
        RealtimeServerEventConversationCreated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `conversation.created`.
             * @constant
             */
            type: "conversation.created";
            /** @description The conversation resource. */
            conversation: {
                /** @description The unique ID of the conversation. */
                id?: string;
                /**
                 * @description The object type, must be `realtime.conversation`.
                 * @constant
                 */
                object?: "realtime.conversation";
            };
        };
        /** @description Returned when a conversation item is created. There are several scenarios that produce this event:
         *       - The server is generating a Response, which if successful will produce
         *         either one or two Items, which will be of type `message`
         *         (role `assistant`) or type `function_call`.
         *       - The input audio buffer has been committed, either by the client or the
         *         server (in `server_vad` mode). The server will take the content of the
         *         input audio buffer and add it to a new user message Item.
         *       - The client has sent a `conversation.item.create` event to add a new Item
         *         to the Conversation.
         *      */
        RealtimeServerEventConversationItemCreated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `conversation.item.created`.
             * @constant
             */
            type: "conversation.item.created";
            /** @description The ID of the preceding item in the Conversation context, allows the
             *     client to understand the order of the conversation. Can be `null` if the
             *     item has no predecessor.
             *      */
            previous_item_id?: string | null;
            item: components["schemas"]["RealtimeConversationItem"];
        };
        /** @description Returned when an item in the conversation is deleted by the client with a
         *     `conversation.item.delete` event. This event is used to synchronize the
         *     server's understanding of the conversation history with the client's view.
         *      */
        RealtimeServerEventConversationItemDeleted: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `conversation.item.deleted`.
             * @constant
             */
            type: "conversation.item.deleted";
            /** @description The ID of the item that was deleted. */
            item_id: string;
        };
        /** @description This event is the output of audio transcription for user audio written to the
         *     user audio buffer. Transcription begins when the input audio buffer is
         *     committed by the client or server (in `server_vad` mode). Transcription runs
         *     asynchronously with Response creation, so this event may come before or after
         *     the Response events.
         *
         *     Realtime API models accept audio natively, and thus input transcription is a
         *     separate process run on a separate ASR (Automatic Speech Recognition) model.
         *     The transcript may diverge somewhat from the model's interpretation, and
         *     should be treated as a rough guide.
         *      */
        RealtimeServerEventConversationItemInputAudioTranscriptionCompleted: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be
             *     `conversation.item.input_audio_transcription.completed`.
             *
             * @enum {string}
             */
            type: "conversation.item.input_audio_transcription.completed";
            /** @description The ID of the user message item containing the audio. */
            item_id: string;
            /** @description The index of the content part containing the audio. */
            content_index: number;
            /** @description The transcribed text. */
            transcript: string;
            /** @description The log probabilities of the transcription. */
            logprobs?: components["schemas"]["LogProbProperties"][] | null;
            /** @description Usage statistics for the transcription. */
            usage: components["schemas"]["TranscriptTextUsageTokens"] | components["schemas"]["TranscriptTextUsageDuration"];
        };
        /** @description Returned when the text value of an input audio transcription content part is updated.
         *      */
        RealtimeServerEventConversationItemInputAudioTranscriptionDelta: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `conversation.item.input_audio_transcription.delta`.
             * @constant
             */
            type: "conversation.item.input_audio_transcription.delta";
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the content part in the item's content array. */
            content_index?: number;
            /** @description The text delta. */
            delta?: string;
            /** @description The log probabilities of the transcription. */
            logprobs?: components["schemas"]["LogProbProperties"][] | null;
        };
        /** @description Returned when input audio transcription is configured, and a transcription
         *     request for a user message failed. These events are separate from other
         *     `error` events so that the client can identify the related Item.
         *      */
        RealtimeServerEventConversationItemInputAudioTranscriptionFailed: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be
             *     `conversation.item.input_audio_transcription.failed`.
             *
             * @enum {string}
             */
            type: "conversation.item.input_audio_transcription.failed";
            /** @description The ID of the user message item. */
            item_id: string;
            /** @description The index of the content part containing the audio. */
            content_index: number;
            /** @description Details of the transcription error. */
            error: {
                /** @description The type of error. */
                type?: string;
                /** @description Error code, if any. */
                code?: string;
                /** @description A human-readable error message. */
                message?: string;
                /** @description Parameter related to the error, if any. */
                param?: string;
            };
        };
        /** @description Returned when a conversation item is retrieved with `conversation.item.retrieve`.
         *      */
        RealtimeServerEventConversationItemRetrieved: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `conversation.item.retrieved`.
             * @constant
             */
            type: "conversation.item.retrieved";
            item: components["schemas"]["RealtimeConversationItem"];
        };
        /** @description Returned when an earlier assistant audio message item is truncated by the
         *     client with a `conversation.item.truncate` event. This event is used to
         *     synchronize the server's understanding of the audio with the client's playback.
         *
         *     This action will truncate the audio and remove the server-side text transcript
         *     to ensure there is no text in the context that hasn't been heard by the user.
         *      */
        RealtimeServerEventConversationItemTruncated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `conversation.item.truncated`.
             * @constant
             */
            type: "conversation.item.truncated";
            /** @description The ID of the assistant message item that was truncated. */
            item_id: string;
            /** @description The index of the content part that was truncated. */
            content_index: number;
            /** @description The duration up to which the audio was truncated, in milliseconds.
             *      */
            audio_end_ms: number;
        };
        /** @description Returned when an error occurs, which could be a client problem or a server
         *     problem. Most errors are recoverable and the session will stay open, we
         *     recommend to implementors to monitor and log error messages by default.
         *      */
        RealtimeServerEventError: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `error`.
             * @constant
             */
            type: "error";
            /** @description Details of the error. */
            error: {
                /** @description The type of error (e.g., "invalid_request_error", "server_error").
                 *      */
                type: string;
                /** @description Error code, if any. */
                code?: string | null;
                /** @description A human-readable error message. */
                message: string;
                /** @description Parameter related to the error, if any. */
                param?: string | null;
                /** @description The event_id of the client event that caused the error, if applicable.
                 *      */
                event_id?: string | null;
            };
        };
        /** @description Returned when the input audio buffer is cleared by the client with a
         *     `input_audio_buffer.clear` event.
         *      */
        RealtimeServerEventInputAudioBufferCleared: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `input_audio_buffer.cleared`.
             * @constant
             */
            type: "input_audio_buffer.cleared";
        };
        /** @description Returned when an input audio buffer is committed, either by the client or
         *     automatically in server VAD mode. The `item_id` property is the ID of the user
         *     message item that will be created, thus a `conversation.item.created` event
         *     will also be sent to the client.
         *      */
        RealtimeServerEventInputAudioBufferCommitted: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `input_audio_buffer.committed`.
             * @constant
             */
            type: "input_audio_buffer.committed";
            /** @description The ID of the preceding item after which the new item will be inserted.
             *     Can be `null` if the item has no predecessor.
             *      */
            previous_item_id?: string | null;
            /** @description The ID of the user message item that will be created. */
            item_id: string;
        };
        /** @description Sent by the server when in `server_vad` mode to indicate that speech has been
         *     detected in the audio buffer. This can happen any time audio is added to the
         *     buffer (unless speech is already detected). The client may want to use this
         *     event to interrupt audio playback or provide visual feedback to the user.
         *
         *     The client should expect to receive a `input_audio_buffer.speech_stopped` event
         *     when speech stops. The `item_id` property is the ID of the user message item
         *     that will be created when speech stops and will also be included in the
         *     `input_audio_buffer.speech_stopped` event (unless the client manually commits
         *     the audio buffer during VAD activation).
         *      */
        RealtimeServerEventInputAudioBufferSpeechStarted: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `input_audio_buffer.speech_started`.
             * @constant
             */
            type: "input_audio_buffer.speech_started";
            /** @description Milliseconds from the start of all audio written to the buffer during the
             *     session when speech was first detected. This will correspond to the
             *     beginning of audio sent to the model, and thus includes the
             *     `prefix_padding_ms` configured in the Session.
             *      */
            audio_start_ms: number;
            /** @description The ID of the user message item that will be created when speech stops.
             *      */
            item_id: string;
        };
        /** @description Returned in `server_vad` mode when the server detects the end of speech in
         *     the audio buffer. The server will also send an `conversation.item.created`
         *     event with the user message item that is created from the audio buffer.
         *      */
        RealtimeServerEventInputAudioBufferSpeechStopped: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `input_audio_buffer.speech_stopped`.
             * @constant
             */
            type: "input_audio_buffer.speech_stopped";
            /** @description Milliseconds since the session started when speech stopped. This will
             *     correspond to the end of audio sent to the model, and thus includes the
             *     `min_silence_duration_ms` configured in the Session.
             *      */
            audio_end_ms: number;
            /** @description The ID of the user message item that will be created. */
            item_id: string;
        };
        /** @description **WebRTC Only:** Emitted when the output audio buffer is cleared. This happens either in VAD
         *     mode when the user has interrupted (`input_audio_buffer.speech_started`),
         *     or when the client has emitted the `output_audio_buffer.clear` event to manually
         *     cut off the current audio response.
         *     [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
         *      */
        RealtimeServerEventOutputAudioBufferCleared: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `output_audio_buffer.cleared`.
             * @constant
             */
            type: "output_audio_buffer.cleared";
            /** @description The unique ID of the response that produced the audio. */
            response_id: string;
        };
        /** @description **WebRTC Only:** Emitted when the server begins streaming audio to the client. This event is
         *     emitted after an audio content part has been added (`response.content_part.added`)
         *     to the response.
         *     [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
         *      */
        RealtimeServerEventOutputAudioBufferStarted: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `output_audio_buffer.started`.
             * @constant
             */
            type: "output_audio_buffer.started";
            /** @description The unique ID of the response that produced the audio. */
            response_id: string;
        };
        /** @description **WebRTC Only:** Emitted when the output audio buffer has been completely drained on the server,
         *     and no more audio is forthcoming. This event is emitted after the full response
         *     data has been sent to the client (`response.done`).
         *     [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).
         *      */
        RealtimeServerEventOutputAudioBufferStopped: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `output_audio_buffer.stopped`.
             * @constant
             */
            type: "output_audio_buffer.stopped";
            /** @description The unique ID of the response that produced the audio. */
            response_id: string;
        };
        /** @description Emitted at the beginning of a Response to indicate the updated rate limits.
         *     When a Response is created some tokens will be "reserved" for the output
         *     tokens, the rate limits shown here reflect that reservation, which is then
         *     adjusted accordingly once the Response is completed.
         *      */
        RealtimeServerEventRateLimitsUpdated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `rate_limits.updated`.
             * @constant
             */
            type: "rate_limits.updated";
            /** @description List of rate limit information. */
            rate_limits: {
                /**
                 * @description The name of the rate limit (`requests`, `tokens`).
                 *
                 * @enum {string}
                 */
                name?: "requests" | "tokens";
                /** @description The maximum allowed value for the rate limit. */
                limit?: number;
                /** @description The remaining value before the limit is reached. */
                remaining?: number;
                /** @description Seconds until the rate limit resets. */
                reset_seconds?: number;
            }[];
        };
        /** @description Returned when the model-generated audio is updated. */
        RealtimeServerEventResponseAudioDelta: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.audio.delta`.
             * @constant
             */
            type: "response.audio.delta";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description Base64-encoded audio data delta. */
            delta: string;
        };
        /** @description Returned when the model-generated audio is done. Also emitted when a Response
         *     is interrupted, incomplete, or cancelled.
         *      */
        RealtimeServerEventResponseAudioDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.audio.done`.
             * @constant
             */
            type: "response.audio.done";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
        };
        /** @description Returned when the model-generated transcription of audio output is updated.
         *      */
        RealtimeServerEventResponseAudioTranscriptDelta: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.audio_transcript.delta`.
             * @constant
             */
            type: "response.audio_transcript.delta";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description The transcript delta. */
            delta: string;
        };
        /** @description Returned when the model-generated transcription of audio output is done
         *     streaming. Also emitted when a Response is interrupted, incomplete, or
         *     cancelled.
         *      */
        RealtimeServerEventResponseAudioTranscriptDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.audio_transcript.done`.
             * @constant
             */
            type: "response.audio_transcript.done";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description The final transcript of the audio. */
            transcript: string;
        };
        /** @description Returned when a new content part is added to an assistant message item during
         *     response generation.
         *      */
        RealtimeServerEventResponseContentPartAdded: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.content_part.added`.
             * @constant
             */
            type: "response.content_part.added";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item to which the content part was added. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description The content part that was added. */
            part: {
                /**
                 * @description The content type ("text", "audio").
                 * @enum {string}
                 */
                type?: "text" | "audio";
                /** @description The text content (if type is "text"). */
                text?: string;
                /** @description Base64-encoded audio data (if type is "audio"). */
                audio?: string;
                /** @description The transcript of the audio (if type is "audio"). */
                transcript?: string;
            };
        };
        /** @description Returned when a content part is done streaming in an assistant message item.
         *     Also emitted when a Response is interrupted, incomplete, or cancelled.
         *      */
        RealtimeServerEventResponseContentPartDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.content_part.done`.
             * @constant
             */
            type: "response.content_part.done";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description The content part that is done. */
            part: {
                /**
                 * @description The content type ("text", "audio").
                 * @enum {string}
                 */
                type?: "text" | "audio";
                /** @description The text content (if type is "text"). */
                text?: string;
                /** @description Base64-encoded audio data (if type is "audio"). */
                audio?: string;
                /** @description The transcript of the audio (if type is "audio"). */
                transcript?: string;
            };
        };
        /** @description Returned when a new Response is created. The first event of response creation,
         *     where the response is in an initial state of `in_progress`.
         *      */
        RealtimeServerEventResponseCreated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.created`.
             * @constant
             */
            type: "response.created";
            response: components["schemas"]["RealtimeResponse"];
        };
        /** @description Returned when a Response is done streaming. Always emitted, no matter the
         *     final state. The Response object included in the `response.done` event will
         *     include all output Items in the Response but will omit the raw audio data.
         *      */
        RealtimeServerEventResponseDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.done`.
             * @constant
             */
            type: "response.done";
            response: components["schemas"]["RealtimeResponse"];
        };
        /** @description Returned when the model-generated function call arguments are updated.
         *      */
        RealtimeServerEventResponseFunctionCallArgumentsDelta: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.function_call_arguments.delta`.
             *
             * @constant
             */
            type: "response.function_call_arguments.delta";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the function call item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The ID of the function call. */
            call_id: string;
            /** @description The arguments delta as a JSON string. */
            delta: string;
        };
        /** @description Returned when the model-generated function call arguments are done streaming.
         *     Also emitted when a Response is interrupted, incomplete, or cancelled.
         *      */
        RealtimeServerEventResponseFunctionCallArgumentsDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.function_call_arguments.done`.
             *
             * @constant
             */
            type: "response.function_call_arguments.done";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the function call item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The ID of the function call. */
            call_id: string;
            /** @description The final arguments as a JSON string. */
            arguments: string;
        };
        /** @description Returned when a new Item is created during Response generation. */
        RealtimeServerEventResponseOutputItemAdded: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.output_item.added`.
             * @constant
             */
            type: "response.output_item.added";
            /** @description The ID of the Response to which the item belongs. */
            response_id: string;
            /** @description The index of the output item in the Response. */
            output_index: number;
            item: components["schemas"]["RealtimeConversationItem"];
        };
        /** @description Returned when an Item is done streaming. Also emitted when a Response is
         *     interrupted, incomplete, or cancelled.
         *      */
        RealtimeServerEventResponseOutputItemDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.output_item.done`.
             * @constant
             */
            type: "response.output_item.done";
            /** @description The ID of the Response to which the item belongs. */
            response_id: string;
            /** @description The index of the output item in the Response. */
            output_index: number;
            item: components["schemas"]["RealtimeConversationItem"];
        };
        /** @description Returned when the text value of a "text" content part is updated. */
        RealtimeServerEventResponseTextDelta: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.text.delta`.
             * @constant
             */
            type: "response.text.delta";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description The text delta. */
            delta: string;
        };
        /** @description Returned when the text value of a "text" content part is done streaming. Also
         *     emitted when a Response is interrupted, incomplete, or cancelled.
         *      */
        RealtimeServerEventResponseTextDone: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `response.text.done`.
             * @constant
             */
            type: "response.text.done";
            /** @description The ID of the response. */
            response_id: string;
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item in the response. */
            output_index: number;
            /** @description The index of the content part in the item's content array. */
            content_index: number;
            /** @description The final text content. */
            text: string;
        };
        /** @description Returned when a Session is created. Emitted automatically when a new
         *     connection is established as the first server event. This event will contain
         *     the default Session configuration.
         *      */
        RealtimeServerEventSessionCreated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `session.created`.
             * @constant
             */
            type: "session.created";
            session: components["schemas"]["RealtimeSession"];
        };
        /** @description Returned when a session is updated with a `session.update` event, unless
         *     there is an error.
         *      */
        RealtimeServerEventSessionUpdated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `session.updated`.
             * @constant
             */
            type: "session.updated";
            session: components["schemas"]["RealtimeSession"];
        };
        /** @description Returned when a transcription session is updated with a `transcription_session.update` event, unless
         *     there is an error.
         *      */
        RealtimeServerEventTranscriptionSessionUpdated: {
            /** @description The unique ID of the server event. */
            event_id: string;
            /**
             * @description The event type, must be `transcription_session.updated`.
             * @constant
             */
            type: "transcription_session.updated";
            session: components["schemas"]["RealtimeTranscriptionSessionCreateResponse"];
        };
        /** @description Realtime session object configuration. */
        RealtimeSession: {
            /** @description Unique identifier for the session that looks like `sess_1234567890abcdef`.
             *      */
            id?: string;
            /** @description The set of modalities the model can respond with. To disable audio,
             *     set this to ["text"].
             *      */
            modalities?: unknown;
            /**
             * @description The Realtime model used for this session.
             *
             * @enum {string}
             */
            model?: "gpt-4o-realtime-preview" | "gpt-4o-realtime-preview-2024-10-01" | "gpt-4o-realtime-preview-2024-12-17" | "gpt-4o-realtime-preview-2025-06-03" | "gpt-4o-mini-realtime-preview" | "gpt-4o-mini-realtime-preview-2024-12-17";
            /** @description The default system instructions (i.e. system message) prepended to model
             *     calls. This field allows the client to guide the model on desired
             *     responses. The model can be instructed on response content and format,
             *     (e.g. "be extremely succinct", "act friendly", "here are examples of good
             *     responses") and on audio behavior (e.g. "talk quickly", "inject emotion
             *     into your voice", "laugh frequently"). The instructions are not
             *     guaranteed to be followed by the model, but they provide guidance to the
             *     model on the desired behavior.
             *
             *
             *     Note that the server sets default instructions which will be used if this
             *     field is not set and are visible in the `session.created` event at the
             *     start of the session.
             *      */
            instructions?: string;
            /** @description The voice the model uses to respond. Voice cannot be changed during the
             *     session once the model has responded with audio at least once. Current
             *     voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
             *     `shimmer`, and `verse`.
             *      */
            voice?: components["schemas"]["VoiceIdsShared"];
            /**
             * @description The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *     For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
             *     single channel (mono), and little-endian byte order.
             *
             * @default pcm16
             * @enum {string}
             */
            input_audio_format: "pcm16" | "g711_ulaw" | "g711_alaw";
            /**
             * @description The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *     For `pcm16`, output audio is sampled at a rate of 24kHz.
             *
             * @default pcm16
             * @enum {string}
             */
            output_audio_format: "pcm16" | "g711_ulaw" | "g711_alaw";
            /** @description Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
             *      */
            input_audio_transcription?: {
                /** @description The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
                 *      */
                model?: string;
                /** @description The language of the input audio. Supplying the input language in
                 *     [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
                 *     will improve accuracy and latency.
                 *      */
                language?: string;
                /** @description An optional text to guide the model's style or continue a previous audio
                 *     segment.
                 *     For `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).
                 *     For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
                 *      */
                prompt?: string;
            };
            /** @description Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
             *     Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
             *     Semantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
             *      */
            turn_detection?: {
                /**
                 * @description Type of turn detection.
                 *
                 * @default server_vad
                 * @enum {string}
                 */
                type: "server_vad" | "semantic_vad";
                /**
                 * @description Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
                 *
                 * @default auto
                 * @enum {string}
                 */
                eagerness: "low" | "medium" | "high" | "auto";
                /** @description Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
                 *     higher threshold will require louder audio to activate the model, and
                 *     thus might perform better in noisy environments.
                 *      */
                threshold?: number;
                /** @description Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in
                 *     milliseconds). Defaults to 300ms.
                 *      */
                prefix_padding_ms?: number;
                /** @description Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults
                 *     to 500ms. With shorter values the model will respond more quickly,
                 *     but may jump in on short pauses from the user.
                 *      */
                silence_duration_ms?: number;
                /**
                 * @description Whether or not to automatically generate a response when a VAD stop event occurs.
                 *
                 * @default true
                 */
                create_response: boolean;
                /**
                 * @description Whether or not to automatically interrupt any ongoing response with output to the default
                 *     conversation (i.e. `conversation` of `auto`) when a VAD start event occurs.
                 *
                 * @default true
                 */
                interrupt_response: boolean;
            };
            /** @description Configuration for input audio noise reduction. This can be set to `null` to turn off.
             *     Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
             *     Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
             *      */
            input_audio_noise_reduction?: {
                /**
                 * @description Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
                 *
                 * @enum {string}
                 */
                type?: "near_field" | "far_field";
            };
            /**
             * @description The speed of the model's spoken response. 1.0 is the default speed. 0.25 is
             *     the minimum speed. 1.5 is the maximum speed. This value can only be changed
             *     in between model turns, not while a response is in progress.
             *
             * @default 1
             */
            speed: number;
            /**
             * Tracing Configuration
             * @description Configuration options for tracing. Set to null to disable tracing. Once
             *     tracing is enabled for a session, the configuration cannot be modified.
             *
             *     `auto` will create a trace for the session with default values for the
             *     workflow name, group id, and metadata.
             *
             */
            tracing?: "auto" | {
                /** @description The name of the workflow to attach to this trace. This is used to
                 *     name the trace in the traces dashboard.
                 *      */
                workflow_name?: string;
                /** @description The group id to attach to this trace to enable filtering and
                 *     grouping in the traces dashboard.
                 *      */
                group_id?: string;
                /** @description The arbitrary metadata to attach to this trace to enable
                 *     filtering in the traces dashboard.
                 *      */
                metadata?: Record<string, never>;
            };
            /** @description Tools (functions) available to the model. */
            tools?: {
                /**
                 * @description The type of the tool, i.e. `function`.
                 * @enum {string}
                 */
                type?: "function";
                /** @description The name of the function. */
                name?: string;
                /** @description The description of the function, including guidance on when and how
                 *     to call it, and guidance about what to tell the user when calling
                 *     (if anything).
                 *      */
                description?: string;
                /** @description Parameters of the function in JSON Schema. */
                parameters?: Record<string, never>;
            }[];
            /**
             * @description How the model chooses tools. Options are `auto`, `none`, `required`, or
             *     specify a function.
             *
             * @default auto
             */
            tool_choice: string;
            /**
             * @description Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.
             *
             * @default 0.8
             */
            temperature: number;
            /** @description Maximum number of output tokens for a single assistant response,
             *     inclusive of tool calls. Provide an integer between 1 and 4096 to
             *     limit output tokens, or `inf` for the maximum available tokens for a
             *     given model. Defaults to `inf`.
             *      */
            max_response_output_tokens?: number | "inf";
        };
        /** @description Realtime session object configuration. */
        RealtimeSessionCreateRequest: {
            /** @description The set of modalities the model can respond with. To disable audio,
             *     set this to ["text"].
             *      */
            modalities?: unknown;
            /**
             * @description The Realtime model used for this session.
             *
             * @enum {string}
             */
            model?: "gpt-4o-realtime-preview" | "gpt-4o-realtime-preview-2024-10-01" | "gpt-4o-realtime-preview-2024-12-17" | "gpt-4o-realtime-preview-2025-06-03" | "gpt-4o-mini-realtime-preview" | "gpt-4o-mini-realtime-preview-2024-12-17";
            /** @description The default system instructions (i.e. system message) prepended to model calls. This field allows the client to guide the model on desired responses. The model can be instructed on response content and format, (e.g. "be extremely succinct", "act friendly", "here are examples of good responses") and on audio behavior (e.g. "talk quickly", "inject emotion into your voice", "laugh frequently"). The instructions are not guaranteed to be followed by the model, but they provide guidance to the model on the desired behavior.
             *
             *     Note that the server sets default instructions which will be used if this field is not set and are visible in the `session.created` event at the start of the session.
             *      */
            instructions?: string;
            /** @description The voice the model uses to respond. Voice cannot be changed during the
             *     session once the model has responded with audio at least once. Current
             *     voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
             *     `shimmer`, and `verse`.
             *      */
            voice?: components["schemas"]["VoiceIdsShared"];
            /**
             * @description The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *     For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
             *     single channel (mono), and little-endian byte order.
             *
             * @default pcm16
             * @enum {string}
             */
            input_audio_format: "pcm16" | "g711_ulaw" | "g711_alaw";
            /**
             * @description The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *     For `pcm16`, output audio is sampled at a rate of 24kHz.
             *
             * @default pcm16
             * @enum {string}
             */
            output_audio_format: "pcm16" | "g711_ulaw" | "g711_alaw";
            /** @description Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
             *      */
            input_audio_transcription?: {
                /** @description The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
                 *      */
                model?: string;
                /** @description The language of the input audio. Supplying the input language in
                 *     [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
                 *     will improve accuracy and latency.
                 *      */
                language?: string;
                /** @description An optional text to guide the model's style or continue a previous audio
                 *     segment.
                 *     For `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).
                 *     For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
                 *      */
                prompt?: string;
            };
            /** @description Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
             *     Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
             *     Semantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
             *      */
            turn_detection?: {
                /**
                 * @description Type of turn detection.
                 *
                 * @default server_vad
                 * @enum {string}
                 */
                type: "server_vad" | "semantic_vad";
                /**
                 * @description Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
                 *
                 * @default auto
                 * @enum {string}
                 */
                eagerness: "low" | "medium" | "high" | "auto";
                /** @description Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
                 *     higher threshold will require louder audio to activate the model, and
                 *     thus might perform better in noisy environments.
                 *      */
                threshold?: number;
                /** @description Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in
                 *     milliseconds). Defaults to 300ms.
                 *      */
                prefix_padding_ms?: number;
                /** @description Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults
                 *     to 500ms. With shorter values the model will respond more quickly,
                 *     but may jump in on short pauses from the user.
                 *      */
                silence_duration_ms?: number;
                /**
                 * @description Whether or not to automatically generate a response when a VAD stop event occurs.
                 *
                 * @default true
                 */
                create_response: boolean;
                /**
                 * @description Whether or not to automatically interrupt any ongoing response with output to the default
                 *     conversation (i.e. `conversation` of `auto`) when a VAD start event occurs.
                 *
                 * @default true
                 */
                interrupt_response: boolean;
            };
            /** @description Configuration for input audio noise reduction. This can be set to `null` to turn off.
             *     Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
             *     Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
             *      */
            input_audio_noise_reduction?: {
                /**
                 * @description Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
                 *
                 * @enum {string}
                 */
                type?: "near_field" | "far_field";
            };
            /**
             * @description The speed of the model's spoken response. 1.0 is the default speed. 0.25 is
             *     the minimum speed. 1.5 is the maximum speed. This value can only be changed
             *     in between model turns, not while a response is in progress.
             *
             * @default 1
             */
            speed: number;
            /**
             * Tracing Configuration
             * @description Configuration options for tracing. Set to null to disable tracing. Once
             *     tracing is enabled for a session, the configuration cannot be modified.
             *
             *     `auto` will create a trace for the session with default values for the
             *     workflow name, group id, and metadata.
             *
             */
            tracing?: "auto" | {
                /** @description The name of the workflow to attach to this trace. This is used to
                 *     name the trace in the traces dashboard.
                 *      */
                workflow_name?: string;
                /** @description The group id to attach to this trace to enable filtering and
                 *     grouping in the traces dashboard.
                 *      */
                group_id?: string;
                /** @description The arbitrary metadata to attach to this trace to enable
                 *     filtering in the traces dashboard.
                 *      */
                metadata?: Record<string, never>;
            };
            /** @description Tools (functions) available to the model. */
            tools?: {
                /**
                 * @description The type of the tool, i.e. `function`.
                 * @enum {string}
                 */
                type?: "function";
                /** @description The name of the function. */
                name?: string;
                /** @description The description of the function, including guidance on when and how
                 *     to call it, and guidance about what to tell the user when calling
                 *     (if anything).
                 *      */
                description?: string;
                /** @description Parameters of the function in JSON Schema. */
                parameters?: Record<string, never>;
            }[];
            /**
             * @description How the model chooses tools. Options are `auto`, `none`, `required`, or
             *     specify a function.
             *
             * @default auto
             */
            tool_choice: string;
            /**
             * @description Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.
             *
             * @default 0.8
             */
            temperature: number;
            /** @description Maximum number of output tokens for a single assistant response,
             *     inclusive of tool calls. Provide an integer between 1 and 4096 to
             *     limit output tokens, or `inf` for the maximum available tokens for a
             *     given model. Defaults to `inf`.
             *      */
            max_response_output_tokens?: number | "inf";
            /** @description Configuration options for the generated client secret.
             *      */
            client_secret?: {
                /** @description Configuration for the ephemeral token expiration.
                 *      */
                expires_after?: {
                    /**
                     * @description The anchor point for the ephemeral token expiration. Only `created_at` is currently supported.
                     *
                     * @enum {string}
                     */
                    anchor: "created_at";
                    /**
                     * @description The number of seconds from the anchor point to the expiration. Select a value between `10` and `7200`.
                     *
                     * @default 600
                     */
                    seconds: number;
                };
            };
        };
        /** @description A new Realtime session configuration, with an ephemeral key. Default TTL
         *     for keys is one minute.
         *      */
        RealtimeSessionCreateResponse: {
            /** @description Ephemeral key returned by the API. */
            client_secret: {
                /** @description Ephemeral key usable in client environments to authenticate connections
                 *     to the Realtime API. Use this in client-side environments rather than
                 *     a standard API token, which should only be used server-side.
                 *      */
                value: string;
                /** @description Timestamp for when the token expires. Currently, all tokens expire
                 *     after one minute.
                 *      */
                expires_at: number;
            };
            /** @description The set of modalities the model can respond with. To disable audio,
             *     set this to ["text"].
             *      */
            modalities?: unknown;
            /** @description The default system instructions (i.e. system message) prepended to model
             *     calls. This field allows the client to guide the model on desired
             *     responses. The model can be instructed on response content and format,
             *     (e.g. "be extremely succinct", "act friendly", "here are examples of good
             *     responses") and on audio behavior (e.g. "talk quickly", "inject emotion
             *     into your voice", "laugh frequently"). The instructions are not guaranteed
             *     to be followed by the model, but they provide guidance to the model on the
             *     desired behavior.
             *
             *     Note that the server sets default instructions which will be used if this
             *     field is not set and are visible in the `session.created` event at the
             *     start of the session.
             *      */
            instructions?: string;
            /** @description The voice the model uses to respond. Voice cannot be changed during the
             *     session once the model has responded with audio at least once. Current
             *     voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`,
             *     `shimmer`, and `verse`.
             *      */
            voice?: components["schemas"]["VoiceIdsShared"];
            /** @description The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *      */
            input_audio_format?: string;
            /** @description The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *      */
            output_audio_format?: string;
            /** @description Configuration for input audio transcription, defaults to off and can be
             *     set to `null` to turn off once on. Input audio transcription is not native
             *     to the model, since the model consumes audio directly. Transcription runs
             *     asynchronously and should be treated as rough guidance
             *     rather than the representation understood by the model.
             *      */
            input_audio_transcription?: {
                /** @description The model to use for transcription.
                 *      */
                model?: string;
            };
            /**
             * @description The speed of the model's spoken response. 1.0 is the default speed. 0.25 is
             *     the minimum speed. 1.5 is the maximum speed. This value can only be changed
             *     in between model turns, not while a response is in progress.
             *
             * @default 1
             */
            speed: number;
            /**
             * Tracing Configuration
             * @description Configuration options for tracing. Set to null to disable tracing. Once
             *     tracing is enabled for a session, the configuration cannot be modified.
             *
             *     `auto` will create a trace for the session with default values for the
             *     workflow name, group id, and metadata.
             *
             */
            tracing?: "auto" | {
                /** @description The name of the workflow to attach to this trace. This is used to
                 *     name the trace in the traces dashboard.
                 *      */
                workflow_name?: string;
                /** @description The group id to attach to this trace to enable filtering and
                 *     grouping in the traces dashboard.
                 *      */
                group_id?: string;
                /** @description The arbitrary metadata to attach to this trace to enable
                 *     filtering in the traces dashboard.
                 *      */
                metadata?: Record<string, never>;
            };
            /** @description Configuration for turn detection. Can be set to `null` to turn off. Server
             *     VAD means that the model will detect the start and end of speech based on
             *     audio volume and respond at the end of user speech.
             *      */
            turn_detection?: {
                /** @description Type of turn detection, only `server_vad` is currently supported.
                 *      */
                type?: string;
                /** @description Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
                 *     higher threshold will require louder audio to activate the model, and
                 *     thus might perform better in noisy environments.
                 *      */
                threshold?: number;
                /** @description Amount of audio to include before the VAD detected speech (in
                 *     milliseconds). Defaults to 300ms.
                 *      */
                prefix_padding_ms?: number;
                /** @description Duration of silence to detect speech stop (in milliseconds). Defaults
                 *     to 500ms. With shorter values the model will respond more quickly,
                 *     but may jump in on short pauses from the user.
                 *      */
                silence_duration_ms?: number;
            };
            /** @description Tools (functions) available to the model. */
            tools?: {
                /**
                 * @description The type of the tool, i.e. `function`.
                 * @enum {string}
                 */
                type?: "function";
                /** @description The name of the function. */
                name?: string;
                /** @description The description of the function, including guidance on when and how
                 *     to call it, and guidance about what to tell the user when calling
                 *     (if anything).
                 *      */
                description?: string;
                /** @description Parameters of the function in JSON Schema. */
                parameters?: Record<string, never>;
            }[];
            /** @description How the model chooses tools. Options are `auto`, `none`, `required`, or
             *     specify a function.
             *      */
            tool_choice?: string;
            /** @description Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.
             *      */
            temperature?: number;
            /** @description Maximum number of output tokens for a single assistant response,
             *     inclusive of tool calls. Provide an integer between 1 and 4096 to
             *     limit output tokens, or `inf` for the maximum available tokens for a
             *     given model. Defaults to `inf`.
             *      */
            max_response_output_tokens?: number | "inf";
        };
        /** @description Realtime transcription session object configuration. */
        RealtimeTranscriptionSessionCreateRequest: {
            /** @description The set of modalities the model can respond with. To disable audio,
             *     set this to ["text"].
             *      */
            modalities?: unknown;
            /**
             * @description The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *     For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,
             *     single channel (mono), and little-endian byte order.
             *
             * @default pcm16
             * @enum {string}
             */
            input_audio_format: "pcm16" | "g711_ulaw" | "g711_alaw";
            /** @description Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.
             *      */
            input_audio_transcription?: {
                /**
                 * @description The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.
                 *
                 * @enum {string}
                 */
                model?: "gpt-4o-transcribe" | "gpt-4o-mini-transcribe" | "whisper-1";
                /** @description The language of the input audio. Supplying the input language in
                 *     [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
                 *     will improve accuracy and latency.
                 *      */
                language?: string;
                /** @description An optional text to guide the model's style or continue a previous audio
                 *     segment.
                 *     For `whisper-1`, the [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).
                 *     For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology".
                 *      */
                prompt?: string;
            };
            /** @description Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
             *     Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
             *     Semantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.
             *      */
            turn_detection?: {
                /**
                 * @description Type of turn detection.
                 *
                 * @default server_vad
                 * @enum {string}
                 */
                type: "server_vad" | "semantic_vad";
                /**
                 * @description Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.
                 *
                 * @default auto
                 * @enum {string}
                 */
                eagerness: "low" | "medium" | "high" | "auto";
                /** @description Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
                 *     higher threshold will require louder audio to activate the model, and
                 *     thus might perform better in noisy environments.
                 *      */
                threshold?: number;
                /** @description Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in
                 *     milliseconds). Defaults to 300ms.
                 *      */
                prefix_padding_ms?: number;
                /** @description Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults
                 *     to 500ms. With shorter values the model will respond more quickly,
                 *     but may jump in on short pauses from the user.
                 *      */
                silence_duration_ms?: number;
                /**
                 * @description Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.
                 *
                 * @default true
                 */
                create_response: boolean;
                /**
                 * @description Whether or not to automatically interrupt any ongoing response with output to the default
                 *     conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.
                 *
                 * @default true
                 */
                interrupt_response: boolean;
            };
            /** @description Configuration for input audio noise reduction. This can be set to `null` to turn off.
             *     Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
             *     Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.
             *      */
            input_audio_noise_reduction?: {
                /**
                 * @description Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.
                 *
                 * @enum {string}
                 */
                type?: "near_field" | "far_field";
            };
            /** @description The set of items to include in the transcription. Current available items are:
             *     - `item.input_audio_transcription.logprobs`
             *      */
            include?: string[];
            /** @description Configuration options for the generated client secret.
             *      */
            client_secret?: {
                /** @description Configuration for the ephemeral token expiration.
                 *      */
                expires_at?: {
                    /**
                     * @description The anchor point for the ephemeral token expiration. Only `created_at` is currently supported.
                     *
                     * @default created_at
                     * @enum {string}
                     */
                    anchor: "created_at";
                    /**
                     * @description The number of seconds from the anchor point to the expiration. Select a value between `10` and `7200`.
                     *
                     * @default 600
                     */
                    seconds: number;
                };
            };
        };
        /** @description A new Realtime transcription session configuration.
         *
         *     When a session is created on the server via REST API, the session object
         *     also contains an ephemeral key. Default TTL for keys is 10 minutes. This
         *     property is not present when a session is updated via the WebSocket API.
         *      */
        RealtimeTranscriptionSessionCreateResponse: {
            /** @description Ephemeral key returned by the API. Only present when the session is
             *     created on the server via REST API.
             *      */
            client_secret: {
                /** @description Ephemeral key usable in client environments to authenticate connections
                 *     to the Realtime API. Use this in client-side environments rather than
                 *     a standard API token, which should only be used server-side.
                 *      */
                value: string;
                /** @description Timestamp for when the token expires. Currently, all tokens expire
                 *     after one minute.
                 *      */
                expires_at: number;
            };
            /** @description The set of modalities the model can respond with. To disable audio,
             *     set this to ["text"].
             *      */
            modalities?: unknown;
            /** @description The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
             *      */
            input_audio_format?: string;
            /** @description Configuration of the transcription model.
             *      */
            input_audio_transcription?: {
                /**
                 * @description The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`.
                 *
                 * @enum {string}
                 */
                model?: "gpt-4o-transcribe" | "gpt-4o-mini-transcribe" | "whisper-1";
                /** @description The language of the input audio. Supplying the input language in
                 *     [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
                 *     will improve accuracy and latency.
                 *      */
                language?: string;
                /** @description An optional text to guide the model's style or continue a previous audio
                 *     segment. The [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting) should match
                 *     the audio language.
                 *      */
                prompt?: string;
            };
            /** @description Configuration for turn detection. Can be set to `null` to turn off. Server
             *     VAD means that the model will detect the start and end of speech based on
             *     audio volume and respond at the end of user speech.
             *      */
            turn_detection?: {
                /** @description Type of turn detection, only `server_vad` is currently supported.
                 *      */
                type?: string;
                /** @description Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A
                 *     higher threshold will require louder audio to activate the model, and
                 *     thus might perform better in noisy environments.
                 *      */
                threshold?: number;
                /** @description Amount of audio to include before the VAD detected speech (in
                 *     milliseconds). Defaults to 300ms.
                 *      */
                prefix_padding_ms?: number;
                /** @description Duration of silence to detect speech stop (in milliseconds). Defaults
                 *     to 500ms. With shorter values the model will respond more quickly,
                 *     but may jump in on short pauses from the user.
                 *      */
                silence_duration_ms?: number;
            };
        };
        /**
         * Reasoning
         * @description **gpt-5 and o-series models only**
         *
         *     Configuration options for
         *     [reasoning models](https://platform.openai.com/docs/guides/reasoning).
         *
         */
        Reasoning: {
            effort?: components["schemas"]["ReasoningEffort"];
            /**
             * @description A summary of the reasoning performed by the model. This can be
             *     useful for debugging and understanding the model's reasoning process.
             *     One of `auto`, `concise`, or `detailed`.
             *
             * @enum {string|null}
             */
            summary?: "auto" | "concise" | "detailed" | null;
            /**
             * @deprecated
             * @description **Deprecated:** use `summary` instead.
             *
             *     A summary of the reasoning performed by the model. This can be
             *     useful for debugging and understanding the model's reasoning process.
             *     One of `auto`, `concise`, or `detailed`.
             *
             * @enum {string|null}
             */
            generate_summary?: "auto" | "concise" | "detailed" | null;
        };
        /**
         * @description Constrains effort on reasoning for
         *     [reasoning models](https://platform.openai.com/docs/guides/reasoning).
         *     Currently supported values are `minimal`, `low`, `medium`, and `high`. Reducing
         *     reasoning effort can result in faster responses and fewer tokens used
         *     on reasoning in a response.
         *
         * @default medium
         * @enum {string|null}
         */
        ReasoningEffort: "minimal" | "low" | "medium" | "high" | null;
        /**
         * Reasoning
         * @description A description of the chain of thought used by a reasoning model while generating
         *     a response. Be sure to include these items in your `input` to the Responses API
         *     for subsequent turns of a conversation if you are manually
         *     [managing context](https://platform.openai.com/docs/guides/conversation-state).
         *
         */
        ReasoningItem: {
            /**
             * @description The type of the object. Always `reasoning`.
             *
             * @enum {string}
             */
            type: "reasoning";
            /** @description The unique identifier of the reasoning content.
             *      */
            id: string;
            /** @description The encrypted content of the reasoning item - populated when a response is
             *     generated with `reasoning.encrypted_content` in the `include` parameter.
             *      */
            encrypted_content?: string | null;
            /** @description Reasoning summary content.
             *      */
            summary: {
                /**
                 * @description The type of the object. Always `summary_text`.
                 *
                 * @enum {string}
                 */
                type: "summary_text";
                /** @description A summary of the reasoning output from the model so far.
                 *      */
                text: string;
            }[];
            /** @description Reasoning text content.
             *      */
            content?: {
                /**
                 * @description The type of the object. Always `reasoning_text`.
                 *
                 * @enum {string}
                 */
                type: "reasoning_text";
                /** @description Reasoning text output from the model.
                 *      */
                text: string;
            }[];
            /**
             * @description The status of the item. One of `in_progress`, `completed`, or
             *     `incomplete`. Populated when items are returned via API.
             *
             * @enum {string}
             */
            status?: "in_progress" | "completed" | "incomplete";
        };
        /** The response object */
        Response: components["schemas"]["ModelResponseProperties"] & components["schemas"]["ResponseProperties"] & {
            /** @description Unique identifier for this Response.
             *      */
            id: string;
            /**
             * @description The object type of this resource - always set to `response`.
             *
             * @enum {string}
             */
            object: "response";
            /**
             * @description The status of the response generation. One of `completed`, `failed`,
             *     `in_progress`, `cancelled`, `queued`, or `incomplete`.
             *
             * @enum {string}
             */
            status?: "completed" | "failed" | "in_progress" | "cancelled" | "queued" | "incomplete";
            /** @description Unix timestamp (in seconds) of when this Response was created.
             *      */
            created_at: number;
            error: components["schemas"]["ResponseError"];
            /** @description Details about why the response is incomplete.
             *      */
            incomplete_details: {
                /**
                 * @description The reason why the response is incomplete.
                 * @enum {string}
                 */
                reason?: "max_output_tokens" | "content_filter";
            } | null;
            /** @description An array of content items generated by the model.
             *
             *     - The length and order of items in the `output` array is dependent
             *       on the model's response.
             *     - Rather than accessing the first item in the `output` array and
             *       assuming it's an `assistant` message with the content generated by
             *       the model, you might consider using the `output_text` property where
             *       supported in SDKs.
             *      */
            output: components["schemas"]["OutputItem"][];
            /** @description A system (or developer) message inserted into the model's context.
             *
             *     When using along with `previous_response_id`, the instructions from a previous
             *     response will not be carried over to the next response. This makes it simple
             *     to swap out system (or developer) messages in new responses.
             *      */
            instructions: (string | components["schemas"]["InputItem"][]) | null;
            /** @description SDK-only convenience property that contains the aggregated text output
             *     from all `output_text` items in the `output` array, if any are present.
             *     Supported in the Python and JavaScript SDKs.
             *      */
            output_text?: string | null;
            usage?: components["schemas"]["ResponseUsage"];
            /**
             * @description Whether to allow the model to run tool calls in parallel.
             *
             * @default true
             */
            parallel_tool_calls: boolean;
        };
        /** @description Emitted when there is a partial audio response. */
        ResponseAudioDeltaEvent: {
            /**
             * @description The type of the event. Always `response.audio.delta`.
             *
             * @enum {string}
             */
            type: "response.audio.delta";
            /** @description A sequence number for this chunk of the stream response.
             *      */
            sequence_number: number;
            /** @description A chunk of Base64 encoded response audio bytes.
             *      */
            delta: string;
        };
        /** @description Emitted when the audio response is complete. */
        ResponseAudioDoneEvent: {
            /**
             * @description The type of the event. Always `response.audio.done`.
             *
             * @enum {string}
             */
            type: "response.audio.done";
            /** @description The sequence number of the delta.
             *      */
            sequence_number: number;
        };
        /** @description Emitted when there is a partial transcript of audio. */
        ResponseAudioTranscriptDeltaEvent: {
            /**
             * @description The type of the event. Always `response.audio.transcript.delta`.
             *
             * @enum {string}
             */
            type: "response.audio.transcript.delta";
            /** @description The partial transcript of the audio response.
             *      */
            delta: string;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description Emitted when the full audio transcript is completed. */
        ResponseAudioTranscriptDoneEvent: {
            /**
             * @description The type of the event. Always `response.audio.transcript.done`.
             *
             * @enum {string}
             */
            type: "response.audio.transcript.done";
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description Emitted when a partial code snippet is streamed by the code interpreter. */
        ResponseCodeInterpreterCallCodeDeltaEvent: {
            /**
             * @description The type of the event. Always `response.code_interpreter_call_code.delta`.
             * @enum {string}
             */
            type: "response.code_interpreter_call_code.delta";
            /** @description The index of the output item in the response for which the code is being streamed. */
            output_index: number;
            /** @description The unique identifier of the code interpreter tool call item. */
            item_id: string;
            /** @description The partial code snippet being streamed by the code interpreter. */
            delta: string;
            /** @description The sequence number of this event, used to order streaming events. */
            sequence_number: number;
        };
        /** @description Emitted when the code snippet is finalized by the code interpreter. */
        ResponseCodeInterpreterCallCodeDoneEvent: {
            /**
             * @description The type of the event. Always `response.code_interpreter_call_code.done`.
             * @enum {string}
             */
            type: "response.code_interpreter_call_code.done";
            /** @description The index of the output item in the response for which the code is finalized. */
            output_index: number;
            /** @description The unique identifier of the code interpreter tool call item. */
            item_id: string;
            /** @description The final code snippet output by the code interpreter. */
            code: string;
            /** @description The sequence number of this event, used to order streaming events. */
            sequence_number: number;
        };
        /** @description Emitted when the code interpreter call is completed. */
        ResponseCodeInterpreterCallCompletedEvent: {
            /**
             * @description The type of the event. Always `response.code_interpreter_call.completed`.
             * @enum {string}
             */
            type: "response.code_interpreter_call.completed";
            /** @description The index of the output item in the response for which the code interpreter call is completed. */
            output_index: number;
            /** @description The unique identifier of the code interpreter tool call item. */
            item_id: string;
            /** @description The sequence number of this event, used to order streaming events. */
            sequence_number: number;
        };
        /** @description Emitted when a code interpreter call is in progress. */
        ResponseCodeInterpreterCallInProgressEvent: {
            /**
             * @description The type of the event. Always `response.code_interpreter_call.in_progress`.
             * @enum {string}
             */
            type: "response.code_interpreter_call.in_progress";
            /** @description The index of the output item in the response for which the code interpreter call is in progress. */
            output_index: number;
            /** @description The unique identifier of the code interpreter tool call item. */
            item_id: string;
            /** @description The sequence number of this event, used to order streaming events. */
            sequence_number: number;
        };
        /** @description Emitted when the code interpreter is actively interpreting the code snippet. */
        ResponseCodeInterpreterCallInterpretingEvent: {
            /**
             * @description The type of the event. Always `response.code_interpreter_call.interpreting`.
             * @enum {string}
             */
            type: "response.code_interpreter_call.interpreting";
            /** @description The index of the output item in the response for which the code interpreter is interpreting code. */
            output_index: number;
            /** @description The unique identifier of the code interpreter tool call item. */
            item_id: string;
            /** @description The sequence number of this event, used to order streaming events. */
            sequence_number: number;
        };
        /** @description Emitted when the model response is complete. */
        ResponseCompletedEvent: {
            /**
             * @description The type of the event. Always `response.completed`.
             *
             * @enum {string}
             */
            type: "response.completed";
            /** @description Properties of the completed response.
             *      */
            response: components["schemas"]["Response"];
            /** @description The sequence number for this event. */
            sequence_number: number;
        };
        /** @description Emitted when a new content part is added. */
        ResponseContentPartAddedEvent: {
            /**
             * @description The type of the event. Always `response.content_part.added`.
             *
             * @enum {string}
             */
            type: "response.content_part.added";
            /** @description The ID of the output item that the content part was added to.
             *      */
            item_id: string;
            /** @description The index of the output item that the content part was added to.
             *      */
            output_index: number;
            /** @description The index of the content part that was added.
             *      */
            content_index: number;
            /** @description The content part that was added.
             *      */
            part: components["schemas"]["OutputContent"];
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description Emitted when a content part is done. */
        ResponseContentPartDoneEvent: {
            /**
             * @description The type of the event. Always `response.content_part.done`.
             *
             * @enum {string}
             */
            type: "response.content_part.done";
            /** @description The ID of the output item that the content part was added to.
             *      */
            item_id: string;
            /** @description The index of the output item that the content part was added to.
             *      */
            output_index: number;
            /** @description The index of the content part that is done.
             *      */
            content_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The content part that is done.
             *      */
            part: components["schemas"]["OutputContent"];
        };
        /** @description An event that is emitted when a response is created.
         *      */
        ResponseCreatedEvent: {
            /**
             * @description The type of the event. Always `response.created`.
             *
             * @enum {string}
             */
            type: "response.created";
            /** @description The response that was created.
             *      */
            response: components["schemas"]["Response"];
            /** @description The sequence number for this event. */
            sequence_number: number;
        };
        /**
         * ResponseCustomToolCallInputDelta
         * @description Event representing a delta (partial update) to the input of a custom tool call.
         *
         */
        ResponseCustomToolCallInputDeltaEvent: {
            /**
             * @description The event type identifier.
             * @enum {string}
             */
            type: "response.custom_tool_call_input.delta";
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The index of the output this delta applies to. */
            output_index: number;
            /** @description Unique identifier for the API item associated with this event. */
            item_id: string;
            /** @description The incremental input data (delta) for the custom tool call. */
            delta: string;
        };
        /**
         * ResponseCustomToolCallInputDone
         * @description Event indicating that input for a custom tool call is complete.
         *
         */
        ResponseCustomToolCallInputDoneEvent: {
            /**
             * @description The event type identifier.
             * @enum {string}
             */
            type: "response.custom_tool_call_input.done";
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The index of the output this event applies to. */
            output_index: number;
            /** @description Unique identifier for the API item associated with this event. */
            item_id: string;
            /** @description The complete input data for the custom tool call. */
            input: string;
        };
        /** @description An error object returned when the model fails to generate a Response.
         *      */
        ResponseError: {
            code: components["schemas"]["ResponseErrorCode"];
            /** @description A human-readable description of the error.
             *      */
            message: string;
        } | null;
        /**
         * @description The error code for the response.
         *
         * @enum {string}
         */
        ResponseErrorCode: "server_error" | "rate_limit_exceeded" | "invalid_prompt" | "vector_store_timeout" | "invalid_image" | "invalid_image_format" | "invalid_base64_image" | "invalid_image_url" | "image_too_large" | "image_too_small" | "image_parse_error" | "image_content_policy_violation" | "invalid_image_mode" | "image_file_too_large" | "unsupported_image_media_type" | "empty_image_file" | "failed_to_download_image" | "image_file_not_found";
        /** @description Emitted when an error occurs. */
        ResponseErrorEvent: {
            /**
             * @description The type of the event. Always `error`.
             *
             * @enum {string}
             */
            type: "error";
            /** @description The error code.
             *      */
            code: string | null;
            /** @description The error message.
             *      */
            message: string;
            /** @description The error parameter.
             *      */
            param: string | null;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description An event that is emitted when a response fails.
         *      */
        ResponseFailedEvent: {
            /**
             * @description The type of the event. Always `response.failed`.
             *
             * @enum {string}
             */
            type: "response.failed";
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The response that failed.
             *      */
            response: components["schemas"]["Response"];
        };
        /** @description Emitted when a file search call is completed (results found). */
        ResponseFileSearchCallCompletedEvent: {
            /**
             * @description The type of the event. Always `response.file_search_call.completed`.
             *
             * @enum {string}
             */
            type: "response.file_search_call.completed";
            /** @description The index of the output item that the file search call is initiated.
             *      */
            output_index: number;
            /** @description The ID of the output item that the file search call is initiated.
             *      */
            item_id: string;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description Emitted when a file search call is initiated. */
        ResponseFileSearchCallInProgressEvent: {
            /**
             * @description The type of the event. Always `response.file_search_call.in_progress`.
             *
             * @enum {string}
             */
            type: "response.file_search_call.in_progress";
            /** @description The index of the output item that the file search call is initiated.
             *      */
            output_index: number;
            /** @description The ID of the output item that the file search call is initiated.
             *      */
            item_id: string;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description Emitted when a file search is currently searching. */
        ResponseFileSearchCallSearchingEvent: {
            /**
             * @description The type of the event. Always `response.file_search_call.searching`.
             *
             * @enum {string}
             */
            type: "response.file_search_call.searching";
            /** @description The index of the output item that the file search call is searching.
             *      */
            output_index: number;
            /** @description The ID of the output item that the file search call is initiated.
             *      */
            item_id: string;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * JSON object
         * @description JSON object response format. An older method of generating JSON responses.
         *     Using `json_schema` is recommended for models that support it. Note that the
         *     model will not generate JSON without a system or user message instructing it
         *     to do so.
         *
         */
        ResponseFormatJsonObject: {
            /**
             * @description The type of response format being defined. Always `json_object`.
             * @enum {string}
             */
            type: "json_object";
        };
        /**
         * JSON schema
         * @description JSON Schema response format. Used to generate structured JSON responses.
         *     Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).
         *
         */
        ResponseFormatJsonSchema: {
            /**
             * @description The type of response format being defined. Always `json_schema`.
             * @enum {string}
             */
            type: "json_schema";
            /**
             * JSON schema
             * @description Structured Outputs configuration options, including a JSON Schema.
             *
             */
            json_schema: {
                /** @description A description of what the response format is for, used by the model to
                 *     determine how to respond in the format.
                 *      */
                description?: string;
                /** @description The name of the response format. Must be a-z, A-Z, 0-9, or contain
                 *     underscores and dashes, with a maximum length of 64.
                 *      */
                name: string;
                schema?: components["schemas"]["ResponseFormatJsonSchemaSchema"];
                /**
                 * @description Whether to enable strict schema adherence when generating the output.
                 *     If set to true, the model will always follow the exact schema defined
                 *     in the `schema` field. Only a subset of JSON Schema is supported when
                 *     `strict` is `true`. To learn more, read the [Structured Outputs
                 *     guide](https://platform.openai.com/docs/guides/structured-outputs).
                 *
                 * @default false
                 */
                strict: boolean | null;
            };
        };
        /**
         * JSON schema
         * @description The schema for the response format, described as a JSON Schema object.
         *     Learn how to build JSON schemas [here](https://json-schema.org/).
         *
         */
        ResponseFormatJsonSchemaSchema: {
            [key: string]: unknown;
        };
        /**
         * Text
         * @description Default response format. Used to generate text responses.
         *
         */
        ResponseFormatText: {
            /**
             * @description The type of response format being defined. Always `text`.
             * @enum {string}
             */
            type: "text";
        };
        /**
         * Text grammar
         * @description A custom grammar for the model to follow when generating text.
         *     Learn more in the [custom grammars guide](https://platform.openai.com/docs/guides/custom-grammars).
         *
         */
        ResponseFormatTextGrammar: {
            /**
             * @description The type of response format being defined. Always `grammar`.
             * @enum {string}
             */
            type: "grammar";
            /** @description The custom grammar for the model to follow. */
            grammar: string;
        };
        /**
         * Python grammar
         * @description Configure the model to generate valid Python code. See the
         *     [custom grammars guide](https://platform.openai.com/docs/guides/custom-grammars) for more details.
         *
         */
        ResponseFormatTextPython: {
            /**
             * @description The type of response format being defined. Always `python`.
             * @enum {string}
             */
            type: "python";
        };
        /** @description Emitted when there is a partial function-call arguments delta. */
        ResponseFunctionCallArgumentsDeltaEvent: {
            /**
             * @description The type of the event. Always `response.function_call_arguments.delta`.
             *
             * @enum {string}
             */
            type: "response.function_call_arguments.delta";
            /** @description The ID of the output item that the function-call arguments delta is added to.
             *      */
            item_id: string;
            /** @description The index of the output item that the function-call arguments delta is added to.
             *      */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The function-call arguments delta that is added.
             *      */
            delta: string;
        };
        /** @description Emitted when function-call arguments are finalized. */
        ResponseFunctionCallArgumentsDoneEvent: {
            /** @enum {string} */
            type: "response.function_call_arguments.done";
            /** @description The ID of the item. */
            item_id: string;
            /** @description The index of the output item. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The function-call arguments. */
            arguments: string;
        };
        /**
         * ResponseImageGenCallCompletedEvent
         * @description Emitted when an image generation tool call has completed and the final image is available.
         *
         */
        ResponseImageGenCallCompletedEvent: {
            /**
             * @description The type of the event. Always 'response.image_generation_call.completed'.
             * @enum {string}
             */
            type: "response.image_generation_call.completed";
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The unique identifier of the image generation item being processed. */
            item_id: string;
        };
        /**
         * ResponseImageGenCallGeneratingEvent
         * @description Emitted when an image generation tool call is actively generating an image (intermediate state).
         *
         */
        ResponseImageGenCallGeneratingEvent: {
            /**
             * @description The type of the event. Always 'response.image_generation_call.generating'.
             * @enum {string}
             */
            type: "response.image_generation_call.generating";
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The unique identifier of the image generation item being processed. */
            item_id: string;
            /** @description The sequence number of the image generation item being processed. */
            sequence_number: number;
        };
        /**
         * ResponseImageGenCallInProgressEvent
         * @description Emitted when an image generation tool call is in progress.
         *
         */
        ResponseImageGenCallInProgressEvent: {
            /**
             * @description The type of the event. Always 'response.image_generation_call.in_progress'.
             * @enum {string}
             */
            type: "response.image_generation_call.in_progress";
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The unique identifier of the image generation item being processed. */
            item_id: string;
            /** @description The sequence number of the image generation item being processed. */
            sequence_number: number;
        };
        /**
         * ResponseImageGenCallPartialImageEvent
         * @description Emitted when a partial image is available during image generation streaming.
         *
         */
        ResponseImageGenCallPartialImageEvent: {
            /**
             * @description The type of the event. Always 'response.image_generation_call.partial_image'.
             * @enum {string}
             */
            type: "response.image_generation_call.partial_image";
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The unique identifier of the image generation item being processed. */
            item_id: string;
            /** @description The sequence number of the image generation item being processed. */
            sequence_number: number;
            /** @description 0-based index for the partial image (backend is 1-based, but this is 0-based for the user). */
            partial_image_index: number;
            /** @description Base64-encoded partial image data, suitable for rendering as an image. */
            partial_image_b64: string;
        };
        /** @description Emitted when the response is in progress. */
        ResponseInProgressEvent: {
            /**
             * @description The type of the event. Always `response.in_progress`.
             *
             * @enum {string}
             */
            type: "response.in_progress";
            /** @description The response that is in progress.
             *      */
            response: components["schemas"]["Response"];
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description An event that is emitted when a response finishes as incomplete.
         *      */
        ResponseIncompleteEvent: {
            /**
             * @description The type of the event. Always `response.incomplete`.
             *
             * @enum {string}
             */
            type: "response.incomplete";
            /** @description The response that was incomplete.
             *      */
            response: components["schemas"]["Response"];
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description A list of Response items. */
        ResponseItemList: {
            /**
             * @description The type of object returned, must be `list`.
             * @constant
             */
            object: "list";
            /** @description A list of items used to generate this response. */
            data: components["schemas"]["ItemResource"][];
            /** @description Whether there are more items available. */
            has_more: boolean;
            /** @description The ID of the first item in the list. */
            first_id: string;
            /** @description The ID of the last item in the list. */
            last_id: string;
        };
        /** @description A logprob is the logarithmic probability that the model assigns to producing
         *     a particular token at a given position in the sequence. Less-negative (higher)
         *     logprob values indicate greater model confidence in that token choice.
         *      */
        ResponseLogProb: {
            /** @description A possible text token. */
            token: string;
            /** @description The log probability of this token.
             *      */
            logprob: number;
            /** @description The log probability of the top 20 most likely tokens.
             *      */
            top_logprobs?: {
                /** @description A possible text token. */
                token?: string;
                /** @description The log probability of this token. */
                logprob?: number;
            }[];
        };
        /**
         * ResponseMCPCallArgumentsDeltaEvent
         * @description Emitted when there is a delta (partial update) to the arguments of an MCP tool call.
         *
         */
        ResponseMCPCallArgumentsDeltaEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_call_arguments.delta'.
             * @enum {string}
             */
            type: "response.mcp_call_arguments.delta";
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The unique identifier of the MCP tool call item being processed. */
            item_id: string;
            /** @description A JSON string containing the partial update to the arguments for the MCP tool call.
             *      */
            delta: string;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * ResponseMCPCallArgumentsDoneEvent
         * @description Emitted when the arguments for an MCP tool call are finalized.
         *
         */
        ResponseMCPCallArgumentsDoneEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_call_arguments.done'.
             * @enum {string}
             */
            type: "response.mcp_call_arguments.done";
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The unique identifier of the MCP tool call item being processed. */
            item_id: string;
            /** @description A JSON string containing the finalized arguments for the MCP tool call.
             *      */
            arguments: string;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * ResponseMCPCallCompletedEvent
         * @description Emitted when an MCP  tool call has completed successfully.
         *
         */
        ResponseMCPCallCompletedEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_call.completed'.
             * @enum {string}
             */
            type: "response.mcp_call.completed";
            /** @description The ID of the MCP tool call item that completed. */
            item_id: string;
            /** @description The index of the output item that completed. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * ResponseMCPCallFailedEvent
         * @description Emitted when an MCP  tool call has failed.
         *
         */
        ResponseMCPCallFailedEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_call.failed'.
             * @enum {string}
             */
            type: "response.mcp_call.failed";
            /** @description The ID of the MCP tool call item that failed. */
            item_id: string;
            /** @description The index of the output item that failed. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * ResponseMCPCallInProgressEvent
         * @description Emitted when an MCP  tool call is in progress.
         *
         */
        ResponseMCPCallInProgressEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_call.in_progress'.
             * @enum {string}
             */
            type: "response.mcp_call.in_progress";
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The unique identifier of the MCP tool call item being processed. */
            item_id: string;
        };
        /**
         * ResponseMCPListToolsCompletedEvent
         * @description Emitted when the list of available MCP tools has been successfully retrieved.
         *
         */
        ResponseMCPListToolsCompletedEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_list_tools.completed'.
             * @enum {string}
             */
            type: "response.mcp_list_tools.completed";
            /** @description The ID of the MCP tool call item that produced this output. */
            item_id: string;
            /** @description The index of the output item that was processed. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * ResponseMCPListToolsFailedEvent
         * @description Emitted when the attempt to list available MCP tools has failed.
         *
         */
        ResponseMCPListToolsFailedEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_list_tools.failed'.
             * @enum {string}
             */
            type: "response.mcp_list_tools.failed";
            /** @description The ID of the MCP tool call item that failed. */
            item_id: string;
            /** @description The index of the output item that failed. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /**
         * ResponseMCPListToolsInProgressEvent
         * @description Emitted when the system is in the process of retrieving the list of available MCP tools.
         *
         */
        ResponseMCPListToolsInProgressEvent: {
            /**
             * @description The type of the event. Always 'response.mcp_list_tools.in_progress'.
             * @enum {string}
             */
            type: "response.mcp_list_tools.in_progress";
            /** @description The ID of the MCP tool call item that is being processed. */
            item_id: string;
            /** @description The index of the output item that is being processed. */
            output_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
        };
        /** @description Output types that you would like the model to generate.
         *     Most models are capable of generating text, which is the default:
         *
         *     `["text"]`
         *
         *     The `gpt-4o-audio-preview` model can also be used to
         *     [generate audio](https://platform.openai.com/docs/guides/audio). To request that this model generate
         *     both text and audio responses, you can use:
         *
         *     `["text", "audio"]`
         *      */
        ResponseModalities: ("text" | "audio")[] | null;
        /** @description Emitted when a new output item is added. */
        ResponseOutputItemAddedEvent: {
            /**
             * @description The type of the event. Always `response.output_item.added`.
             *
             * @enum {string}
             */
            type: "response.output_item.added";
            /** @description The index of the output item that was added.
             *      */
            output_index: number;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
            /** @description The output item that was added.
             *      */
            item: components["schemas"]["OutputItem"];
        };
        /** @description Emitted when an output item is marked done. */
        ResponseOutputItemDoneEvent: {
            /**
             * @description The type of the event. Always `response.output_item.done`.
             *
             * @enum {string}
             */
            type: "response.output_item.done";
            /** @description The index of the output item that was marked done.
             *      */
            output_index: number;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
            /** @description The output item that was marked done.
             *      */
            item: components["schemas"]["OutputItem"];
        };
        /**
         * ResponseOutputTextAnnotationAddedEvent
         * @description Emitted when an annotation is added to output text content.
         *
         */
        ResponseOutputTextAnnotationAddedEvent: {
            /**
             * @description The type of the event. Always 'response.output_text.annotation.added'.
             * @enum {string}
             */
            type: "response.output_text.annotation.added";
            /** @description The unique identifier of the item to which the annotation is being added. */
            item_id: string;
            /** @description The index of the output item in the response's output array. */
            output_index: number;
            /** @description The index of the content part within the output item. */
            content_index: number;
            /** @description The index of the annotation within the content part. */
            annotation_index: number;
            /** @description The sequence number of this event. */
            sequence_number: number;
            /** @description The annotation object being added. (See annotation schema for details.) */
            annotation: Record<string, never>;
        };
        /**
         * Prompt Variables
         * @description Optional map of values to substitute in for variables in your
         *     prompt. The substitution values can either be strings, or other
         *     Response input types like images or files.
         *
         */
        ResponsePromptVariables: {
            [key: string]: string | components["schemas"]["InputTextContent"] | components["schemas"]["InputImageContent"] | components["schemas"]["InputFileContent"];
        } | null;
        ResponseProperties: {
            /** @description The unique ID of the previous response to the model. Use this to
             *     create multi-turn conversations. Learn more about
             *     [conversation state](https://platform.openai.com/docs/guides/conversation-state).
             *      */
            previous_response_id?: string | null;
            /** @description Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI
             *     offers a wide range of models with different capabilities, performance
             *     characteristics, and price points. Refer to the [model guide](https://platform.openai.com/docs/models)
             *     to browse and compare available models.
             *      */
            model?: components["schemas"]["ModelIdsResponses"];
            reasoning?: components["schemas"]["Reasoning"];
            /**
             * @description Whether to run the model response in the background.
             *     [Learn more](https://platform.openai.com/docs/guides/background).
             *
             * @default false
             */
            background: boolean | null;
            /** @description An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](https://platform.openai.com/docs/guides/reasoning).
             *      */
            max_output_tokens?: number | null;
            /** @description The maximum number of total calls to built-in tools that can be processed in a response. This maximum number applies across all built-in tool calls, not per individual tool. Any further attempts to call a tool by the model will be ignored.
             *      */
            max_tool_calls?: number | null;
            /** @description Configuration options for a text response from the model. Can be plain
             *     text or structured JSON data. Learn more:
             *     - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)
             *     - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)
             *      */
            text?: {
                format?: components["schemas"]["TextResponseFormatConfiguration"];
                verbosity?: components["schemas"]["Verbosity"];
            };
            /** @description An array of tools the model may call while generating a response. You
             *     can specify which tool to use by setting the `tool_choice` parameter.
             *
             *     The two categories of tools you can provide the model are:
             *
             *     - **Built-in tools**: Tools that are provided by OpenAI that extend the
             *       model's capabilities, like [web search](https://platform.openai.com/docs/guides/tools-web-search)
             *       or [file search](https://platform.openai.com/docs/guides/tools-file-search). Learn more about
             *       [built-in tools](https://platform.openai.com/docs/guides/tools).
             *     - **Function calls (custom tools)**: Functions that are defined by you,
             *       enabling the model to call your own code with strongly typed arguments
             *       and outputs. Learn more about
             *       [function calling](https://platform.openai.com/docs/guides/function-calling). You can also use
             *       custom tools to call your own code.
             *      */
            tools?: components["schemas"]["Tool"][];
            /** @description How the model should select which tool (or tools) to use when generating
             *     a response. See the `tools` parameter to see how to specify which tools
             *     the model can call.
             *      */
            tool_choice?: components["schemas"]["ToolChoiceOptions"] | components["schemas"]["ToolChoiceAllowed"] | components["schemas"]["ToolChoiceTypes"] | components["schemas"]["ToolChoiceFunction"] | components["schemas"]["ToolChoiceMCP"] | components["schemas"]["ToolChoiceCustom"];
            prompt?: components["schemas"]["Prompt"];
            /**
             * @description The truncation strategy to use for the model response.
             *     - `auto`: If the context of this response and previous ones exceeds
             *       the model's context window size, the model will truncate the
             *       response to fit the context window by dropping input items in the
             *       middle of the conversation.
             *     - `disabled` (default): If a model response will exceed the context window
             *       size for a model, the request will fail with a 400 error.
             *
             * @default disabled
             * @enum {string|null}
             */
            truncation: "auto" | "disabled" | null;
        };
        /**
         * ResponseQueuedEvent
         * @description Emitted when a response is queued and waiting to be processed.
         *
         */
        ResponseQueuedEvent: {
            /**
             * @description The type of the event. Always 'response.queued'.
             * @enum {string}
             */
            type: "response.queued";
            /** @description The full response object that is queued. */
            response: components["schemas"]["Response"];
            /** @description The sequence number for this event. */
            sequence_number: number;
        };
        /** @description Emitted when a new reasoning summary part is added. */
        ResponseReasoningSummaryPartAddedEvent: {
            /**
             * @description The type of the event. Always `response.reasoning_summary_part.added`.
             *
             * @enum {string}
             */
            type: "response.reasoning_summary_part.added";
            /** @description The ID of the item this summary part is associated with.
             *      */
            item_id: string;
            /** @description The index of the output item this summary part is associated with.
             *      */
            output_index: number;
            /** @description The index of the summary part within the reasoning summary.
             *      */
            summary_index: number;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
            /** @description The summary part that was added.
             *      */
            part: {
                /**
                 * @description The type of the summary part. Always `summary_text`.
                 * @enum {string}
                 */
                type: "summary_text";
                /** @description The text of the summary part. */
                text: string;
            };
        };
        /** @description Emitted when a reasoning summary part is completed. */
        ResponseReasoningSummaryPartDoneEvent: {
            /**
             * @description The type of the event. Always `response.reasoning_summary_part.done`.
             *
             * @enum {string}
             */
            type: "response.reasoning_summary_part.done";
            /** @description The ID of the item this summary part is associated with.
             *      */
            item_id: string;
            /** @description The index of the output item this summary part is associated with.
             *      */
            output_index: number;
            /** @description The index of the summary part within the reasoning summary.
             *      */
            summary_index: number;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
            /** @description The completed summary part.
             *      */
            part: {
                /**
                 * @description The type of the summary part. Always `summary_text`.
                 * @enum {string}
                 */
                type: "summary_text";
                /** @description The text of the summary part. */
                text: string;
            };
        };
        /** @description Emitted when a delta is added to a reasoning summary text. */
        ResponseReasoningSummaryTextDeltaEvent: {
            /**
             * @description The type of the event. Always `response.reasoning_summary_text.delta`.
             *
             * @enum {string}
             */
            type: "response.reasoning_summary_text.delta";
            /** @description The ID of the item this summary text delta is associated with.
             *      */
            item_id: string;
            /** @description The index of the output item this summary text delta is associated with.
             *      */
            output_index: number;
            /** @description The index of the summary part within the reasoning summary.
             *      */
            summary_index: number;
            /** @description The text delta that was added to the summary.
             *      */
            delta: string;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
        };
        /** @description Emitted when a reasoning summary text is completed. */
        ResponseReasoningSummaryTextDoneEvent: {
            /**
             * @description The type of the event. Always `response.reasoning_summary_text.done`.
             *
             * @enum {string}
             */
            type: "response.reasoning_summary_text.done";
            /** @description The ID of the item this summary text is associated with.
             *      */
            item_id: string;
            /** @description The index of the output item this summary text is associated with.
             *      */
            output_index: number;
            /** @description The index of the summary part within the reasoning summary.
             *      */
            summary_index: number;
            /** @description The full text of the completed reasoning summary.
             *      */
            text: string;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
        };
        /** @description Emitted when a delta is added to a reasoning text. */
        ResponseReasoningTextDeltaEvent: {
            /**
             * @description The type of the event. Always `response.reasoning_text.delta`.
             *
             * @enum {string}
             */
            type: "response.reasoning_text.delta";
            /** @description The ID of the item this reasoning text delta is associated with.
             *      */
            item_id: string;
            /** @description The index of the output item this reasoning text delta is associated with.
             *      */
            output_index: number;
            /** @description The index of the reasoning content part this delta is associated with.
             *      */
            content_index: number;
            /** @description The text delta that was added to the reasoning content.
             *      */
            delta: string;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
        };
        /** @description Emitted when a reasoning text is completed. */
        ResponseReasoningTextDoneEvent: {
            /**
             * @description The type of the event. Always `response.reasoning_text.done`.
             *
             * @enum {string}
             */
            type: "response.reasoning_text.done";
            /** @description The ID of the item this reasoning text is associated with.
             *      */
            item_id: string;
            /** @description The index of the output item this reasoning text is associated with.
             *      */
            output_index: number;
            /** @description The index of the reasoning content part.
             *      */
            content_index: number;
            /** @description The full text of the completed reasoning content.
             *      */
            text: string;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
        };
        /** @description Emitted when there is a partial refusal text. */
        ResponseRefusalDeltaEvent: {
            /**
             * @description The type of the event. Always `response.refusal.delta`.
             *
             * @enum {string}
             */
            type: "response.refusal.delta";
            /** @description The ID of the output item that the refusal text is added to.
             *      */
            item_id: string;
            /** @description The index of the output item that the refusal text is added to.
             *      */
            output_index: number;
            /** @description The index of the content part that the refusal text is added to.
             *      */
            content_index: number;
            /** @description The refusal text that is added.
             *      */
            delta: string;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
        };
        /** @description Emitted when refusal text is finalized. */
        ResponseRefusalDoneEvent: {
            /**
             * @description The type of the event. Always `response.refusal.done`.
             *
             * @enum {string}
             */
            type: "response.refusal.done";
            /** @description The ID of the output item that the refusal text is finalized.
             *      */
            item_id: string;
            /** @description The index of the output item that the refusal text is finalized.
             *      */
            output_index: number;
            /** @description The index of the content part that the refusal text is finalized.
             *      */
            content_index: number;
            /** @description The refusal text that is finalized.
             *      */
            refusal: string;
            /** @description The sequence number of this event.
             *      */
            sequence_number: number;
        };
        ResponseStreamEvent: components["schemas"]["ResponseAudioDeltaEvent"] | components["schemas"]["ResponseAudioDoneEvent"] | components["schemas"]["ResponseAudioTranscriptDeltaEvent"] | components["schemas"]["ResponseAudioTranscriptDoneEvent"] | components["schemas"]["ResponseCodeInterpreterCallCodeDeltaEvent"] | components["schemas"]["ResponseCodeInterpreterCallCodeDoneEvent"] | components["schemas"]["ResponseCodeInterpreterCallCompletedEvent"] | components["schemas"]["ResponseCodeInterpreterCallInProgressEvent"] | components["schemas"]["ResponseCodeInterpreterCallInterpretingEvent"] | components["schemas"]["ResponseCompletedEvent"] | components["schemas"]["ResponseContentPartAddedEvent"] | components["schemas"]["ResponseContentPartDoneEvent"] | components["schemas"]["ResponseCreatedEvent"] | components["schemas"]["ResponseErrorEvent"] | components["schemas"]["ResponseFileSearchCallCompletedEvent"] | components["schemas"]["ResponseFileSearchCallInProgressEvent"] | components["schemas"]["ResponseFileSearchCallSearchingEvent"] | components["schemas"]["ResponseFunctionCallArgumentsDeltaEvent"] | components["schemas"]["ResponseFunctionCallArgumentsDoneEvent"] | components["schemas"]["ResponseInProgressEvent"] | components["schemas"]["ResponseFailedEvent"] | components["schemas"]["ResponseIncompleteEvent"] | components["schemas"]["ResponseOutputItemAddedEvent"] | components["schemas"]["ResponseOutputItemDoneEvent"] | components["schemas"]["ResponseReasoningSummaryPartAddedEvent"] | components["schemas"]["ResponseReasoningSummaryPartDoneEvent"] | components["schemas"]["ResponseReasoningSummaryTextDeltaEvent"] | components["schemas"]["ResponseReasoningSummaryTextDoneEvent"] | components["schemas"]["ResponseReasoningTextDeltaEvent"] | components["schemas"]["ResponseReasoningTextDoneEvent"] | components["schemas"]["ResponseRefusalDeltaEvent"] | components["schemas"]["ResponseRefusalDoneEvent"] | components["schemas"]["ResponseTextDeltaEvent"] | components["schemas"]["ResponseTextDoneEvent"] | components["schemas"]["ResponseWebSearchCallCompletedEvent"] | components["schemas"]["ResponseWebSearchCallInProgressEvent"] | components["schemas"]["ResponseWebSearchCallSearchingEvent"] | components["schemas"]["ResponseImageGenCallCompletedEvent"] | components["schemas"]["ResponseImageGenCallGeneratingEvent"] | components["schemas"]["ResponseImageGenCallInProgressEvent"] | components["schemas"]["ResponseImageGenCallPartialImageEvent"] | components["schemas"]["ResponseMCPCallArgumentsDeltaEvent"] | components["schemas"]["ResponseMCPCallArgumentsDoneEvent"] | components["schemas"]["ResponseMCPCallCompletedEvent"] | components["schemas"]["ResponseMCPCallFailedEvent"] | components["schemas"]["ResponseMCPCallInProgressEvent"] | components["schemas"]["ResponseMCPListToolsCompletedEvent"] | components["schemas"]["ResponseMCPListToolsFailedEvent"] | components["schemas"]["ResponseMCPListToolsInProgressEvent"] | components["schemas"]["ResponseOutputTextAnnotationAddedEvent"] | components["schemas"]["ResponseQueuedEvent"] | components["schemas"]["ResponseCustomToolCallInputDeltaEvent"] | components["schemas"]["ResponseCustomToolCallInputDoneEvent"];
        /**
         * @description Options for streaming responses. Only set this when you set `stream: true`.
         *
         * @default null
         */
        ResponseStreamOptions: {
            /** @description When true, stream obfuscation will be enabled. Stream obfuscation adds
             *     random characters to an `obfuscation` field on streaming delta events to
             *     normalize payload sizes as a mitigation to certain side-channel attacks.
             *     These obfuscation fields are included by default, but add a small amount
             *     of overhead to the data stream. You can set `include_obfuscation` to
             *     false to optimize for bandwidth if you trust the network links between
             *     your application and the OpenAI API.
             *      */
            include_obfuscation?: boolean;
        } | null;
        /** @description Emitted when there is an additional text delta. */
        ResponseTextDeltaEvent: {
            /**
             * @description The type of the event. Always `response.output_text.delta`.
             *
             * @enum {string}
             */
            type: "response.output_text.delta";
            /** @description The ID of the output item that the text delta was added to.
             *      */
            item_id: string;
            /** @description The index of the output item that the text delta was added to.
             *      */
            output_index: number;
            /** @description The index of the content part that the text delta was added to.
             *      */
            content_index: number;
            /** @description The text delta that was added.
             *      */
            delta: string;
            /** @description The sequence number for this event. */
            sequence_number: number;
            /** @description The log probabilities of the tokens in the delta.
             *      */
            logprobs: components["schemas"]["ResponseLogProb"][];
        };
        /** @description Emitted when text content is finalized. */
        ResponseTextDoneEvent: {
            /**
             * @description The type of the event. Always `response.output_text.done`.
             *
             * @enum {string}
             */
            type: "response.output_text.done";
            /** @description The ID of the output item that the text content is finalized.
             *      */
            item_id: string;
            /** @description The index of the output item that the text content is finalized.
             *      */
            output_index: number;
            /** @description The index of the content part that the text content is finalized.
             *      */
            content_index: number;
            /** @description The text content that is finalized.
             *      */
            text: string;
            /** @description The sequence number for this event. */
            sequence_number: number;
            /** @description The log probabilities of the tokens in the delta.
             *      */
            logprobs: components["schemas"]["ResponseLogProb"][];
        };
        /** @description Represents token usage details including input tokens, output tokens,
         *     a breakdown of output tokens, and the total tokens used.
         *      */
        ResponseUsage: {
            /** @description The number of input tokens. */
            input_tokens: number;
            /** @description A detailed breakdown of the input tokens. */
            input_tokens_details: {
                /** @description The number of tokens that were retrieved from the cache.
                 *     [More on prompt caching](https://platform.openai.com/docs/guides/prompt-caching).
                 *      */
                cached_tokens: number;
            };
            /** @description The number of output tokens. */
            output_tokens: number;
            /** @description A detailed breakdown of the output tokens. */
            output_tokens_details: {
                /** @description The number of reasoning tokens. */
                reasoning_tokens: number;
            };
            /** @description The total number of tokens used. */
            total_tokens: number;
        };
        /** @description Emitted when a web search call is completed. */
        ResponseWebSearchCallCompletedEvent: {
            /**
             * @description The type of the event. Always `response.web_search_call.completed`.
             *
             * @enum {string}
             */
            type: "response.web_search_call.completed";
            /** @description The index of the output item that the web search call is associated with.
             *      */
            output_index: number;
            /** @description Unique ID for the output item associated with the web search call.
             *      */
            item_id: string;
            /** @description The sequence number of the web search call being processed. */
            sequence_number: number;
        };
        /** @description Emitted when a web search call is initiated. */
        ResponseWebSearchCallInProgressEvent: {
            /**
             * @description The type of the event. Always `response.web_search_call.in_progress`.
             *
             * @enum {string}
             */
            type: "response.web_search_call.in_progress";
            /** @description The index of the output item that the web search call is associated with.
             *      */
            output_index: number;
            /** @description Unique ID for the output item associated with the web search call.
             *      */
            item_id: string;
            /** @description The sequence number of the web search call being processed. */
            sequence_number: number;
        };
        /** @description Emitted when a web search call is executing. */
        ResponseWebSearchCallSearchingEvent: {
            /**
             * @description The type of the event. Always `response.web_search_call.searching`.
             *
             * @enum {string}
             */
            type: "response.web_search_call.searching";
            /** @description The index of the output item that the web search call is associated with.
             *      */
            output_index: number;
            /** @description Unique ID for the output item associated with the web search call.
             *      */
            item_id: string;
            /** @description The sequence number of the web search call being processed. */
            sequence_number: number;
        };
        /** @description Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.). */
        RunCompletionUsage: {
            /** @description Number of completion tokens used over the course of the run. */
            completion_tokens: number;
            /** @description Number of prompt tokens used over the course of the run. */
            prompt_tokens: number;
            /** @description Total number of tokens used (prompt + completion). */
            total_tokens: number;
        } | null;
        /** RunGraderRequest */
        RunGraderRequest: {
            /** @description The grader used for the fine-tuning job. */
            grader: components["schemas"]["GraderStringCheck"] | components["schemas"]["GraderTextSimilarity"] | components["schemas"]["GraderPython"] | components["schemas"]["GraderScoreModel"] | components["schemas"]["GraderMulti"];
            /** @description The dataset item provided to the grader. This will be used to populate
             *     the `item` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details.
             *      */
            item?: Record<string, never>;
            /** @description The model sample to be evaluated. This value will be used to populate
             *     the `sample` namespace. See [the guide](https://platform.openai.com/docs/guides/graders) for more details.
             *     The `output_json` variable will be populated if the model sample is a
             *     valid JSON string.
             *
             *      */
            model_sample: string;
        };
        RunGraderResponse: {
            reward: number;
            metadata: {
                name: string;
                type: string;
                errors: {
                    formula_parse_error: boolean;
                    sample_parse_error: boolean;
                    truncated_observation_error: boolean;
                    unresponsive_reward_error: boolean;
                    invalid_variable_error: boolean;
                    other_error: boolean;
                    python_grader_server_error: boolean;
                    python_grader_server_error_type: string | null;
                    python_grader_runtime_error: boolean;
                    python_grader_runtime_error_details: string | null;
                    model_grader_server_error: boolean;
                    model_grader_refusal_error: boolean;
                    model_grader_parse_error: boolean;
                    model_grader_server_error_details: string | null;
                };
                execution_time: number;
                scores: {
                    [key: string]: unknown;
                };
                token_usage: number | null;
                sampled_model_name: string | null;
            };
            sub_rewards: {
                [key: string]: unknown;
            };
            model_grader_token_usage_per_model: {
                [key: string]: unknown;
            };
        };
        /**
         * A run on a thread
         * @description Represents an execution run on a [thread](https://platform.openai.com/docs/api-reference/threads).
         */
        RunObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `thread.run`.
             * @enum {string}
             */
            object: "thread.run";
            /** @description The Unix timestamp (in seconds) for when the run was created. */
            created_at: number;
            /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was executed on as a part of this run. */
            thread_id: string;
            /** @description The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for execution of this run. */
            assistant_id: string;
            status: components["schemas"]["RunStatus"];
            /** @description Details on the action required to continue the run. Will be `null` if no action is required. */
            required_action: {
                /**
                 * @description For now, this is always `submit_tool_outputs`.
                 * @enum {string}
                 */
                type: "submit_tool_outputs";
                /** @description Details on the tool outputs needed for this run to continue. */
                submit_tool_outputs: {
                    /** @description A list of the relevant tool calls. */
                    tool_calls: components["schemas"]["RunToolCallObject"][];
                };
            } | null;
            /** @description The last error associated with this run. Will be `null` if there are no errors. */
            last_error: {
                /**
                 * @description One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
                 * @enum {string}
                 */
                code: "server_error" | "rate_limit_exceeded" | "invalid_prompt";
                /** @description A human-readable description of the error. */
                message: string;
            } | null;
            /** @description The Unix timestamp (in seconds) for when the run will expire. */
            expires_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run was started. */
            started_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run was cancelled. */
            cancelled_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run failed. */
            failed_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run was completed. */
            completed_at: number | null;
            /** @description Details on why the run is incomplete. Will be `null` if the run is not incomplete. */
            incomplete_details: {
                /**
                 * @description The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
                 * @enum {string}
                 */
                reason?: "max_completion_tokens" | "max_prompt_tokens";
            } | null;
            /** @description The model that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run. */
            model: string;
            /** @description The instructions that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run. */
            instructions: string;
            /**
             * @description The list of tools that the [assistant](https://platform.openai.com/docs/api-reference/assistants) used for this run.
             * @default []
             */
            tools: components["schemas"]["AssistantTool"][];
            metadata: components["schemas"]["Metadata"];
            usage: components["schemas"]["RunCompletionUsage"];
            /** @description The sampling temperature used for this run. If not set, defaults to 1. */
            temperature?: number | null;
            /** @description The nucleus sampling value used for this run. If not set, defaults to 1. */
            top_p?: number | null;
            /** @description The maximum number of prompt tokens specified to have been used over the course of the run.
             *      */
            max_prompt_tokens: number | null;
            /** @description The maximum number of completion tokens specified to have been used over the course of the run.
             *      */
            max_completion_tokens: number | null;
            truncation_strategy: components["schemas"]["TruncationObject"] & unknown;
            tool_choice: components["schemas"]["AssistantsApiToolChoiceOption"] & unknown;
            parallel_tool_calls: components["schemas"]["ParallelToolCalls"];
            response_format: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        /** @description Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`. */
        RunStepCompletionUsage: {
            /** @description Number of completion tokens used over the course of the run step. */
            completion_tokens: number;
            /** @description Number of prompt tokens used over the course of the run step. */
            prompt_tokens: number;
            /** @description Total number of tokens used (prompt + completion). */
            total_tokens: number;
        } | null;
        /**
         * Run step delta object
         * @description Represents a run step delta i.e. any changed fields on a run step during streaming.
         *
         */
        RunStepDeltaObject: {
            /** @description The identifier of the run step, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `thread.run.step.delta`.
             * @enum {string}
             */
            object: "thread.run.step.delta";
            delta: components["schemas"]["RunStepDeltaObjectDelta"];
        };
        /**
         * Message creation
         * @description Details of the message creation by the run step.
         */
        RunStepDeltaStepDetailsMessageCreationObject: {
            /**
             * @description Always `message_creation`.
             * @enum {string}
             */
            type: "message_creation";
            message_creation?: {
                /** @description The ID of the message that was created by this run step. */
                message_id?: string;
            };
        };
        /**
         * Code interpreter tool call
         * @description Details of the Code Interpreter tool call the run step was involved in.
         */
        RunStepDeltaStepDetailsToolCallsCodeObject: {
            /** @description The index of the tool call in the tool calls array. */
            index: number;
            /** @description The ID of the tool call. */
            id?: string;
            /**
             * @description The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
             * @enum {string}
             */
            type: "code_interpreter";
            /** @description The Code Interpreter tool call definition. */
            code_interpreter?: {
                /** @description The input to the Code Interpreter tool call. */
                input?: string;
                /** @description The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type. */
                outputs?: (components["schemas"]["RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject"] | components["schemas"]["RunStepDeltaStepDetailsToolCallsCodeOutputImageObject"])[];
            };
        };
        /** Code interpreter image output */
        RunStepDeltaStepDetailsToolCallsCodeOutputImageObject: {
            /** @description The index of the output in the outputs array. */
            index: number;
            /**
             * @description Always `image`.
             * @enum {string}
             */
            type: "image";
            image?: {
                /** @description The [file](https://platform.openai.com/docs/api-reference/files) ID of the image. */
                file_id?: string;
            };
        };
        /**
         * Code interpreter log output
         * @description Text output from the Code Interpreter tool call as part of a run step.
         */
        RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject: {
            /** @description The index of the output in the outputs array. */
            index: number;
            /**
             * @description Always `logs`.
             * @enum {string}
             */
            type: "logs";
            /** @description The text output from the Code Interpreter tool call. */
            logs?: string;
        };
        /** File search tool call */
        RunStepDeltaStepDetailsToolCallsFileSearchObject: {
            /** @description The index of the tool call in the tool calls array. */
            index: number;
            /** @description The ID of the tool call object. */
            id?: string;
            /**
             * @description The type of tool call. This is always going to be `file_search` for this type of tool call.
             * @enum {string}
             */
            type: "file_search";
            /** @description For now, this is always going to be an empty object. */
            file_search: Record<string, never>;
        };
        /** Function tool call */
        RunStepDeltaStepDetailsToolCallsFunctionObject: {
            /** @description The index of the tool call in the tool calls array. */
            index: number;
            /** @description The ID of the tool call object. */
            id?: string;
            /**
             * @description The type of tool call. This is always going to be `function` for this type of tool call.
             * @enum {string}
             */
            type: "function";
            /** @description The definition of the function that was called. */
            function?: {
                /** @description The name of the function. */
                name?: string;
                /** @description The arguments passed to the function. */
                arguments?: string;
                /** @description The output of the function. This will be `null` if the outputs have not been [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) yet. */
                output?: string | null;
            };
        };
        /**
         * Tool calls
         * @description Details of the tool call.
         */
        RunStepDeltaStepDetailsToolCallsObject: {
            /**
             * @description Always `tool_calls`.
             * @enum {string}
             */
            type: "tool_calls";
            /** @description An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
             *      */
            tool_calls?: components["schemas"]["RunStepDeltaStepDetailsToolCall"][];
        };
        /**
         * Message creation
         * @description Details of the message creation by the run step.
         */
        RunStepDetailsMessageCreationObject: {
            /**
             * @description Always `message_creation`.
             * @enum {string}
             */
            type: "message_creation";
            message_creation: {
                /** @description The ID of the message that was created by this run step. */
                message_id: string;
            };
        };
        /**
         * Code Interpreter tool call
         * @description Details of the Code Interpreter tool call the run step was involved in.
         */
        RunStepDetailsToolCallsCodeObject: {
            /** @description The ID of the tool call. */
            id: string;
            /**
             * @description The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
             * @enum {string}
             */
            type: "code_interpreter";
            /** @description The Code Interpreter tool call definition. */
            code_interpreter: {
                /** @description The input to the Code Interpreter tool call. */
                input: string;
                /** @description The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type. */
                outputs: (components["schemas"]["RunStepDetailsToolCallsCodeOutputLogsObject"] | components["schemas"]["RunStepDetailsToolCallsCodeOutputImageObject"])[];
            };
        };
        /** Code Interpreter image output */
        RunStepDetailsToolCallsCodeOutputImageObject: {
            /**
             * @description Always `image`.
             * @enum {string}
             */
            type: "image";
            image: {
                /** @description The [file](https://platform.openai.com/docs/api-reference/files) ID of the image. */
                file_id: string;
            };
        };
        /**
         * Code Interpreter log output
         * @description Text output from the Code Interpreter tool call as part of a run step.
         */
        RunStepDetailsToolCallsCodeOutputLogsObject: {
            /**
             * @description Always `logs`.
             * @enum {string}
             */
            type: "logs";
            /** @description The text output from the Code Interpreter tool call. */
            logs: string;
        };
        /** File search tool call */
        RunStepDetailsToolCallsFileSearchObject: {
            /** @description The ID of the tool call object. */
            id: string;
            /**
             * @description The type of tool call. This is always going to be `file_search` for this type of tool call.
             * @enum {string}
             */
            type: "file_search";
            /** @description For now, this is always going to be an empty object. */
            file_search: {
                ranking_options?: components["schemas"]["RunStepDetailsToolCallsFileSearchRankingOptionsObject"];
                /** @description The results of the file search. */
                results?: components["schemas"]["RunStepDetailsToolCallsFileSearchResultObject"][];
            };
        };
        /**
         * File search tool call ranking options
         * @description The ranking options for the file search.
         */
        RunStepDetailsToolCallsFileSearchRankingOptionsObject: {
            ranker: components["schemas"]["FileSearchRanker"];
            /** @description The score threshold for the file search. All values must be a floating point number between 0 and 1. */
            score_threshold: number;
        };
        /**
         * File search tool call result
         * @description A result instance of the file search.
         */
        RunStepDetailsToolCallsFileSearchResultObject: {
            /** @description The ID of the file that result was found in. */
            file_id: string;
            /** @description The name of the file that result was found in. */
            file_name: string;
            /** @description The score of the result. All values must be a floating point number between 0 and 1. */
            score: number;
            /** @description The content of the result that was found. The content is only included if requested via the include query parameter. */
            content?: {
                /**
                 * @description The type of the content.
                 * @enum {string}
                 */
                type?: "text";
                /** @description The text content of the file. */
                text?: string;
            }[];
        };
        /** Function tool call */
        RunStepDetailsToolCallsFunctionObject: {
            /** @description The ID of the tool call object. */
            id: string;
            /**
             * @description The type of tool call. This is always going to be `function` for this type of tool call.
             * @enum {string}
             */
            type: "function";
            /** @description The definition of the function that was called. */
            function: {
                /** @description The name of the function. */
                name: string;
                /** @description The arguments passed to the function. */
                arguments: string;
                /** @description The output of the function. This will be `null` if the outputs have not been [submitted](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) yet. */
                output: string | null;
            };
        };
        /**
         * Tool calls
         * @description Details of the tool call.
         */
        RunStepDetailsToolCallsObject: {
            /**
             * @description Always `tool_calls`.
             * @enum {string}
             */
            type: "tool_calls";
            /** @description An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.
             *      */
            tool_calls: components["schemas"]["RunStepDetailsToolCall"][];
        };
        /**
         * Run steps
         * @description Represents a step in execution of a run.
         *
         */
        RunStepObject: {
            /** @description The identifier of the run step, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `thread.run.step`.
             * @enum {string}
             */
            object: "thread.run.step";
            /** @description The Unix timestamp (in seconds) for when the run step was created. */
            created_at: number;
            /** @description The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) associated with the run step. */
            assistant_id: string;
            /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run. */
            thread_id: string;
            /** @description The ID of the [run](https://platform.openai.com/docs/api-reference/runs) that this run step is a part of. */
            run_id: string;
            /**
             * @description The type of run step, which can be either `message_creation` or `tool_calls`.
             * @enum {string}
             */
            type: "message_creation" | "tool_calls";
            /**
             * @description The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
             * @enum {string}
             */
            status: "in_progress" | "cancelled" | "failed" | "completed" | "expired";
            /** @description The details of the run step. */
            step_details: components["schemas"]["RunStepDetailsMessageCreationObject"] | components["schemas"]["RunStepDetailsToolCallsObject"];
            /** @description The last error associated with this run step. Will be `null` if there are no errors. */
            last_error: {
                /**
                 * @description One of `server_error` or `rate_limit_exceeded`.
                 * @enum {string}
                 */
                code: "server_error" | "rate_limit_exceeded";
                /** @description A human-readable description of the error. */
                message: string;
            } | null;
            /** @description The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired. */
            expired_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run step was cancelled. */
            cancelled_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run step failed. */
            failed_at: number | null;
            /** @description The Unix timestamp (in seconds) for when the run step completed. */
            completed_at: number | null;
            metadata: components["schemas"]["Metadata"];
            usage: components["schemas"]["RunStepCompletionUsage"];
        };
        RunStepStreamEvent: {
            /** @enum {string} */
            event: "thread.run.step.created";
            data: components["schemas"]["RunStepObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.step.in_progress";
            data: components["schemas"]["RunStepObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.step.delta";
            data: components["schemas"]["RunStepDeltaObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.step.completed";
            data: components["schemas"]["RunStepObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.step.failed";
            data: components["schemas"]["RunStepObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.step.cancelled";
            data: components["schemas"]["RunStepObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.step.expired";
            data: components["schemas"]["RunStepObject"];
        };
        RunStreamEvent: {
            /** @enum {string} */
            event: "thread.run.created";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.queued";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.in_progress";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.requires_action";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.completed";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.incomplete";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.failed";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.cancelling";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.cancelled";
            data: components["schemas"]["RunObject"];
        } | {
            /** @enum {string} */
            event: "thread.run.expired";
            data: components["schemas"]["RunObject"];
        };
        /** @description Tool call objects */
        RunToolCallObject: {
            /** @description The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs) endpoint. */
            id: string;
            /**
             * @description The type of tool call the output is required for. For now, this is always `function`.
             * @enum {string}
             */
            type: "function";
            /** @description The function definition. */
            function: {
                /** @description The name of the function. */
                name: string;
                /** @description The arguments that the model expects you to pass to the function. */
                arguments: string;
            };
        };
        /**
         * Screenshot
         * @description A screenshot action.
         *
         */
        Screenshot: {
            /**
             * @description Specifies the event type. For a screenshot action, this property is
             *     always set to `screenshot`.
             *
             * @default screenshot
             * @enum {string}
             */
            type: "screenshot";
        };
        /**
         * Scroll
         * @description A scroll action.
         *
         */
        Scroll: {
            /**
             * @description Specifies the event type. For a scroll action, this property is
             *     always set to `scroll`.
             *
             * @default scroll
             * @enum {string}
             */
            type: "scroll";
            /** @description The x-coordinate where the scroll occurred.
             *      */
            x: number;
            /** @description The y-coordinate where the scroll occurred.
             *      */
            y: number;
            /** @description The horizontal scroll distance.
             *      */
            scroll_x: number;
            /** @description The vertical scroll distance.
             *      */
            scroll_y: number;
        };
        /**
         * @description Specifies the processing type used for serving the request.
         *       - If set to 'auto', then the request will be processed with the service tier configured in the Project settings. Unless otherwise configured, the Project will use 'default'.
         *       - If set to 'default', then the request will be processed with the standard pricing and performance for the selected model.
         *       - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or '[priority](https://openai.com/api-priority-processing/)', then the request will be processed with the corresponding service tier.
         *       - When not set, the default behavior is 'auto'.
         *
         *       When the `service_tier` parameter is set, the response body will include the `service_tier` value based on the processing mode actually used to serve the request. This response value may be different from the value set in the parameter.
         *
         * @default auto
         * @enum {string|null}
         */
        ServiceTier: "auto" | "default" | "flex" | "scale" | "priority" | null;
        /** @description Emitted for each chunk of audio data generated during speech synthesis. */
        SpeechAudioDeltaEvent: {
            /**
             * @description The type of the event. Always `speech.audio.delta`.
             *
             * @enum {string}
             */
            type: "speech.audio.delta";
            /** @description A chunk of Base64-encoded audio data.
             *      */
            audio: string;
        };
        /** @description Emitted when the speech synthesis is complete and all audio has been streamed. */
        SpeechAudioDoneEvent: {
            /**
             * @description The type of the event. Always `speech.audio.done`.
             *
             * @enum {string}
             */
            type: "speech.audio.done";
            /** @description Token usage statistics for the request.
             *      */
            usage: {
                /** @description Number of input tokens in the prompt. */
                input_tokens: number;
                /** @description Number of output tokens generated. */
                output_tokens: number;
                /** @description Total number of tokens used (input + output). */
                total_tokens: number;
            };
        };
        StaticChunkingStrategy: {
            /** @description The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`. */
            max_chunk_size_tokens: number;
            /** @description The number of tokens that overlap between chunks. The default value is `400`.
             *
             *     Note that the overlap must not exceed half of `max_chunk_size_tokens`.
             *      */
            chunk_overlap_tokens: number;
        };
        /**
         * Static Chunking Strategy
         * @description Customize your own chunking strategy by setting chunk size and chunk overlap.
         */
        StaticChunkingStrategyRequestParam: {
            /**
             * @description Always `static`.
             * @enum {string}
             */
            type: "static";
            static: components["schemas"]["StaticChunkingStrategy"];
        };
        /** Static Chunking Strategy */
        StaticChunkingStrategyResponseParam: {
            /**
             * @description Always `static`.
             * @enum {string}
             */
            type: "static";
            static: components["schemas"]["StaticChunkingStrategy"];
        };
        /** @description Not supported with latest reasoning models `o3` and `o4-mini`.
         *
         *     Up to 4 sequences where the API will stop generating further tokens. The
         *     returned text will not contain the stop sequence.
         *      */
        StopConfiguration: ((string | null) | string[]) | null;
        SubmitToolOutputsRunRequest: {
            /** @description A list of tools for which the outputs are being submitted. */
            tool_outputs: {
                /** @description The ID of the tool call in the `required_action` object within the run object the output is being submitted for. */
                tool_call_id?: string;
                /** @description The output of the tool call to be submitted to continue the run. */
                output?: string;
            }[];
            /** @description If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
             *      */
            stream?: boolean | null;
        };
        /** @description An object specifying the format that the model must output.
         *
         *     Configuring `{ "type": "json_schema" }` enables Structured Outputs,
         *     which ensures the model will match your supplied JSON schema. Learn more in the
         *     [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).
         *
         *     The default format is `{ "type": "text" }` with no additional options.
         *
         *     **Not recommended for gpt-4o and newer models:**
         *
         *     Setting to `{ "type": "json_object" }` enables the older JSON mode, which
         *     ensures the message the model generates is valid JSON. Using `json_schema`
         *     is preferred for models that support it.
         *      */
        TextResponseFormatConfiguration: components["schemas"]["ResponseFormatText"] | components["schemas"]["TextResponseFormatJsonSchema"] | components["schemas"]["ResponseFormatJsonObject"];
        /**
         * JSON schema
         * @description JSON Schema response format. Used to generate structured JSON responses.
         *     Learn more about [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).
         *
         */
        TextResponseFormatJsonSchema: {
            /**
             * @description The type of response format being defined. Always `json_schema`.
             * @enum {string}
             */
            type: "json_schema";
            /** @description A description of what the response format is for, used by the model to
             *     determine how to respond in the format.
             *      */
            description?: string;
            /** @description The name of the response format. Must be a-z, A-Z, 0-9, or contain
             *     underscores and dashes, with a maximum length of 64.
             *      */
            name: string;
            schema: components["schemas"]["ResponseFormatJsonSchemaSchema"];
            /**
             * @description Whether to enable strict schema adherence when generating the output.
             *     If set to true, the model will always follow the exact schema defined
             *     in the `schema` field. Only a subset of JSON Schema is supported when
             *     `strict` is `true`. To learn more, read the [Structured Outputs
             *     guide](https://platform.openai.com/docs/guides/structured-outputs).
             *
             * @default false
             */
            strict: boolean | null;
        };
        /**
         * Thread
         * @description Represents a thread that contains [messages](https://platform.openai.com/docs/api-reference/messages).
         */
        ThreadObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `thread`.
             * @enum {string}
             */
            object: "thread";
            /** @description The Unix timestamp (in seconds) for when the thread was created. */
            created_at: number;
            /** @description A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
                     *      */
                    vector_store_ids?: string[];
                };
            } | null;
            metadata: components["schemas"]["Metadata"];
        };
        ThreadStreamEvent: {
            /** @description Whether to enable input audio transcription. */
            enabled?: boolean;
            /** @enum {string} */
            event: "thread.created";
            data: components["schemas"]["ThreadObject"];
        };
        ToggleCertificatesRequest: {
            certificate_ids: string[];
        };
        /** @description A tool that can be used to generate a response.
         *      */
        Tool: components["schemas"]["FunctionTool"] | components["schemas"]["FileSearchTool"] | components["schemas"]["WebSearchPreviewTool"] | components["schemas"]["ComputerUsePreviewTool"] | components["schemas"]["MCPTool"] | components["schemas"]["CodeInterpreterTool"] | components["schemas"]["ImageGenTool"] | components["schemas"]["LocalShellTool"] | components["schemas"]["CustomTool"];
        /**
         * Allowed tools
         * @description Constrains the tools available to the model to a pre-defined set.
         *
         */
        ToolChoiceAllowed: {
            /**
             * @description Allowed tool configuration type. Always `allowed_tools`.
             * @enum {string}
             */
            type: "allowed_tools";
            /**
             * @description Constrains the tools available to the model to a pre-defined set.
             *
             *     `auto` allows the model to pick from among the allowed tools and generate a
             *     message.
             *
             *     `required` requires the model to call one or more of the allowed tools.
             *
             * @enum {string}
             */
            mode: "auto" | "required";
            /** @description A list of tool definitions that the model should be allowed to call.
             *
             *     For the Responses API, the list of tool definitions might look like:
             *     ```json
             *     [
             *       { "type": "function", "name": "get_weather" },
             *       { "type": "mcp", "server_label": "deepwiki" },
             *       { "type": "image_generation" }
             *     ]
             *     ```
             *      */
            tools: {
                [key: string]: unknown;
            }[];
        };
        /**
         * Custom tool
         * @description Use this option to force the model to call a specific custom tool.
         *
         */
        ToolChoiceCustom: {
            /**
             * @description For custom tool calling, the type is always `custom`.
             * @enum {string}
             */
            type: "custom";
            /** @description The name of the custom tool to call. */
            name: string;
        };
        /**
         * Function tool
         * @description Use this option to force the model to call a specific function.
         *
         */
        ToolChoiceFunction: {
            /**
             * @description For function calling, the type is always `function`.
             * @enum {string}
             */
            type: "function";
            /** @description The name of the function to call. */
            name: string;
        };
        /**
         * MCP tool
         * @description Use this option to force the model to call a specific tool on a remote MCP server.
         *
         */
        ToolChoiceMCP: {
            /**
             * @description For MCP tools, the type is always `mcp`.
             * @enum {string}
             */
            type: "mcp";
            /** @description The label of the MCP server to use.
             *      */
            server_label: string;
            /** @description The name of the tool to call on the server.
             *      */
            name?: string | null;
        };
        /**
         * Tool choice mode
         * @description Controls which (if any) tool is called by the model.
         *
         *     `none` means the model will not call any tool and instead generates a message.
         *
         *     `auto` means the model can pick between generating a message or calling one or
         *     more tools.
         *
         *     `required` means the model must call one or more tools.
         *
         * @enum {string}
         */
        ToolChoiceOptions: "none" | "auto" | "required";
        /**
         * Hosted tool
         * @description Indicates that the model should use a built-in tool to generate a response.
         *     [Learn more about built-in tools](https://platform.openai.com/docs/guides/tools).
         *
         */
        ToolChoiceTypes: {
            /**
             * @description The type of hosted tool the model should to use. Learn more about
             *     [built-in tools](https://platform.openai.com/docs/guides/tools).
             *
             *     Allowed values are:
             *     - `file_search`
             *     - `web_search_preview`
             *     - `computer_use_preview`
             *     - `code_interpreter`
             *     - `image_generation`
             *
             * @enum {string}
             */
            type: "file_search" | "web_search_preview" | "computer_use_preview" | "web_search_preview_2025_03_11" | "image_generation" | "code_interpreter";
        };
        /** @description Emitted when there is an additional text delta. This is also the first event emitted when the transcription starts. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`. */
        TranscriptTextDeltaEvent: {
            /**
             * @description The type of the event. Always `transcript.text.delta`.
             *
             * @enum {string}
             */
            type: "transcript.text.delta";
            /** @description The text delta that was additionally transcribed.
             *      */
            delta: string;
            /** @description The log probabilities of the delta. Only included if you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
             *      */
            logprobs?: {
                /** @description The token that was used to generate the log probability.
                 *      */
                token?: string;
                /** @description The log probability of the token.
                 *      */
                logprob?: number;
                /** @description The bytes that were used to generate the log probability.
                 *      */
                bytes?: number[];
            }[];
        };
        /** @description Emitted when the transcription is complete. Contains the complete transcription text. Only emitted when you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `Stream` parameter set to `true`. */
        TranscriptTextDoneEvent: {
            /**
             * @description The type of the event. Always `transcript.text.done`.
             *
             * @enum {string}
             */
            type: "transcript.text.done";
            /** @description The text that was transcribed.
             *      */
            text: string;
            /** @description The log probabilities of the individual tokens in the transcription. Only included if you [create a transcription](https://platform.openai.com/docs/api-reference/audio/create-transcription) with the `include[]` parameter set to `logprobs`.
             *      */
            logprobs?: {
                /** @description The token that was used to generate the log probability.
                 *      */
                token?: string;
                /** @description The log probability of the token.
                 *      */
                logprob?: number;
                /** @description The bytes that were used to generate the log probability.
                 *      */
                bytes?: number[];
            }[];
            usage?: components["schemas"]["TranscriptTextUsageTokens"];
        };
        /**
         * Duration Usage
         * @description Usage statistics for models billed by audio input duration.
         */
        TranscriptTextUsageDuration: {
            /**
             * @description The type of the usage object. Always `duration` for this variant.
             * @enum {string}
             */
            type: "duration";
            /** @description Duration of the input audio in seconds. */
            seconds: number;
        };
        /**
         * Token Usage
         * @description Usage statistics for models billed by token usage.
         */
        TranscriptTextUsageTokens: {
            /**
             * @description The type of the usage object. Always `tokens` for this variant.
             * @enum {string}
             */
            type: "tokens";
            /** @description Number of input tokens billed for this request. */
            input_tokens: number;
            /** @description Details about the input tokens billed for this request. */
            input_token_details?: {
                /** @description Number of text tokens billed for this request. */
                text_tokens?: number;
                /** @description Number of audio tokens billed for this request. */
                audio_tokens?: number;
            };
            /** @description Number of output tokens generated. */
            output_tokens: number;
            /** @description Total number of tokens used (input + output). */
            total_tokens: number;
        };
        /** @description Controls how the audio is cut into chunks. When set to `"auto"`, the server first normalizes loudness and then uses voice activity detection (VAD) to choose boundaries. `server_vad` object can be provided to tweak VAD detection parameters manually. If unset, the audio is transcribed as a single block.  */
        TranscriptionChunkingStrategy: ("auto" | components["schemas"]["VadConfig"]) | null;
        /** @enum {string} */
        TranscriptionInclude: "logprobs";
        TranscriptionSegment: {
            /** @description Unique identifier of the segment. */
            id: number;
            /** @description Seek offset of the segment. */
            seek: number;
            /**
             * Format: float
             * @description Start time of the segment in seconds.
             */
            start: number;
            /**
             * Format: float
             * @description End time of the segment in seconds.
             */
            end: number;
            /** @description Text content of the segment. */
            text: string;
            /** @description Array of token IDs for the text content. */
            tokens: number[];
            /**
             * Format: float
             * @description Temperature parameter used for generating the segment.
             */
            temperature: number;
            /**
             * Format: float
             * @description Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
             */
            avg_logprob: number;
            /**
             * Format: float
             * @description Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
             */
            compression_ratio: number;
            /**
             * Format: float
             * @description Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
             */
            no_speech_prob: number;
        };
        TranscriptionWord: {
            /** @description The text content of the word. */
            word: string;
            /**
             * Format: float
             * @description Start time of the word in seconds.
             */
            start: number;
            /**
             * Format: float
             * @description End time of the word in seconds.
             */
            end: number;
        };
        /**
         * Thread Truncation Controls
         * @description Controls for how a thread will be truncated prior to the run. Use this to control the initial context window of the run.
         */
        TruncationObject: {
            /**
             * @description The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
             * @enum {string}
             */
            type: "auto" | "last_messages";
            /** @description The number of most recent messages from the thread when constructing the context for the run. */
            last_messages?: number | null;
        };
        /**
         * Type
         * @description An action to type in text.
         *
         */
        Type: {
            /**
             * @description Specifies the event type. For a type action, this property is
             *     always set to `type`.
             *
             * @default type
             * @enum {string}
             */
            type: "type";
            /** @description The text to type.
             *      */
            text: string;
        };
        UpdateVectorStoreFileAttributesRequest: {
            attributes: components["schemas"]["VectorStoreFileAttributes"];
        };
        UpdateVectorStoreRequest: {
            /** @description The name of the vector store. */
            name?: string | null;
            expires_after?: components["schemas"]["VectorStoreExpirationAfter"] & unknown;
            metadata?: components["schemas"]["Metadata"];
        };
        /**
         * Upload
         * @description The Upload object can accept byte chunks in the form of Parts.
         *
         */
        Upload: {
            /** @description The Upload unique identifier, which can be referenced in API endpoints. */
            id: string;
            /** @description The Unix timestamp (in seconds) for when the Upload was created. */
            created_at: number;
            /** @description The name of the file to be uploaded. */
            filename: string;
            /** @description The intended number of bytes to be uploaded. */
            bytes: number;
            /** @description The intended purpose of the file. [Please refer here](https://platform.openai.com/docs/api-reference/files/object#files/object-purpose) for acceptable values. */
            purpose: string;
            /**
             * @description The status of the Upload.
             * @enum {string}
             */
            status: "pending" | "completed" | "cancelled" | "expired";
            /** @description The Unix timestamp (in seconds) for when the Upload will expire. */
            expires_at: number;
            /**
             * @description The object type, which is always "upload".
             * @enum {string}
             */
            object: "upload";
            file?: components["schemas"]["OpenAIFile"] & unknown;
        };
        UploadCertificateRequest: {
            /** @description An optional name for the certificate */
            name?: string;
            /** @description The certificate content in PEM format */
            content: string;
        };
        /**
         * UploadPart
         * @description The upload Part represents a chunk of bytes we can add to an Upload object.
         *
         */
        UploadPart: {
            /** @description The upload Part unique identifier, which can be referenced in API endpoints. */
            id: string;
            /** @description The Unix timestamp (in seconds) for when the Part was created. */
            created_at: number;
            /** @description The ID of the Upload object that this Part was added to. */
            upload_id: string;
            /**
             * @description The object type, which is always `upload.part`.
             * @enum {string}
             */
            object: "upload.part";
        };
        /** @description The aggregated audio speeches usage details of the specific time bucket. */
        UsageAudioSpeechesResult: {
            /** @enum {string} */
            object: "organization.usage.audio_speeches.result";
            /** @description The number of characters processed. */
            characters: number;
            /** @description The count of requests made to the model. */
            num_model_requests: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
            /** @description When `group_by=user_id`, this field provides the user ID of the grouped usage result. */
            user_id?: string | null;
            /** @description When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result. */
            api_key_id?: string | null;
            /** @description When `group_by=model`, this field provides the model name of the grouped usage result. */
            model?: string | null;
        };
        /** @description The aggregated audio transcriptions usage details of the specific time bucket. */
        UsageAudioTranscriptionsResult: {
            /** @enum {string} */
            object: "organization.usage.audio_transcriptions.result";
            /** @description The number of seconds processed. */
            seconds: number;
            /** @description The count of requests made to the model. */
            num_model_requests: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
            /** @description When `group_by=user_id`, this field provides the user ID of the grouped usage result. */
            user_id?: string | null;
            /** @description When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result. */
            api_key_id?: string | null;
            /** @description When `group_by=model`, this field provides the model name of the grouped usage result. */
            model?: string | null;
        };
        /** @description The aggregated code interpreter sessions usage details of the specific time bucket. */
        UsageCodeInterpreterSessionsResult: {
            /** @enum {string} */
            object: "organization.usage.code_interpreter_sessions.result";
            /** @description The number of code interpreter sessions. */
            num_sessions?: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
        };
        /** @description The aggregated completions usage details of the specific time bucket. */
        UsageCompletionsResult: {
            /** @enum {string} */
            object: "organization.usage.completions.result";
            /** @description The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens. */
            input_tokens: number;
            /** @description The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens. */
            input_cached_tokens?: number;
            /** @description The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens. */
            output_tokens: number;
            /** @description The aggregated number of audio input tokens used, including cached tokens. */
            input_audio_tokens?: number;
            /** @description The aggregated number of audio output tokens used. */
            output_audio_tokens?: number;
            /** @description The count of requests made to the model. */
            num_model_requests: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
            /** @description When `group_by=user_id`, this field provides the user ID of the grouped usage result. */
            user_id?: string | null;
            /** @description When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result. */
            api_key_id?: string | null;
            /** @description When `group_by=model`, this field provides the model name of the grouped usage result. */
            model?: string | null;
            /** @description When `group_by=batch`, this field tells whether the grouped usage result is batch or not. */
            batch?: boolean | null;
        };
        /** @description The aggregated embeddings usage details of the specific time bucket. */
        UsageEmbeddingsResult: {
            /** @enum {string} */
            object: "organization.usage.embeddings.result";
            /** @description The aggregated number of input tokens used. */
            input_tokens: number;
            /** @description The count of requests made to the model. */
            num_model_requests: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
            /** @description When `group_by=user_id`, this field provides the user ID of the grouped usage result. */
            user_id?: string | null;
            /** @description When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result. */
            api_key_id?: string | null;
            /** @description When `group_by=model`, this field provides the model name of the grouped usage result. */
            model?: string | null;
        };
        /** @description The aggregated images usage details of the specific time bucket. */
        UsageImagesResult: {
            /** @enum {string} */
            object: "organization.usage.images.result";
            /** @description The number of images processed. */
            images: number;
            /** @description The count of requests made to the model. */
            num_model_requests: number;
            /** @description When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`. */
            source?: string | null;
            /** @description When `group_by=size`, this field provides the image size of the grouped usage result. */
            size?: string | null;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
            /** @description When `group_by=user_id`, this field provides the user ID of the grouped usage result. */
            user_id?: string | null;
            /** @description When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result. */
            api_key_id?: string | null;
            /** @description When `group_by=model`, this field provides the model name of the grouped usage result. */
            model?: string | null;
        };
        /** @description The aggregated moderations usage details of the specific time bucket. */
        UsageModerationsResult: {
            /** @enum {string} */
            object: "organization.usage.moderations.result";
            /** @description The aggregated number of input tokens used. */
            input_tokens: number;
            /** @description The count of requests made to the model. */
            num_model_requests: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
            /** @description When `group_by=user_id`, this field provides the user ID of the grouped usage result. */
            user_id?: string | null;
            /** @description When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result. */
            api_key_id?: string | null;
            /** @description When `group_by=model`, this field provides the model name of the grouped usage result. */
            model?: string | null;
        };
        UsageResponse: {
            /** @enum {string} */
            object: "page";
            data: components["schemas"]["UsageTimeBucket"][];
            has_more: boolean;
            next_page: string;
        };
        UsageTimeBucket: {
            /** @enum {string} */
            object: "bucket";
            start_time: number;
            end_time: number;
            result: (components["schemas"]["UsageCompletionsResult"] | components["schemas"]["UsageEmbeddingsResult"] | components["schemas"]["UsageModerationsResult"] | components["schemas"]["UsageImagesResult"] | components["schemas"]["UsageAudioSpeechesResult"] | components["schemas"]["UsageAudioTranscriptionsResult"] | components["schemas"]["UsageVectorStoresResult"] | components["schemas"]["UsageCodeInterpreterSessionsResult"] | components["schemas"]["CostsResult"])[];
        };
        /** @description The aggregated vector stores usage details of the specific time bucket. */
        UsageVectorStoresResult: {
            /** @enum {string} */
            object: "organization.usage.vector_stores.result";
            /** @description The vector stores usage in bytes. */
            usage_bytes: number;
            /** @description When `group_by=project_id`, this field provides the project ID of the grouped usage result. */
            project_id?: string | null;
        };
        /** @description Represents an individual `user` within an organization. */
        User: {
            /**
             * @description The object type, which is always `organization.user`
             * @enum {string}
             */
            object: "organization.user";
            /** @description The identifier, which can be referenced in API endpoints */
            id: string;
            /** @description The name of the user */
            name: string;
            /** @description The email address of the user */
            email: string;
            /**
             * @description `owner` or `reader`
             * @enum {string}
             */
            role: "owner" | "reader";
            /** @description The Unix timestamp (in seconds) of when the user was added. */
            added_at: number;
        };
        UserDeleteResponse: {
            /** @enum {string} */
            object: "organization.user.deleted";
            id: string;
            deleted: boolean;
        };
        UserListResponse: {
            /** @enum {string} */
            object: "list";
            data: components["schemas"]["User"][];
            first_id: string;
            last_id: string;
            has_more: boolean;
        };
        UserRoleUpdateRequest: {
            /**
             * @description `owner` or `reader`
             * @enum {string}
             */
            role: "owner" | "reader";
        };
        VadConfig: {
            /**
             * @description Must be set to `server_vad` to enable manual chunking using server side VAD.
             * @enum {string}
             */
            type: "server_vad";
            /**
             * @description Amount of audio to include before the VAD detected speech (in
             *     milliseconds).
             *
             * @default 300
             */
            prefix_padding_ms: number;
            /**
             * @description Duration of silence to detect speech stop (in milliseconds).
             *     With shorter values the model will respond more quickly,
             *     but may jump in on short pauses from the user.
             *
             * @default 200
             */
            silence_duration_ms: number;
            /**
             * @description Sensitivity threshold (0.0 to 1.0) for voice activity detection. A
             *     higher threshold will require louder audio to activate the model, and
             *     thus might perform better in noisy environments.
             *
             * @default 0.5
             */
            threshold: number;
        };
        /** ValidateGraderRequest */
        ValidateGraderRequest: {
            /** @description The grader used for the fine-tuning job. */
            grader: components["schemas"]["GraderStringCheck"] | components["schemas"]["GraderTextSimilarity"] | components["schemas"]["GraderPython"] | components["schemas"]["GraderScoreModel"] | components["schemas"]["GraderMulti"];
        };
        /** ValidateGraderResponse */
        ValidateGraderResponse: {
            /** @description The grader used for the fine-tuning job. */
            grader?: components["schemas"]["GraderStringCheck"] | components["schemas"]["GraderTextSimilarity"] | components["schemas"]["GraderPython"] | components["schemas"]["GraderScoreModel"] | components["schemas"]["GraderMulti"];
        };
        /**
         * Vector store expiration policy
         * @description The expiration policy for a vector store.
         */
        VectorStoreExpirationAfter: {
            /**
             * @description Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.
             * @enum {string}
             */
            anchor: "last_active_at";
            /** @description The number of days after the anchor time that the vector store will expire. */
            days: number;
        };
        /** @description Set of 16 key-value pairs that can be attached to an object. This can be
         *     useful for storing additional information about the object in a structured
         *     format, and querying for objects via API or the dashboard. Keys are strings
         *     with a maximum length of 64 characters. Values are strings with a maximum
         *     length of 512 characters, booleans, or numbers.
         *      */
        VectorStoreFileAttributes: {
            [key: string]: string | number | boolean;
        } | null;
        /**
         * Vector store file batch
         * @description A batch of files attached to a vector store.
         */
        VectorStoreFileBatchObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `vector_store.file_batch`.
             * @enum {string}
             */
            object: "vector_store.files_batch";
            /** @description The Unix timestamp (in seconds) for when the vector store files batch was created. */
            created_at: number;
            /** @description The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to. */
            vector_store_id: string;
            /**
             * @description The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
             * @enum {string}
             */
            status: "in_progress" | "completed" | "cancelled" | "failed";
            file_counts: {
                /** @description The number of files that are currently being processed. */
                in_progress: number;
                /** @description The number of files that have been processed. */
                completed: number;
                /** @description The number of files that have failed to process. */
                failed: number;
                /** @description The number of files that where cancelled. */
                cancelled: number;
                /** @description The total number of files. */
                total: number;
            };
        };
        /** @description Represents the parsed content of a vector store file. */
        VectorStoreFileContentResponse: {
            /**
             * @description The object type, which is always `vector_store.file_content.page`
             * @enum {string}
             */
            object: "vector_store.file_content.page";
            /** @description Parsed content of the file. */
            data: {
                /** @description The content type (currently only `"text"`) */
                type?: string;
                /** @description The text content */
                text?: string;
            }[];
            /** @description Indicates if there are more content pages to fetch. */
            has_more: boolean;
            /** @description The token for the next page, if any. */
            next_page: string | null;
        };
        /**
         * Vector store files
         * @description A list of files attached to a vector store.
         */
        VectorStoreFileObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `vector_store.file`.
             * @enum {string}
             */
            object: "vector_store.file";
            /** @description The total vector store usage in bytes. Note that this may be different from the original file size. */
            usage_bytes: number;
            /** @description The Unix timestamp (in seconds) for when the vector store file was created. */
            created_at: number;
            /** @description The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) that the [File](https://platform.openai.com/docs/api-reference/files) is attached to. */
            vector_store_id: string;
            /**
             * @description The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
             * @enum {string}
             */
            status: "in_progress" | "completed" | "cancelled" | "failed";
            /** @description The last error associated with this vector store file. Will be `null` if there are no errors. */
            last_error: {
                /**
                 * @description One of `server_error` or `rate_limit_exceeded`.
                 * @enum {string}
                 */
                code: "server_error" | "unsupported_file" | "invalid_file";
                /** @description A human-readable description of the error. */
                message: string;
            } | null;
            chunking_strategy?: components["schemas"]["ChunkingStrategyResponse"];
            attributes?: components["schemas"]["VectorStoreFileAttributes"];
        };
        /**
         * Vector store
         * @description A vector store is a collection of processed files can be used by the `file_search` tool.
         */
        VectorStoreObject: {
            /** @description The identifier, which can be referenced in API endpoints. */
            id: string;
            /**
             * @description The object type, which is always `vector_store`.
             * @enum {string}
             */
            object: "vector_store";
            /** @description The Unix timestamp (in seconds) for when the vector store was created. */
            created_at: number;
            /** @description The name of the vector store. */
            name: string;
            /** @description The total number of bytes used by the files in the vector store. */
            usage_bytes: number;
            file_counts: {
                /** @description The number of files that are currently being processed. */
                in_progress: number;
                /** @description The number of files that have been successfully processed. */
                completed: number;
                /** @description The number of files that have failed to process. */
                failed: number;
                /** @description The number of files that were cancelled. */
                cancelled: number;
                /** @description The total number of files. */
                total: number;
            };
            /**
             * @description The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
             * @enum {string}
             */
            status: "expired" | "in_progress" | "completed";
            expires_after?: components["schemas"]["VectorStoreExpirationAfter"];
            /** @description The Unix timestamp (in seconds) for when the vector store will expire. */
            expires_at?: number | null;
            /** @description The Unix timestamp (in seconds) for when the vector store was last active. */
            last_active_at: number | null;
            metadata: components["schemas"]["Metadata"];
        };
        VectorStoreSearchRequest: {
            /** @description A query string for a search */
            query: string | string[];
            /**
             * @description Whether to rewrite the natural language query for vector search.
             * @default false
             */
            rewrite_query: boolean;
            /**
             * @description The maximum number of results to return. This number should be between 1 and 50 inclusive.
             * @default 10
             */
            max_num_results: number;
            /** @description A filter to apply based on file attributes. */
            filters?: components["schemas"]["ComparisonFilter"] | components["schemas"]["CompoundFilter"];
            /** @description Ranking options for search. */
            ranking_options?: {
                /**
                 * @description Enable re-ranking; set to `none` to disable, which can help reduce latency.
                 * @default auto
                 * @enum {string}
                 */
                ranker: "none" | "auto" | "default-2024-11-15";
                /** @default 0 */
                score_threshold: number;
            };
        };
        VectorStoreSearchResultContentObject: {
            /**
             * @description The type of content.
             * @enum {string}
             */
            type: "text";
            /** @description The text content returned from search. */
            text: string;
        };
        VectorStoreSearchResultItem: {
            /** @description The ID of the vector store file. */
            file_id: string;
            /** @description The name of the vector store file. */
            filename: string;
            /** @description The similarity score for the result. */
            score: number;
            attributes: components["schemas"]["VectorStoreFileAttributes"];
            /** @description Content chunks from the file. */
            content: components["schemas"]["VectorStoreSearchResultContentObject"][];
        };
        VectorStoreSearchResultsPage: {
            /**
             * @description The object type, which is always `vector_store.search_results.page`
             * @enum {string}
             */
            object: "vector_store.search_results.page";
            search_query: string[];
            /** @description The list of search result items. */
            data: components["schemas"]["VectorStoreSearchResultItem"][];
            /** @description Indicates if there are more results to fetch. */
            has_more: boolean;
            /** @description The token for the next page, if any. */
            next_page: string | null;
        };
        /**
         * @description Constrains the verbosity of the model's response. Lower values will result in
         *     more concise responses, while higher values will result in more verbose responses.
         *     Currently supported values are `low`, `medium`, and `high`.
         *
         * @default medium
         * @enum {string|null}
         */
        Verbosity: "low" | "medium" | "high" | null;
        /** @example ash */
        VoiceIdsShared: string | ("alloy" | "ash" | "ballad" | "coral" | "echo" | "sage" | "shimmer" | "verse");
        /**
         * Wait
         * @description A wait action.
         *
         */
        Wait: {
            /**
             * @description Specifies the event type. For a wait action, this property is
             *     always set to `wait`.
             *
             * @default wait
             * @enum {string}
             */
            type: "wait";
        };
        /**
         * Find action
         * @description Action type "find": Searches for a pattern within a loaded page.
         *
         */
        WebSearchActionFind: {
            /**
             * @description The action type.
             *
             * @enum {string}
             */
            type: "find";
            /**
             * Format: uri
             * @description The URL of the page searched for the pattern.
             *
             */
            url: string;
            /** @description The pattern or text to search for within the page.
             *      */
            pattern: string;
        };
        /**
         * Open page action
         * @description Action type "open_page" - Opens a specific URL from search results.
         *
         */
        WebSearchActionOpenPage: {
            /**
             * @description The action type.
             *
             * @enum {string}
             */
            type: "open_page";
            /**
             * Format: uri
             * @description The URL opened by the model.
             *
             */
            url: string;
        };
        /**
         * Search action
         * @description Action type "search" - Performs a web search query.
         *
         */
        WebSearchActionSearch: {
            /**
             * @description The action type.
             *
             * @enum {string}
             */
            type: "search";
            /** @description The search query.
             *      */
            query: string;
        };
        /**
         * @description High level guidance for the amount of context window space to use for the
         *     search. One of `low`, `medium`, or `high`. `medium` is the default.
         *
         * @default medium
         * @enum {string}
         */
        WebSearchContextSize: "low" | "medium" | "high";
        /**
         * Web search location
         * @description Approximate location parameters for the search.
         */
        WebSearchLocation: {
            /** @description The two-letter
             *     [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
             *     e.g. `US`.
             *      */
            country?: string;
            /** @description Free text input for the region of the user, e.g. `California`.
             *      */
            region?: string;
            /** @description Free text input for the city of the user, e.g. `San Francisco`.
             *      */
            city?: string;
            /** @description The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
             *     of the user, e.g. `America/Los_Angeles`.
             *      */
            timezone?: string;
        };
        /**
         * Web search tool call
         * @description The results of a web search tool call. See the
         *     [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
         *
         */
        WebSearchToolCall: {
            /** @description The unique ID of the web search tool call.
             *      */
            id: string;
            /**
             * @description The type of the web search tool call. Always `web_search_call`.
             *
             * @enum {string}
             */
            type: "web_search_call";
            /**
             * @description The status of the web search tool call.
             *
             * @enum {string}
             */
            status: "in_progress" | "searching" | "completed" | "failed";
            /** @description An object describing the specific action taken in this web search call.
             *     Includes details on how the model used the web (search, open_page, find).
             *      */
            action: components["schemas"]["WebSearchActionSearch"] | components["schemas"]["WebSearchActionOpenPage"] | components["schemas"]["WebSearchActionFind"];
        };
        /**
         * batch.cancelled
         * @description Sent when a batch API request has been cancelled.
         *
         */
        WebhookBatchCancelled: {
            /** @description The Unix timestamp (in seconds) of when the batch API request was cancelled.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the batch API request.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `batch.cancelled`.
             *
             * @enum {string}
             */
            type: "batch.cancelled";
        };
        /**
         * batch.completed
         * @description Sent when a batch API request has been completed.
         *
         */
        WebhookBatchCompleted: {
            /** @description The Unix timestamp (in seconds) of when the batch API request was completed.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the batch API request.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `batch.completed`.
             *
             * @enum {string}
             */
            type: "batch.completed";
        };
        /**
         * batch.expired
         * @description Sent when a batch API request has expired.
         *
         */
        WebhookBatchExpired: {
            /** @description The Unix timestamp (in seconds) of when the batch API request expired.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the batch API request.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `batch.expired`.
             *
             * @enum {string}
             */
            type: "batch.expired";
        };
        /**
         * batch.failed
         * @description Sent when a batch API request has failed.
         *
         */
        WebhookBatchFailed: {
            /** @description The Unix timestamp (in seconds) of when the batch API request failed.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the batch API request.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `batch.failed`.
             *
             * @enum {string}
             */
            type: "batch.failed";
        };
        /**
         * eval.run.canceled
         * @description Sent when an eval run has been canceled.
         *
         */
        WebhookEvalRunCanceled: {
            /** @description The Unix timestamp (in seconds) of when the eval run was canceled.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the eval run.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `eval.run.canceled`.
             *
             * @enum {string}
             */
            type: "eval.run.canceled";
        };
        /**
         * eval.run.failed
         * @description Sent when an eval run has failed.
         *
         */
        WebhookEvalRunFailed: {
            /** @description The Unix timestamp (in seconds) of when the eval run failed.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the eval run.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `eval.run.failed`.
             *
             * @enum {string}
             */
            type: "eval.run.failed";
        };
        /**
         * eval.run.succeeded
         * @description Sent when an eval run has succeeded.
         *
         */
        WebhookEvalRunSucceeded: {
            /** @description The Unix timestamp (in seconds) of when the eval run succeeded.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the eval run.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `eval.run.succeeded`.
             *
             * @enum {string}
             */
            type: "eval.run.succeeded";
        };
        /**
         * fine_tuning.job.cancelled
         * @description Sent when a fine-tuning job has been cancelled.
         *
         */
        WebhookFineTuningJobCancelled: {
            /** @description The Unix timestamp (in seconds) of when the fine-tuning job was cancelled.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the fine-tuning job.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `fine_tuning.job.cancelled`.
             *
             * @enum {string}
             */
            type: "fine_tuning.job.cancelled";
        };
        /**
         * fine_tuning.job.failed
         * @description Sent when a fine-tuning job has failed.
         *
         */
        WebhookFineTuningJobFailed: {
            /** @description The Unix timestamp (in seconds) of when the fine-tuning job failed.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the fine-tuning job.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `fine_tuning.job.failed`.
             *
             * @enum {string}
             */
            type: "fine_tuning.job.failed";
        };
        /**
         * fine_tuning.job.succeeded
         * @description Sent when a fine-tuning job has succeeded.
         *
         */
        WebhookFineTuningJobSucceeded: {
            /** @description The Unix timestamp (in seconds) of when the fine-tuning job succeeded.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the fine-tuning job.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `fine_tuning.job.succeeded`.
             *
             * @enum {string}
             */
            type: "fine_tuning.job.succeeded";
        };
        /**
         * response.cancelled
         * @description Sent when a background response has been cancelled.
         *
         */
        WebhookResponseCancelled: {
            /** @description The Unix timestamp (in seconds) of when the model response was cancelled.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the model response.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `response.cancelled`.
             *
             * @enum {string}
             */
            type: "response.cancelled";
        };
        /**
         * response.completed
         * @description Sent when a background response has been completed.
         *
         */
        WebhookResponseCompleted: {
            /** @description The Unix timestamp (in seconds) of when the model response was completed.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the model response.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `response.completed`.
             *
             * @enum {string}
             */
            type: "response.completed";
        };
        /**
         * response.failed
         * @description Sent when a background response has failed.
         *
         */
        WebhookResponseFailed: {
            /** @description The Unix timestamp (in seconds) of when the model response failed.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the model response.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `response.failed`.
             *
             * @enum {string}
             */
            type: "response.failed";
        };
        /**
         * response.incomplete
         * @description Sent when a background response has been interrupted.
         *
         */
        WebhookResponseIncomplete: {
            /** @description The Unix timestamp (in seconds) of when the model response was interrupted.
             *      */
            created_at: number;
            /** @description The unique ID of the event.
             *      */
            id: string;
            /** @description Event data payload.
             *      */
            data: {
                /** @description The unique ID of the model response.
                 *      */
                id: string;
            };
            /**
             * @description The object of the event. Always `event`.
             *
             * @enum {string}
             */
            object?: "event";
            /**
             * @description The type of the event. Always `response.incomplete`.
             *
             * @enum {string}
             */
            type: "response.incomplete";
        };
        /**
         * Input text
         * @description A text input to the model.
         */
        InputTextContent: {
            /**
             * @description The type of the input item. Always `input_text`.
             * @default input_text
             * @enum {string}
             */
            type: "input_text";
            /** @description The text input to the model. */
            text: string;
        };
        /**
         * Input image
         * @description An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
         */
        InputImageContent: {
            /**
             * @description The type of the input item. Always `input_image`.
             * @default input_image
             * @enum {string}
             */
            type: "input_image";
            image_url?: string | null;
            file_id?: string | null;
            /**
             * @description The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`.
             * @enum {string}
             */
            detail: "low" | "high" | "auto";
        };
        /**
         * Input file
         * @description A file input to the model.
         */
        InputFileContent: {
            /**
             * @description The type of the input item. Always `input_file`.
             * @default input_file
             * @enum {string}
             */
            type: "input_file";
            file_id?: string | null;
            /** @description The name of the file to be sent to the model. */
            filename?: string;
            /** @description The URL of the file to be sent to the model. */
            file_url?: string;
            /** @description The content of the file to be sent to the model.
             *      */
            file_data?: string;
        };
        /**
         * Function
         * @description Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).
         */
        FunctionTool: {
            /**
             * @description The type of the function tool. Always `function`.
             * @default function
             * @enum {string}
             */
            type: "function";
            /** @description The name of the function to call. */
            name: string;
            description?: string | null;
            parameters: {
                [key: string]: unknown;
            } | null;
            strict: boolean | null;
        };
        RankingOptions: {
            /**
             * @description The ranker to use for the file search.
             * @enum {string}
             */
            ranker?: "auto" | "default-2024-11-15";
            /** @description The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results. */
            score_threshold?: number;
        };
        Filters: components["schemas"]["ComparisonFilter"] | components["schemas"]["CompoundFilter"];
        /**
         * File search
         * @description A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).
         */
        FileSearchTool: {
            /**
             * @description The type of the file search tool. Always `file_search`.
             * @default file_search
             * @enum {string}
             */
            type: "file_search";
            /** @description The IDs of the vector stores to search. */
            vector_store_ids: string[];
            /** @description The maximum number of results to return. This number should be between 1 and 50 inclusive. */
            max_num_results?: number;
            /** @description Ranking options for search. */
            ranking_options?: components["schemas"]["RankingOptions"];
            filters?: components["schemas"]["Filters"] | null;
        };
        ApproximateLocation: {
            /**
             * @description The type of location approximation. Always `approximate`.
             * @default approximate
             * @enum {string}
             */
            type: "approximate";
            country?: string | null;
            region?: string | null;
            city?: string | null;
            timezone?: string | null;
        };
        /**
         * Web search preview
         * @description This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
         */
        WebSearchPreviewTool: {
            /**
             * @description The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`.
             * @default web_search_preview
             * @enum {string}
             */
            type: "web_search_preview" | "web_search_preview_2025_03_11";
            user_location?: components["schemas"]["ApproximateLocation"] | null;
            /**
             * @description High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default.
             * @enum {string}
             */
            search_context_size?: "low" | "medium" | "high";
        };
        /**
         * Computer use preview
         * @description A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use).
         */
        ComputerUsePreviewTool: {
            /**
             * @description The type of the computer use tool. Always `computer_use_preview`.
             * @default computer_use_preview
             * @enum {string}
             */
            type: "computer_use_preview";
            /**
             * @description The type of computer environment to control.
             * @enum {string}
             */
            environment: "windows" | "mac" | "linux" | "ubuntu" | "browser";
            /** @description The width of the computer display. */
            display_width: number;
            /** @description The height of the computer display. */
            display_height: number;
        };
        /**
         * Input usage details
         * @description The input tokens detailed information for the image generation.
         */
        ImageGenInputUsageDetails: {
            /** @description The number of text tokens in the input prompt. */
            text_tokens: number;
            /** @description The number of image tokens in the input prompt. */
            image_tokens: number;
        };
        /**
         * Image generation usage
         * @description For `gpt-image-1` only, the token usage information for the image generation.
         */
        ImageGenUsage: {
            /** @description The number of tokens (images and text) in the input prompt. */
            input_tokens: number;
            /** @description The total number of tokens (images and text) used for the image generation. */
            total_tokens: number;
            /** @description The number of output tokens generated by the model. */
            output_tokens: number;
            input_tokens_details: components["schemas"]["ImageGenInputUsageDetails"];
        };
        /**
         * File citation
         * @description A citation to a file.
         */
        FileCitationBody: {
            /**
             * @description The type of the file citation. Always `file_citation`.
             * @default file_citation
             * @enum {string}
             */
            type: "file_citation";
            /** @description The ID of the file. */
            file_id: string;
            /** @description The index of the file in the list of files. */
            index: number;
            /** @description The filename of the file cited. */
            filename: string;
        };
        /**
         * URL citation
         * @description A citation for a web resource used to generate a model response.
         */
        UrlCitationBody: {
            /**
             * @description The type of the URL citation. Always `url_citation`.
             * @default url_citation
             * @enum {string}
             */
            type: "url_citation";
            /** @description The URL of the web resource. */
            url: string;
            /** @description The index of the first character of the URL citation in the message. */
            start_index: number;
            /** @description The index of the last character of the URL citation in the message. */
            end_index: number;
            /** @description The title of the web resource. */
            title: string;
        };
        /**
         * Container file citation
         * @description A citation for a container file used to generate a model response.
         */
        ContainerFileCitationBody: {
            /**
             * @description The type of the container file citation. Always `container_file_citation`.
             * @default container_file_citation
             * @enum {string}
             */
            type: "container_file_citation";
            /** @description The ID of the container file. */
            container_id: string;
            /** @description The ID of the file. */
            file_id: string;
            /** @description The index of the first character of the container file citation in the message. */
            start_index: number;
            /** @description The index of the last character of the container file citation in the message. */
            end_index: number;
            /** @description The filename of the container file cited. */
            filename: string;
        };
        Annotation: components["schemas"]["FileCitationBody"] | components["schemas"]["UrlCitationBody"] | components["schemas"]["ContainerFileCitationBody"] | components["schemas"]["FilePath"];
        /**
         * Top log probability
         * @description The top log probability of a token.
         */
        TopLogProb: {
            token: string;
            logprob: number;
            bytes: number[];
        };
        /**
         * Log probability
         * @description The log probability of a token.
         */
        LogProb: {
            token: string;
            logprob: number;
            bytes: number[];
            top_logprobs: components["schemas"]["TopLogProb"][];
        };
        /**
         * Output text
         * @description A text output from the model.
         */
        OutputTextContent: {
            /**
             * @description The type of the output text. Always `output_text`.
             * @default output_text
             * @enum {string}
             */
            type: "output_text";
            /** @description The text output from the model. */
            text: string;
            /** @description The annotations of the text output. */
            annotations: components["schemas"]["Annotation"][];
            logprobs?: components["schemas"]["LogProb"][];
        };
        /**
         * Refusal
         * @description A refusal from the model.
         */
        RefusalContent: {
            /**
             * @description The type of the refusal. Always `refusal`.
             * @default refusal
             * @enum {string}
             */
            type: "refusal";
            /** @description The refusal explanation from the model. */
            refusal: string;
        };
        /** @description A pending safety check for the computer call. */
        ComputerCallSafetyCheckParam: {
            /** @description The ID of the pending safety check. */
            id: string;
            code?: string | null;
            message?: string | null;
        };
        /**
         * Computer tool call output
         * @description The output of a computer tool call.
         */
        ComputerCallOutputItemParam: {
            id?: string | null;
            /** @description The ID of the computer tool call that produced the output. */
            call_id: string;
            /**
             * @description The type of the computer tool call output. Always `computer_call_output`.
             * @default computer_call_output
             * @enum {string}
             */
            type: "computer_call_output";
            output: components["schemas"]["ComputerScreenshotImage"];
            acknowledged_safety_checks?: components["schemas"]["ComputerCallSafetyCheckParam"][] | null;
            status?: ("in_progress" | "completed" | "incomplete") | null;
        };
        /**
         * Function tool call output
         * @description The output of a function tool call.
         */
        FunctionCallOutputItemParam: {
            id?: string | null;
            /** @description The unique ID of the function tool call generated by the model. */
            call_id: string;
            /**
             * @description The type of the function tool call output. Always `function_call_output`.
             * @default function_call_output
             * @enum {string}
             */
            type: "function_call_output";
            /** @description A JSON string of the output of the function tool call. */
            output: string;
            status?: ("in_progress" | "completed" | "incomplete") | null;
        };
        /**
         * Item reference
         * @description An internal identifier for an item to reference.
         */
        ItemReferenceParam: {
            type?: "item_reference" | null;
            /** @description The ID of the item to reference. */
            id: string;
        };
        RealtimeConversationItemContent: {
            /**
             * @description The content type (`input_text`, `input_audio`, `item_reference`, `text`, `audio`).
             *
             * @enum {string}
             */
            type?: "input_text" | "input_audio" | "item_reference" | "text" | "audio";
            /** @description The text content, used for `input_text` and `text` content types.
             *      */
            text?: string;
            /** @description ID of a previous conversation item to reference (for `item_reference`
             *     content types in `response.create` events). These can reference both
             *     client and server created items.
             *      */
            id?: string;
            /** @description Base64-encoded audio bytes, used for `input_audio` content type.
             *      */
            audio?: string;
            /** @description The transcript of the audio, used for `input_audio` and `audio`
             *     content types.
             *      */
            transcript?: string;
        };
        RealtimeConnectParams: {
            model: string;
        };
        /** @description An object describing an image to classify. */
        ModerationImageURLInput: {
            /**
             * @description Always `image_url`.
             * @enum {string}
             */
            type: "image_url";
            /** @description Contains either an image URL or a data URL for a base64 encoded image. */
            image_url: {
                /**
                 * Format: uri
                 * @description Either a URL of the image or the base64 encoded image data.
                 * @example https://example.com/image.jpg
                 */
                url: string;
            };
        };
        /** @description An object describing text to classify. */
        ModerationTextInput: {
            /**
             * @description Always `text`.
             * @enum {string}
             */
            type: "text";
            /**
             * @description A string of text to classify.
             * @example I want to kill them
             */
            text: string;
        };
        /** @description The strategy used to chunk the file. */
        ChunkingStrategyResponse: components["schemas"]["StaticChunkingStrategyResponseParam"] | components["schemas"]["OtherChunkingStrategyResponseParam"];
        /**
         * @description The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets
         *
         * @enum {string}
         */
        FilePurpose: "assistants" | "batch" | "fine-tune" | "vision" | "user_data" | "evals";
        BatchError: {
            /** @description An error code identifying the error type. */
            code?: string;
            /** @description A human-readable message providing more details about the error. */
            message?: string;
            /** @description The name of the parameter that caused the error, if applicable. */
            param?: string | null;
            /** @description The line number of the input file where the error occurred, if applicable. */
            line?: number | null;
        };
        /** @description The request counts for different statuses within the batch. */
        BatchRequestCounts: {
            /** @description Total number of requests in the batch. */
            total: number;
            /** @description Number of requests that have been completed successfully. */
            completed: number;
            /** @description Number of requests that have failed. */
            failed: number;
        };
        AssistantTool: components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsFileSearch"] | components["schemas"]["AssistantToolsFunction"];
        TextAnnotationDelta: components["schemas"]["MessageDeltaContentTextAnnotationsFileCitationObject"] | components["schemas"]["MessageDeltaContentTextAnnotationsFilePathObject"];
        TextAnnotation: components["schemas"]["MessageContentTextAnnotationsFileCitationObject"] | components["schemas"]["MessageContentTextAnnotationsFilePathObject"];
        RunStepDetailsToolCall: components["schemas"]["RunStepDetailsToolCallsCodeObject"] | components["schemas"]["RunStepDetailsToolCallsFileSearchObject"] | components["schemas"]["RunStepDetailsToolCallsFunctionObject"];
        RunStepDeltaStepDetailsToolCall: components["schemas"]["RunStepDeltaStepDetailsToolCallsCodeObject"] | components["schemas"]["RunStepDeltaStepDetailsToolCallsFileSearchObject"] | components["schemas"]["RunStepDeltaStepDetailsToolCallsFunctionObject"];
        MessageContent: components["schemas"]["MessageContentImageFileObject"] | components["schemas"]["MessageContentImageUrlObject"] | components["schemas"]["MessageContentTextObject"] | components["schemas"]["MessageContentRefusalObject"];
        MessageContentDelta: components["schemas"]["MessageDeltaContentImageFileObject"] | components["schemas"]["MessageDeltaContentTextObject"] | components["schemas"]["MessageDeltaContentRefusalObject"] | components["schemas"]["MessageDeltaContentImageUrlObject"];
        /** @enum {string} */
        ChatModel: "gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gpt-5-2025-08-07" | "gpt-5-mini-2025-08-07" | "gpt-5-nano-2025-08-07" | "gpt-5-chat-latest" | "gpt-4.1" | "gpt-4.1-mini" | "gpt-4.1-nano" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "gpt-4.1-nano-2025-04-14" | "o4-mini" | "o4-mini-2025-04-16" | "o3" | "o3-2025-04-16" | "o3-mini" | "o3-mini-2025-01-31" | "o1" | "o1-2024-12-17" | "o1-preview" | "o1-preview-2024-09-12" | "o1-mini" | "o1-mini-2024-09-12" | "gpt-4o" | "gpt-4o-2024-11-20" | "gpt-4o-2024-08-06" | "gpt-4o-2024-05-13" | "gpt-4o-audio-preview" | "gpt-4o-audio-preview-2024-10-01" | "gpt-4o-audio-preview-2024-12-17" | "gpt-4o-audio-preview-2025-06-03" | "gpt-4o-mini-audio-preview" | "gpt-4o-mini-audio-preview-2024-12-17" | "gpt-4o-search-preview" | "gpt-4o-mini-search-preview" | "gpt-4o-search-preview-2025-03-11" | "gpt-4o-mini-search-preview-2025-03-11" | "chatgpt-4o-latest" | "codex-mini-latest" | "gpt-4o-mini" | "gpt-4o-mini-2024-07-18" | "gpt-4-turbo" | "gpt-4-turbo-2024-04-09" | "gpt-4-0125-preview" | "gpt-4-turbo-preview" | "gpt-4-1106-preview" | "gpt-4-vision-preview" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-1106" | "gpt-3.5-turbo-0125" | "gpt-3.5-turbo-16k-0613";
        CreateThreadAndRunRequestWithoutStream: {
            /** @description The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run. */
            assistant_id: string;
            thread?: components["schemas"]["CreateThreadRequest"];
            /** @description The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used. */
            model?: (string | ("gpt-5" | "gpt-5-mini" | "gpt-5-nano" | "gpt-5-2025-08-07" | "gpt-5-mini-2025-08-07" | "gpt-5-nano-2025-08-07" | "gpt-4.1" | "gpt-4.1-mini" | "gpt-4.1-nano" | "gpt-4.1-2025-04-14" | "gpt-4.1-mini-2025-04-14" | "gpt-4.1-nano-2025-04-14" | "gpt-4o" | "gpt-4o-2024-11-20" | "gpt-4o-2024-08-06" | "gpt-4o-2024-05-13" | "gpt-4o-mini" | "gpt-4o-mini-2024-07-18" | "gpt-4.5-preview" | "gpt-4.5-preview-2025-02-27" | "gpt-4-turbo" | "gpt-4-turbo-2024-04-09" | "gpt-4-0125-preview" | "gpt-4-turbo-preview" | "gpt-4-1106-preview" | "gpt-4-vision-preview" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-1106" | "gpt-3.5-turbo-0125" | "gpt-3.5-turbo-16k-0613")) | null;
            /** @description Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis. */
            instructions?: string | null;
            /** @description Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis. */
            tools?: components["schemas"]["AssistantTool"][] | null;
            /** @description A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             *      */
            tool_resources?: {
                code_interpreter?: {
                    /**
                     * @description A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                     *
                     * @default []
                     */
                    file_ids: string[];
                };
                file_search?: {
                    /** @description The ID of the [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
                     *      */
                    vector_store_ids?: string[];
                };
            } | null;
            metadata?: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            /** @description The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_prompt_tokens?: number | null;
            /** @description The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_completion_tokens?: number | null;
            truncation_strategy?: components["schemas"]["TruncationObject"] & unknown;
            tool_choice?: components["schemas"]["AssistantsApiToolChoiceOption"] & unknown;
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        CreateRunRequestWithoutStream: {
            /** @description The ID of the [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to execute this run. */
            assistant_id: string;
            /** @description The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used. */
            model?: (string | components["schemas"]["AssistantSupportedModels"]) | null;
            reasoning_effort?: components["schemas"]["ReasoningEffort"];
            /** @description Overrides the [instructions](https://platform.openai.com/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis. */
            instructions?: string | null;
            /** @description Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions. */
            additional_instructions?: string | null;
            /** @description Adds additional messages to the thread before creating the run. */
            additional_messages?: components["schemas"]["CreateMessageRequest"][] | null;
            /** @description Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis. */
            tools?: components["schemas"]["AssistantTool"][] | null;
            metadata?: components["schemas"]["Metadata"];
            /**
             * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
             *
             * @default 1
             * @example 1
             */
            temperature: number | null;
            /**
             * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
             *
             *     We generally recommend altering this or temperature but not both.
             *
             * @default 1
             * @example 1
             */
            top_p: number | null;
            /** @description The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_prompt_tokens?: number | null;
            /** @description The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             *      */
            max_completion_tokens?: number | null;
            truncation_strategy?: components["schemas"]["TruncationObject"] & unknown;
            tool_choice?: components["schemas"]["AssistantsApiToolChoiceOption"] & unknown;
            parallel_tool_calls?: components["schemas"]["ParallelToolCalls"];
            response_format?: components["schemas"]["AssistantsApiResponseFormatOption"];
        };
        SubmitToolOutputsRunRequestWithoutStream: {
            /** @description A list of tools for which the outputs are being submitted. */
            tool_outputs: {
                /** @description The ID of the tool call in the `required_action` object within the run object the output is being submitted for. */
                tool_call_id?: string;
                /** @description The output of the tool call to be submitted to continue the run. */
                output?: string;
            }[];
        };
        /**
         * @description The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
         * @enum {string}
         */
        RunStatus: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "incomplete" | "expired";
        /** @description The delta containing the fields that have changed on the run step. */
        RunStepDeltaObjectDelta: {
            /** @description The details of the run step. */
            step_details?: components["schemas"]["RunStepDeltaStepDetailsMessageCreationObject"] | components["schemas"]["RunStepDeltaStepDetailsToolCallsObject"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listAssistants: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAssistantsResponse"];
                };
            };
        };
    };
    createAssistant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAssistantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantObject"];
                };
            };
        };
    };
    getAssistant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the assistant to retrieve. */
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantObject"];
                };
            };
        };
    };
    modifyAssistant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the assistant to modify. */
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyAssistantRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantObject"];
                };
            };
        };
    };
    deleteAssistant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the assistant to delete. */
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteAssistantResponse"];
                };
            };
        };
    };
    createSpeech: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSpeechRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    /** @description chunked */
                    "Transfer-Encoding"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                    "text/event-stream": components["schemas"]["CreateSpeechResponseStreamEvent"];
                };
            };
        };
    };
    createTranscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateTranscriptionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTranscriptionResponseJson"] | components["schemas"]["CreateTranscriptionResponseVerboseJson"];
                    "text/event-stream": components["schemas"]["CreateTranscriptionResponseStreamEvent"];
                };
            };
        };
    };
    createTranslation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateTranslationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTranslationResponseJson"] | components["schemas"]["CreateTranslationResponseVerboseJson"];
                };
            };
        };
    };
    listBatches: {
        parameters: {
            query?: {
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListBatchesResponse"];
                };
            };
        };
    };
    createBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ID of an uploaded file that contains requests for the new batch.
                     *
                     *     See [upload file](https://platform.openai.com/docs/api-reference/files/create) for how to upload a file.
                     *
                     *     Your input file must be formatted as a [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.
                     *      */
                    input_file_id: string;
                    /**
                     * @description The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                     * @enum {string}
                     */
                    endpoint: "/v1/responses" | "/v1/chat/completions" | "/v1/embeddings" | "/v1/completions";
                    /**
                     * @description The time frame within which the batch should be processed. Currently only `24h` is supported.
                     * @enum {string}
                     */
                    completion_window: "24h";
                    metadata?: components["schemas"]["Metadata"];
                    output_expires_after?: components["schemas"]["BatchFileExpirationAfter"];
                };
            };
        };
        responses: {
            /** @description Batch created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Batch"];
                };
            };
        };
    };
    retrieveBatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the batch to retrieve. */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Batch"];
                };
            };
        };
    };
    cancelBatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the batch to cancel. */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Batch is cancelling. Returns the cancelling batch's details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Batch"];
                };
            };
        };
    };
    listChatCompletions: {
        parameters: {
            query?: {
                /** @description The model used to generate the Chat Completions. */
                model?: string;
                /** @description A list of metadata keys to filter the Chat Completions by. Example:
                 *
                 *     `metadata[key1]=value1&metadata[key2]=value2`
                 *      */
                metadata?: components["schemas"]["Metadata"];
                /** @description Identifier for the last chat completion from the previous pagination request. */
                after?: string;
                /** @description Number of Chat Completions to retrieve. */
                limit?: number;
                /** @description Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`. */
                order?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Chat Completions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatCompletionList"];
                };
            };
        };
    };
    createChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateChatCompletionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateChatCompletionResponse"];
                    "text/event-stream": components["schemas"]["CreateChatCompletionStreamResponse"];
                };
            };
        };
    };
    getChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the chat completion to retrieve. */
                completion_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A chat completion */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateChatCompletionResponse"];
                };
            };
        };
    };
    updateChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the chat completion to update. */
                completion_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    metadata: components["schemas"]["Metadata"];
                };
            };
        };
        responses: {
            /** @description A chat completion */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateChatCompletionResponse"];
                };
            };
        };
    };
    deleteChatCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the chat completion to delete. */
                completion_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The chat completion was deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatCompletionDeleted"];
                };
            };
        };
    };
    getChatCompletionMessages: {
        parameters: {
            query?: {
                /** @description Identifier for the last message from the previous pagination request. */
                after?: string;
                /** @description Number of messages to retrieve. */
                limit?: number;
                /** @description Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`. */
                order?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description The ID of the chat completion to retrieve messages from. */
                completion_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatCompletionMessageList"];
                };
            };
        };
    };
    createCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompletionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCompletionResponse"];
                };
            };
        };
    };
    ListContainers: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContainerListResource"];
                };
            };
        };
    };
    CreateContainer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateContainerBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContainerResource"];
                };
            };
        };
    };
    RetrieveContainer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                container_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContainerResource"];
                };
            };
        };
    };
    DeleteContainer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the container to delete. */
                container_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ListContainerFiles: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path: {
                container_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContainerFileListResource"];
                };
            };
        };
    };
    CreateContainerFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                container_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateContainerFileBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContainerFileResource"];
                };
            };
        };
    };
    RetrieveContainerFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                container_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContainerFileResource"];
                };
            };
        };
    };
    DeleteContainerFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                container_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RetrieveContainerFileContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                container_id: string;
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createEmbedding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEmbeddingRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateEmbeddingResponse"];
                };
            };
        };
    };
    listEvals: {
        parameters: {
            query?: {
                /** @description Identifier for the last eval from the previous pagination request. */
                after?: string;
                /** @description Number of evals to retrieve. */
                limit?: number;
                /** @description Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order. */
                order?: "asc" | "desc";
                /** @description Evals can be ordered by creation time or last updated time. Use
                 *     `created_at` for creation time or `updated_at` for last updated time.
                 *      */
                order_by?: "created_at" | "updated_at";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of evals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalList"];
                };
            };
        };
    };
    createEval: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEvalRequest"];
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eval"];
                };
            };
        };
    };
    getEval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to retrieve. */
                eval_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The evaluation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eval"];
                };
            };
        };
    };
    updateEval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to update. */
                eval_id: string;
            };
            cookie?: never;
        };
        /** @description Request to update an evaluation */
        requestBody: {
            content: {
                "application/json": {
                    /** @description Rename the evaluation. */
                    name?: string;
                    metadata?: components["schemas"]["Metadata"];
                };
            };
        };
        responses: {
            /** @description The updated evaluation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Eval"];
                };
            };
        };
    };
    deleteEval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to delete. */
                eval_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the evaluation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example eval.deleted */
                        object: string;
                        /** @example true */
                        deleted: boolean;
                        /** @example eval_abc123 */
                        eval_id: string;
                    };
                };
            };
            /** @description Evaluation not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getEvalRuns: {
        parameters: {
            query?: {
                /** @description Identifier for the last run from the previous pagination request. */
                after?: string;
                /** @description Number of runs to retrieve. */
                limit?: number;
                /** @description Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`. */
                order?: "asc" | "desc";
                /** @description Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`. */
                status?: "queued" | "in_progress" | "completed" | "canceled" | "failed";
            };
            header?: never;
            path: {
                /** @description The ID of the evaluation to retrieve runs for. */
                eval_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of runs for the evaluation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalRunList"];
                };
            };
        };
    };
    createEvalRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to create a run for. */
                eval_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEvalRunRequest"];
            };
        };
        responses: {
            /** @description Successfully created a run for the evaluation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalRun"];
                };
            };
            /** @description Bad request (for example, missing eval object) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getEvalRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to retrieve runs for. */
                eval_id: string;
                /** @description The ID of the run to retrieve. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The evaluation run */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalRun"];
                };
            };
        };
    };
    cancelEvalRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation whose run you want to cancel. */
                eval_id: string;
                /** @description The ID of the run to cancel. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The canceled eval run object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalRun"];
                };
            };
        };
    };
    deleteEvalRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to delete the run from. */
                eval_id: string;
                /** @description The ID of the run to delete. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted the eval run */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example eval.run.deleted */
                        object?: string;
                        /** @example true */
                        deleted?: boolean;
                        /** @example evalrun_677469f564d48190807532a852da3afb */
                        run_id?: string;
                    };
                };
            };
            /** @description Run not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getEvalRunOutputItems: {
        parameters: {
            query?: {
                /** @description Identifier for the last output item from the previous pagination request. */
                after?: string;
                /** @description Number of output items to retrieve. */
                limit?: number;
                /** @description Filter output items by status. Use `failed` to filter by failed output
                 *     items or `pass` to filter by passed output items.
                 *      */
                status?: "fail" | "pass";
                /** @description Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`. */
                order?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description The ID of the evaluation to retrieve runs for. */
                eval_id: string;
                /** @description The ID of the run to retrieve output items for. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of output items for the evaluation run */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalRunOutputItemList"];
                };
            };
        };
    };
    getEvalRunOutputItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the evaluation to retrieve runs for. */
                eval_id: string;
                /** @description The ID of the run to retrieve. */
                run_id: string;
                /** @description The ID of the output item to retrieve. */
                output_item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The evaluation run output item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvalRunOutputItem"];
                };
            };
        };
    };
    listFiles: {
        parameters: {
            query?: {
                /** @description Only return files with the given purpose. */
                purpose?: string;
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFilesResponse"];
                };
            };
        };
    };
    createFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateFileRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIFile"];
                };
            };
        };
    };
    retrieveFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the file to use for this request. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIFile"];
                };
            };
        };
    };
    deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the file to use for this request. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteFileResponse"];
                };
            };
        };
    };
    downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the file to use for this request. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    runGrader: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RunGraderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunGraderResponse"];
                };
            };
        };
    };
    validateGrader: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateGraderRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateGraderResponse"];
                };
            };
        };
    };
    listFineTuningCheckpointPermissions: {
        parameters: {
            query?: {
                /** @description The ID of the project to get permissions for. */
                project_id?: string;
                /** @description Identifier for the last permission ID from the previous pagination request. */
                after?: string;
                /** @description Number of permissions to retrieve. */
                limit?: number;
                /** @description The order in which to retrieve permissions. */
                order?: "ascending" | "descending";
            };
            header?: never;
            path: {
                /** @description The ID of the fine-tuned model checkpoint to get permissions for.
                 *      */
                fine_tuned_model_checkpoint: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFineTuningCheckpointPermissionResponse"];
                };
            };
        };
    };
    createFineTuningCheckpointPermission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the fine-tuned model checkpoint to create a permission for.
                 *      */
                fine_tuned_model_checkpoint: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFineTuningCheckpointPermissionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFineTuningCheckpointPermissionResponse"];
                };
            };
        };
    };
    deleteFineTuningCheckpointPermission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the fine-tuned model checkpoint to delete a permission for.
                 *      */
                fine_tuned_model_checkpoint: string;
                /** @description The ID of the fine-tuned model checkpoint permission to delete.
                 *      */
                permission_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteFineTuningCheckpointPermissionResponse"];
                };
            };
        };
    };
    listPaginatedFineTuningJobs: {
        parameters: {
            query?: {
                /** @description Identifier for the last job from the previous pagination request. */
                after?: string;
                /** @description Number of fine-tuning jobs to retrieve. */
                limit?: number;
                /** @description Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata.
                 *      */
                metadata?: {
                    [key: string]: string;
                } | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPaginatedFineTuningJobsResponse"];
                };
            };
        };
    };
    createFineTuningJob: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFineTuningJobRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FineTuningJob"];
                };
            };
        };
    };
    retrieveFineTuningJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the fine-tuning job.
                 *      */
                fine_tuning_job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FineTuningJob"];
                };
            };
        };
    };
    cancelFineTuningJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the fine-tuning job to cancel.
                 *      */
                fine_tuning_job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FineTuningJob"];
                };
            };
        };
    };
    listFineTuningJobCheckpoints: {
        parameters: {
            query?: {
                /** @description Identifier for the last checkpoint ID from the previous pagination request. */
                after?: string;
                /** @description Number of checkpoints to retrieve. */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the fine-tuning job to get checkpoints for.
                 *      */
                fine_tuning_job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFineTuningJobCheckpointsResponse"];
                };
            };
        };
    };
    listFineTuningEvents: {
        parameters: {
            query?: {
                /** @description Identifier for the last event from the previous pagination request. */
                after?: string;
                /** @description Number of events to retrieve. */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the fine-tuning job to get events for.
                 *      */
                fine_tuning_job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFineTuningJobEventsResponse"];
                };
            };
        };
    };
    pauseFineTuningJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the fine-tuning job to pause.
                 *      */
                fine_tuning_job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FineTuningJob"];
                };
            };
        };
    };
    resumeFineTuningJob: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the fine-tuning job to resume.
                 *      */
                fine_tuning_job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FineTuningJob"];
                };
            };
        };
    };
    createImageEdit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateImageEditRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImagesResponse"];
                    "text/event-stream": components["schemas"]["ImageEditStreamEvent"];
                };
            };
        };
    };
    createImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateImageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImagesResponse"];
                    "text/event-stream": components["schemas"]["ImageGenStreamEvent"];
                };
            };
        };
    };
    createImageVariation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateImageVariationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImagesResponse"];
                };
            };
        };
    };
    listModels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListModelsResponse"];
                };
            };
        };
    };
    retrieveModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the model to use for this request */
                model: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Model"];
                };
            };
        };
    };
    deleteModel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The model to delete */
                model: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteModelResponse"];
                };
            };
        };
    };
    createModeration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateModerationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateModerationResponse"];
                };
            };
        };
    };
    "admin-api-keys-list": {
        parameters: {
            query?: {
                after?: string | null;
                order?: "asc" | "desc";
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of organization API keys. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyList"];
                };
            };
        };
    };
    "admin-api-keys-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example New Admin Key */
                    name: string;
                };
            };
        };
        responses: {
            /** @description The newly created admin API key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminApiKey"];
                };
            };
        };
    };
    "admin-api-keys-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Details of the requested API key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminApiKey"];
                };
            };
        };
    };
    "admin-api-keys-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Confirmation that the API key was deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example key_abc */
                        id?: string;
                        /** @example organization.admin_api_key.deleted */
                        object?: string;
                        /** @example true */
                        deleted?: boolean;
                    };
                };
            };
        };
    };
    "list-audit-logs": {
        parameters: {
            query?: {
                /** @description Return only events whose `effective_at` (Unix seconds) is in this range. */
                effective_at?: {
                    /** @description Return only events whose `effective_at` (Unix seconds) is greater than this value. */
                    gt?: number;
                    /** @description Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value. */
                    gte?: number;
                    /** @description Return only events whose `effective_at` (Unix seconds) is less than this value. */
                    lt?: number;
                    /** @description Return only events whose `effective_at` (Unix seconds) is less than or equal to this value. */
                    lte?: number;
                };
                /** @description Return only events for these projects. */
                "project_ids[]"?: string[];
                /** @description Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](https://platform.openai.com/docs/api-reference/audit-logs/object). */
                "event_types[]"?: components["schemas"]["AuditLogEventType"][];
                /** @description Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID. */
                "actor_ids[]"?: string[];
                /** @description Return only events performed by users with these emails. */
                "actor_emails[]"?: string[];
                /** @description Return only events performed on these targets. For example, a project ID updated. */
                "resource_ids[]"?: string[];
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Audit logs listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditLogsResponse"];
                };
            };
        };
    };
    listOrganizationCertificates: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificates listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
        };
    };
    uploadCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The certificate upload payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadCertificateRequest"];
            };
        };
        responses: {
            /** @description Certificate uploaded successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Certificate"];
                };
            };
        };
    };
    activateOrganizationCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The certificate activation payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleCertificatesRequest"];
            };
        };
        responses: {
            /** @description Certificates activated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
        };
    };
    deactivateOrganizationCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The certificate deactivation payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleCertificatesRequest"];
            };
        };
        responses: {
            /** @description Certificates deactivated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
        };
    };
    getCertificate: {
        parameters: {
            query?: {
                /** @description A list of additional fields to include in the response. Currently the only supported value is `content` to fetch the PEM content of the certificate. */
                include?: "content"[];
            };
            header?: never;
            path: {
                /** @description Unique ID of the certificate to retrieve. */
                certificate_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Certificate"];
                };
            };
        };
    };
    modifyCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The certificate modification payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyCertificateRequest"];
            };
        };
        responses: {
            /** @description Certificate modified successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Certificate"];
                };
            };
        };
    };
    deleteCertificate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCertificateResponse"];
                };
            };
        };
    };
    "usage-costs": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently only `1d` is supported, default to `1d`. */
                bucket_width?: "1d";
                /** @description Return only costs for these projects. */
                project_ids?: string[];
                /** @description Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them. */
                group_by?: ("project_id" | "line_item")[];
                /** @description A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Costs data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "list-invites": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invites listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteListResponse"];
                };
            };
        };
    };
    inviteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The invite request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["InviteRequest"];
            };
        };
        responses: {
            /** @description User invited successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invite"];
                };
            };
        };
    };
    "retrieve-invite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invite to retrieve. */
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invite retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invite"];
                };
            };
        };
    };
    "delete-invite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invite to delete. */
                invite_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invite deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteDeleteResponse"];
                };
            };
        };
    };
    "list-projects": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description If `true` returns all projects including those that have been `archived`. Archived projects are not included by default. */
                include_archived?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Projects listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectListResponse"];
                };
            };
        };
    };
    "create-project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The project create request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreateRequest"];
            };
        };
        responses: {
            /** @description Project created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    "retrieve-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    "modify-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        /** @description The project update request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdateRequest"];
            };
        };
        responses: {
            /** @description Project updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Error response when updating the default project. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "list-project-api-keys": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project API keys listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApiKeyListResponse"];
                };
            };
        };
    };
    "retrieve-project-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the API key. */
                key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project API key retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApiKey"];
                };
            };
        };
    };
    "delete-project-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the API key. */
                key_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project API key deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApiKeyDeleteResponse"];
                };
            };
            /** @description Error response for various conditions. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "archive-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project archived successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
        };
    };
    listProjectCertificates: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
            };
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificates listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
        };
    };
    activateProjectCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        /** @description The certificate activation payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleCertificatesRequest"];
            };
        };
        responses: {
            /** @description Certificates activated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
        };
    };
    deactivateProjectCertificates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        /** @description The certificate deactivation payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToggleCertificatesRequest"];
            };
        };
        responses: {
            /** @description Certificates deactivated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCertificatesResponse"];
                };
            };
        };
    };
    "list-project-rate-limits": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. The default is 100.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project rate limits listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRateLimitListResponse"];
                };
            };
        };
    };
    "update-project-rate-limits": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the rate limit. */
                rate_limit_id: string;
            };
            cookie?: never;
        };
        /** @description The project rate limit update request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectRateLimitUpdateRequest"];
            };
        };
        responses: {
            /** @description Project rate limit updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRateLimit"];
                };
            };
            /** @description Error response for various conditions. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "list-project-service-accounts": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project service accounts listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectServiceAccountListResponse"];
                };
            };
            /** @description Error response when project is archived. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "create-project-service-account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        /** @description The project service account create request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectServiceAccountCreateRequest"];
            };
        };
        responses: {
            /** @description Project service account created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectServiceAccountCreateResponse"];
                };
            };
            /** @description Error response when project is archived. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve-project-service-account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the service account. */
                service_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project service account retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectServiceAccount"];
                };
            };
        };
    };
    "delete-project-service-account": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the service account. */
                service_account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project service account deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectServiceAccountDeleteResponse"];
                };
            };
        };
    };
    "list-project-users": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project users listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUserListResponse"];
                };
            };
            /** @description Error response when project is archived. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "create-project-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
            };
            cookie?: never;
        };
        /** @description The project user create request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUserCreateRequest"];
            };
        };
        responses: {
            /** @description User added to project successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUser"];
                };
            };
            /** @description Error response for various conditions. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "retrieve-project-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project user retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUser"];
                };
            };
        };
    };
    "modify-project-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        /** @description The project user update request payload. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUserUpdateRequest"];
            };
        };
        responses: {
            /** @description Project user's role updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUser"];
                };
            };
            /** @description Error response for various conditions. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "delete-project-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the project. */
                project_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project user deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectUserDeleteResponse"];
                };
            };
            /** @description Error response for various conditions. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "usage-audio-speeches": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Return only usage for these users. */
                user_ids?: string[];
                /** @description Return only usage for these API keys. */
                api_key_ids?: string[];
                /** @description Return only usage for these models. */
                models?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them. */
                group_by?: ("project_id" | "user_id" | "api_key_id" | "model")[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-audio-transcriptions": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Return only usage for these users. */
                user_ids?: string[];
                /** @description Return only usage for these API keys. */
                api_key_ids?: string[];
                /** @description Return only usage for these models. */
                models?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them. */
                group_by?: ("project_id" | "user_id" | "api_key_id" | "model")[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-code-interpreter-sessions": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`. */
                group_by?: "project_id"[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-completions": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Return only usage for these users. */
                user_ids?: string[];
                /** @description Return only usage for these API keys. */
                api_key_ids?: string[];
                /** @description Return only usage for these models. */
                models?: string[];
                /** @description If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.
                 *      */
                batch?: boolean;
                /** @description Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them. */
                group_by?: ("project_id" | "user_id" | "api_key_id" | "model" | "batch")[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-embeddings": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Return only usage for these users. */
                user_ids?: string[];
                /** @description Return only usage for these API keys. */
                api_key_ids?: string[];
                /** @description Return only usage for these models. */
                models?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them. */
                group_by?: ("project_id" | "user_id" | "api_key_id" | "model")[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-images": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them. */
                sources?: ("image.generation" | "image.edit" | "image.variation")[];
                /** @description Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them. */
                sizes?: ("256x256" | "512x512" | "1024x1024" | "1792x1792" | "1024x1792")[];
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Return only usage for these users. */
                user_ids?: string[];
                /** @description Return only usage for these API keys. */
                api_key_ids?: string[];
                /** @description Return only usage for these models. */
                models?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them. */
                group_by?: ("project_id" | "user_id" | "api_key_id" | "model" | "size" | "source")[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-moderations": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Return only usage for these users. */
                user_ids?: string[];
                /** @description Return only usage for these API keys. */
                api_key_ids?: string[];
                /** @description Return only usage for these models. */
                models?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them. */
                group_by?: ("project_id" | "user_id" | "api_key_id" | "model")[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "usage-vector-stores": {
        parameters: {
            query: {
                /** @description Start time (Unix seconds) of the query time range, inclusive. */
                start_time: number;
                /** @description End time (Unix seconds) of the query time range, exclusive. */
                end_time?: number;
                /** @description Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`. */
                bucket_width?: "1m" | "1h" | "1d";
                /** @description Return only usage for these projects. */
                project_ids?: string[];
                /** @description Group the usage data by the specified fields. Support fields include `project_id`. */
                group_by?: "project_id"[];
                /** @description Specifies the number of buckets to return.
                 *     - `bucket_width=1d`: default: 7, max: 31
                 *     - `bucket_width=1h`: default: 24, max: 168
                 *     - `bucket_width=1m`: default: 60, max: 1440
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. Corresponding to the `next_page` field from the previous response. */
                page?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage data retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponse"];
                };
            };
        };
    };
    "list-users": {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description Filter by the email address of users. */
                emails?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users listed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
        };
    };
    "retrieve-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    "modify-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        /** @description The new user role to modify. This must be one of `owner` or `member`. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRoleUpdateRequest"];
            };
        };
        responses: {
            /** @description User role updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    "delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDeleteResponse"];
                };
            };
        };
    };
    "create-realtime-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create an ephemeral API key with the given session configuration. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RealtimeSessionCreateRequest"];
            };
        };
        responses: {
            /** @description Session created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RealtimeSessionCreateResponse"];
                };
            };
        };
    };
    "create-realtime-transcription-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create an ephemeral API key with the given session configuration. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RealtimeTranscriptionSessionCreateRequest"];
            };
        };
        responses: {
            /** @description Session created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RealtimeTranscriptionSessionCreateResponse"];
                };
            };
        };
    };
    createResponse: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResponse"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                    "text/event-stream": components["schemas"]["ResponseStreamEvent"];
                };
            };
        };
    };
    getResponse: {
        parameters: {
            query?: {
                /** @description Additional fields to include in the response. See the `include`
                 *     parameter for Response creation above for more information.
                 *      */
                include?: components["schemas"]["Includable"][];
                /** @description If set to true, the model response data will be streamed to the client
                 *     as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
                 *     See the [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)
                 *     for more information.
                 *      */
                stream?: boolean;
                /** @description The sequence number of the event after which to start streaming.
                 *      */
                starting_after?: number;
                /** @description When true, stream obfuscation will be enabled. Stream obfuscation adds
                 *     random characters to an `obfuscation` field on streaming delta events
                 *     to normalize payload sizes as a mitigation to certain side-channel
                 *     attacks. These obfuscation fields are included by default, but add a
                 *     small amount of overhead to the data stream. You can set
                 *     `include_obfuscation` to false to optimize for bandwidth if you trust
                 *     the network links between your application and the OpenAI API.
                 *      */
                include_obfuscation?: boolean;
            };
            header?: never;
            path: {
                /** @description The ID of the response to retrieve. */
                response_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
        };
    };
    deleteResponse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the response to delete. */
                response_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    cancelResponse: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the response to cancel. */
                response_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Response"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listInputItems: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between
                 *     1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description The order to return the input items in. Default is `desc`.
                 *     - `asc`: Return the input items in ascending order.
                 *     - `desc`: Return the input items in descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description An item ID to list items after, used in pagination.
                 *      */
                after?: string;
                /** @description An item ID to list items before, used in pagination.
                 *      */
                before?: string;
                /** @description Additional fields to include in the response. See the `include`
                 *     parameter for Response creation above for more information.
                 *      */
                include?: components["schemas"]["Includable"][];
            };
            header?: never;
            path: {
                /** @description The ID of the response to retrieve input items for. */
                response_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseItemList"];
                };
            };
        };
    };
    createThread: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateThreadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadObject"];
                };
            };
        };
    };
    createThreadAndRun: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateThreadAndRunRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunObject"];
                };
            };
        };
    };
    getThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the thread to retrieve. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadObject"];
                };
            };
        };
    };
    modifyThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the thread to modify. Only the `metadata` can be modified. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyThreadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadObject"];
                };
            };
        };
    };
    deleteThread: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the thread to delete. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteThreadResponse"];
                };
            };
        };
    };
    listMessages: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
                /** @description Filter messages by the run ID that generated them.
                 *      */
                run_id?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) the messages belong to. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListMessagesResponse"];
                };
            };
        };
    };
    createMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to create a message for. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMessageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageObject"];
                };
            };
        };
    };
    getMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this message belongs. */
                thread_id: string;
                /** @description The ID of the message to retrieve. */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageObject"];
                };
            };
        };
    };
    modifyMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the thread to which this message belongs. */
                thread_id: string;
                /** @description The ID of the message to modify. */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyMessageRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageObject"];
                };
            };
        };
    };
    deleteMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the thread to which this message belongs. */
                thread_id: string;
                /** @description The ID of the message to delete. */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteMessageResponse"];
                };
            };
        };
    };
    listRuns: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the thread the run belongs to. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListRunsResponse"];
                };
            };
        };
    };
    createRun: {
        parameters: {
            query?: {
                /** @description A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                 *
                 *     See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                 *      */
                "include[]"?: "step_details.tool_calls[*].file_search.results[*].content"[];
            };
            header?: never;
            path: {
                /** @description The ID of the thread to run. */
                thread_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRunRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunObject"];
                };
            };
        };
    };
    getRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run. */
                thread_id: string;
                /** @description The ID of the run to retrieve. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunObject"];
                };
            };
        };
    };
    modifyRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) that was run. */
                thread_id: string;
                /** @description The ID of the run to modify. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyRunRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunObject"];
                };
            };
        };
    };
    cancelRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the thread to which this run belongs. */
                thread_id: string;
                /** @description The ID of the run to cancel. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunObject"];
                };
            };
        };
    };
    listRunSteps: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
                /** @description A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                 *
                 *     See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                 *      */
                "include[]"?: "step_details.tool_calls[*].file_search.results[*].content"[];
            };
            header?: never;
            path: {
                /** @description The ID of the thread the run and run steps belong to. */
                thread_id: string;
                /** @description The ID of the run the run steps belong to. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListRunStepsResponse"];
                };
            };
        };
    };
    getRunStep: {
        parameters: {
            query?: {
                /** @description A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
                 *
                 *     See the [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.
                 *      */
                "include[]"?: "step_details.tool_calls[*].file_search.results[*].content"[];
            };
            header?: never;
            path: {
                /** @description The ID of the thread to which the run and run step belongs. */
                thread_id: string;
                /** @description The ID of the run to which the run step belongs. */
                run_id: string;
                /** @description The ID of the run step to retrieve. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunStepObject"];
                };
            };
        };
    };
    submitToolOuputsToRun: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the [thread](https://platform.openai.com/docs/api-reference/threads) to which this run belongs. */
                thread_id: string;
                /** @description The ID of the run that requires the tool output submission. */
                run_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubmitToolOutputsRunRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RunObject"];
                };
            };
        };
    };
    createUpload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUploadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Upload"];
                };
            };
        };
    };
    cancelUpload: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Upload.
                 *      */
                upload_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Upload"];
                };
            };
        };
    };
    completeUpload: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Upload.
                 *      */
                upload_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteUploadRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Upload"];
                };
            };
        };
    };
    addUploadPart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the Upload.
                 *      */
                upload_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["AddUploadPartRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadPart"];
                };
            };
        };
    };
    listVectorStores: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVectorStoresResponse"];
                };
            };
        };
    };
    createVectorStore: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVectorStoreRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreObject"];
                };
            };
        };
    };
    getVectorStore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store to retrieve. */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreObject"];
                };
            };
        };
    };
    modifyVectorStore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store to modify. */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVectorStoreRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreObject"];
                };
            };
        };
    };
    deleteVectorStore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store to delete. */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteVectorStoreResponse"];
                };
            };
        };
    };
    createVectorStoreFileBatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store for which to create a File Batch.
                 *      */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVectorStoreFileBatchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileBatchObject"];
                };
            };
        };
    };
    getVectorStoreFileBatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store that the file batch belongs to. */
                vector_store_id: string;
                /** @description The ID of the file batch being retrieved. */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileBatchObject"];
                };
            };
        };
    };
    cancelVectorStoreFileBatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store that the file batch belongs to. */
                vector_store_id: string;
                /** @description The ID of the file batch to cancel. */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileBatchObject"];
                };
            };
        };
    };
    listFilesInVectorStoreBatch: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
                /** @description Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`. */
                filter?: "in_progress" | "completed" | "failed" | "cancelled";
            };
            header?: never;
            path: {
                /** @description The ID of the vector store that the files belong to. */
                vector_store_id: string;
                /** @description The ID of the file batch that the files belong to. */
                batch_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVectorStoreFilesResponse"];
                };
            };
        };
    };
    listVectorStoreFiles: {
        parameters: {
            query?: {
                /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
                 *      */
                limit?: number;
                /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
                 *      */
                order?: "asc" | "desc";
                /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
                 *      */
                after?: string;
                /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
                 *      */
                before?: string;
                /** @description Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`. */
                filter?: "in_progress" | "completed" | "failed" | "cancelled";
            };
            header?: never;
            path: {
                /** @description The ID of the vector store that the files belong to. */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVectorStoreFilesResponse"];
                };
            };
        };
    };
    createVectorStoreFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store for which to create a File.
                 *      */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVectorStoreFileRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileObject"];
                };
            };
        };
    };
    getVectorStoreFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store that the file belongs to. */
                vector_store_id: string;
                /** @description The ID of the file being retrieved. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileObject"];
                };
            };
        };
    };
    updateVectorStoreFileAttributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store the file belongs to. */
                vector_store_id: string;
                /** @description The ID of the file to update attributes. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVectorStoreFileAttributesRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileObject"];
                };
            };
        };
    };
    deleteVectorStoreFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store that the file belongs to. */
                vector_store_id: string;
                /** @description The ID of the file to delete. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteVectorStoreFileResponse"];
                };
            };
        };
    };
    retrieveVectorStoreFileContent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store. */
                vector_store_id: string;
                /** @description The ID of the file within the vector store. */
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreFileContentResponse"];
                };
            };
        };
    };
    searchVectorStore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vector store to search. */
                vector_store_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VectorStoreSearchRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VectorStoreSearchResultsPage"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
